package com.rcomputer.genapp.action;
import com.rcomputer.genapp.model.*;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;
import javax.transaction.UserTransaction;
import javax.faces.application.FacesMessage;
import java.util.logging.Logger;
//import org.jboss.seam.security.Identity;
import javax.persistence.*;
import javax.xml.bind.DatatypeConverter;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.Servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.Date;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.Serializable;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.transaction.Transactional;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.ResourceBundle;
import java.util.Iterator;

import javax.annotation.Resource;
import java.sql.SQLException;
import java.math.BigInteger;

//import static org.jboss.seam.international.StatusMessage.Severity.ERROR;
//import javax.faces.application.FacesMessage.Severity;

import javax.validation.constraints.Size;
import javax.validation.constraints.NotNull;
//import org.jboss.seam.ScopeType;
//import org.jboss.seam.annotations.Name;
//import org.jboss.seam.annotations.Scope;
//import org.jboss.seam.annotations.intercept.BypassInterceptors;
//import org.jboss.seam.international.StatusMessages;
//import org.jboss.seam.security.management.PasswordHash;

/**
 * Component used to administer databased data
 * sqlAdminSupport.backupTenant,backupTenantToLocal,truncateBackupTenants,fullBackupAll,restoreTenant, etc
 *  another class sqlSupport is used forsqlSupport.backupTenants,sqlSupport.backupTenantC,sqlSupport.restoreTenantC
 *
 * @author j mitra
 * @see sqlSupport
 */
@Named("sqlAdminSupport")
@SessionScoped
@Transactional
public class SqlAdminSupport implements Serializable {
  @Resource UserTransaction utx;
   private Logger log = Logger.getLogger(SqlAdminSupport.class.getCanonicalName());
      @PersistenceContext(unitName = "genappcdi")
      EntityManager entityManager;
     @Inject
     Yxxxch522xhhxxhxxxxxclientHome yxxxch522xhhxxhxxxxxclientHome;
     Yxxxch522xhhxxhxxxxxclient yxxxch522xhhxxhxxxxxclientli;
     @Inject
     Yxxxch522xhhxxhxxxxxclientList yxxxch522xhhxxhxxxxxclientList;
	@Inject
	Yxxxuq591xwwqqhxxxxxrate1fList yxxxuq591xwwqqhxxxxxrate1fList;
      @Inject
      Yxxxuh566xwwqqwxxxxxuserHome yxxxuh566xwwqqwxxxxxuserHome;

      FacesContext facesContext = FacesContext.getCurrentInstance();
       private String owner2Code="";
       private Calendar calendar = Calendar.getInstance();
       private SimpleDateFormat sdf = new SimpleDateFormat("yy-MM-ddHmm");
       String urlName;

       private int urlIndex=0;
       ResourceBundle bundle =null;
       String schemaName;
    {
      if (facesContext !=null){
       bundle = facesContext.getApplication().getResourceBundle(facesContext, "messages");
       ExternalContext externalContext = facesContext.getExternalContext();
       ServletContext context = (ServletContext)FacesContext.getCurrentInstance().getExternalContext().getContext();
       HttpServletRequest req = (HttpServletRequest) externalContext.getRequest();
       HttpSession session = req.getSession();
       urlName=((javax.servlet.http.HttpServletRequest) externalContext.getRequest()).getServerName();

          urlIndex=urlName.lastIndexOf(".");
          if (urlIndex == -1){
            urlIndex=urlName.length();
          }
          if (urlName.contains("www.")){
           owner2Code=urlName.substring(4,urlIndex);
          }else{
           owner2Code=urlName.substring(0,urlIndex);
          }
          //extract subdomain if raaspi or lraaspi
          owner2Code=owner2Code.replace(".l3recommerce","");
          owner2Code=owner2Code.replace(".3recommerce","");
          owner2Code=owner2Code.replace(".lraaspi","");
          owner2Code=owner2Code.replace(".raaspi","");
     }
   }
	public byte[] getBlobdata(String table,String keyWPrefix,String keyQualifier,int keySequence,String owner2Code) {
         this.owner2Code=owner2Code;
         return this.getBlobdata(table,keyWPrefix,keyQualifier,keySequence);
        }
    /**
    * The following method gets blobdata from both user and SYSTEM for a specific key
    * @param args String table,keyWPrefix,String keyQualifier,int keySequence
    * @return byte[] image stream
    * @Exception No Record Exists
    * @see
    *
    */

	public byte[] getBlobdata(String table,String keyWPrefix,String keyQualifier,int keySequence) {
           String actualTable=table;
           String slobkeyhash;
           if(keyWPrefix.length() > 0){
	     slobkeyhash = keyWPrefix.substring(1);
           }else{
            return null;
           }
		String qualifier = keyQualifier;
		int sequence = keySequence;

		try {
               Yxxxuq1n1xwwqqqxxxxxblobdata blobdata=null;
		    List<Yxxxuq1n1xwwqqqxxxxxblobdata> results = entityManager
					.createQuery(
							"select cc from Yxxxuq1n1xwwqqqxxxxxblobdata cc where cc.a0xxukbdlvxxxxxxxxxxfromtable=:blobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:blobdatafromkey and cc.a2xxuxxxbv50xxxxxxxxqualifier=:blobdataqualifier and cc.a3xxexnsbvxxxxxxxxxxsequence = :blobdatasequence and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2  ")
					           .setParameter("blobdatafromtable", actualTable).setParameter(
							"blobdatafromkey", slobkeyhash).setParameter(
							"blobdataqualifier", qualifier).setParameter(
							"blobdatasequence", sequence).setParameter("owner2", owner2Code).getResultList();
                if(!results.isEmpty()){
                 if ( !results.get(0).getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM")) {
                  return results.get(0).getB1xxuzbxbvxxxxxxxxxxdata();
                 }else{
                  if (results.size() > 1){
                   return results.get(1).getB1xxuzbxbvxxxxxxxxxxdata();
                  }else{
                   return results.get(0).getB1xxuzbxbvxxxxxxxxxxdata();
                  }
                 }
                }else{
                 // use bkgr color richSkin.headerGradientColor if no image supplied , which is default
                  return null;
                }
        } catch (NoResultException e) {
               return null;
        }
	}

	public String getClobdata(String table,String keyWPrefix,String keyQualifier,int keySequence,int size,String owner2Code) {
         this.owner2Code=owner2Code;
         return this.getClobdata(table,keyWPrefix,keyQualifier,keySequence,size);
        }
	public String getClobdata(String table,String keyWPrefix,String keyQualifier,int keySequence,int size) {
           String actualTable=table;
           String slobkeyhash;

           if(keyWPrefix.length() > 0){
	     	 slobkeyhash = keyWPrefix.substring(1);
           }else{
            return null;
           }
		String qualifier = keyQualifier;
		int sequence = keySequence;


		try {
               Yxxxuq1m1xwwqqqxxxxxclobdata clobdata=null;
		    List<Yxxxuq1m1xwwqqqxxxxxclobdata> results =  entityManager
					.createQuery(
							"select cc from Yxxxuq1m1xwwqqqxxxxxclobdata cc where cc.a0xxukcdlvxxxxxxxxxxfromtable=:clobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:clobdatafromkey and cc.a2xxuxxxbv50xxxxxxxxqualifier=:clobdataqualifier and cc.a3xxexnsbvxxxxxxxxxxsequence = :clobdatasequence and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2  ")
					.setParameter("clobdatafromtable", actualTable).setParameter(
							"clobdatafromkey", slobkeyhash).setParameter(
							"clobdataqualifier", qualifier).setParameter(
							"clobdatasequence", sequence).setParameter("owner2", owner2Code).getResultList();
                if(!results.isEmpty()){
                 if ( !results.get(0).getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM")) {
                  clobdata= results.get(0);
                 }else{
                  if (results.size() > 1){
                   clobdata= results.get(1);
                  }else{
                   clobdata= results.get(0);
                  }
                 }
                 if(clobdata==null){
                  return null;
                 }
                }
                else{
                 return null;
                }
                if(clobdata.getB1xxuzaxbvxxxxxxxxxxdata()==null){
                 return null;
                }
                else{
                 int dl=clobdata.getB1xxuzaxbvxxxxxxxxxxdata().length();
                 if (dl > size){
			  return clobdata.getB1xxuzaxbvxxxxxxxxxxdata().substring(0,size);
                 }else {
			  return clobdata.getB1xxuzaxbvxxxxxxxxxxdata();
                 }
                }
		} catch (NoResultException nre) {
			return null;
		} catch (Exception e) {
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                     FacesMessage.SEVERITY_INFO,bundle.getString("unexpcted")+ " "+bundle.getString("error")+ " "+e.getMessage(),""));
			return null;
		}
	}



      public String  createSchema() {
      String schemaName=yxxxuh566xwwqqwxxxxxuserHome.getClientName().trim();
      schemaName="genapp";//hard code for now, used in tables, persistence.xml as well as in .jrxml
      String schemaOwner=yxxxuh566xwwqqwxxxxxuserHome.getClientSerialNum();
      if(schemaOwner == null || schemaOwner.isEmpty()){
       schemaOwner="postgres";
      }
      String sqlScript ="";
      sqlScript="CREATE SCHEMA \""+schemaName+"\" AUTHORIZATION "+schemaOwner;
      Query q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,"create schema \""+schemaName+"\" done",""));

	 return "create schema done";
     }

      public String  createSchema(String dbProductName,String schemaName,String schemaOwner) {
      //default ie no db server like mysql or postgresql assume hsqldb good for demo or quick fatjar usage
      //hsqldb mem tables with file ie file:h is used in datasource def. dbname is h but created db is PUBLIC (why???)
      if(dbProductName == null || dbProductName.isEmpty()){
       dbProductName="hsql";
      }
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }

      if(schemaOwner == null || schemaOwner.isEmpty()){
       schemaOwner="sa";
      }
      try{
       String sqlScript ="";
       sqlScript="CREATE SCHEMA \""+schemaName+"\" AUTHORIZATION "+schemaOwner;
       Query q = entityManager.createNativeQuery(sqlScript);
       q.executeUpdate();
       //do not use resource bundle message, tables may not exist
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,"create schema \""+schemaName+"\" done",""));
        log.info("create schema "+schemaName+ " done");
	return "create schema done";
      }catch (Exception e) {
       log.info("create schema Exception for \""+schemaName+"\" error "+e.getMessage());
       return null;
      }

     }

	public String  dropSchema() {
      String sqlScript ="";
      sqlScript="DROP SCHEMA genapp cascade";
      Query q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      log.info("drop schema done");

	 return "drop schema done";
     }

      public String  dropSchema(String dbProductName,String schemaName,String schemaOwner) {
      //default ie no db server like mysql or postgresql assume hsqldb good for demo or quick fatjar usage
      //hsqldb mem tables with file ie file:h is used in datasource def. dbname is h but created db is PUBLIC (why???)
      if(dbProductName == null || dbProductName.isEmpty()){
       dbProductName="hsql";
      }
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }

      if(schemaOwner == null || schemaOwner.isEmpty()){
       schemaOwner="sa";
      }
      String sqlScript ="";
      sqlScript="DROP SCHEMA \""+schemaName+"\" cascade";
      Query q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      //do not use resource bundle message, tables may not exist
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,"create schema \""+schemaName+"\" done",""));
        log.info("drop schema "+schemaName+ " done");

	 return "drop schema done";
     }

     public String  createTables(String dbProductName,String schemaName) {
      //common to hsql and postgres, clob,blob,user differs as they use bytea vs image
      //mysql cannot use common because it uses auto_increment for Identity/Serial
      //String schemaName=yxxxuh566xwwqqwxxxxxuserHome.getClientName().trim();
      if(dbProductName == null || dbProductName.isEmpty()){
       dbProductName="hsql";
      }
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }
     // warning- sqlscript may have multiple creates under one quote mark. do not put line feeds in the middle to look nicer
     //aug18 2021 made separate scripts because hsqldb did not support it.
     if(dbProductName.equals("msql")){
      createTablesMsql(schemaName);// uses auto-create for identify
      return null;
     }
     try{
     String sqlscript ="";
      sqlscript="create  table if not exists  \""+schemaName+"\".\"address\"  (  \"sid\" integer generated by default as identity, \"addrescode\"  varchar(32) not null,  \"addrl1\"  varchar(159),  \"addrl2\"  varchar(159),  \"addrl3\"  varchar(159),  \"city\"  varchar(20),  \"provnstate\"  varchar(20),  \"country\"  varchar(20),  \"pzcode\"  varchar(20),  \"descript\"  varchar(120),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp, primary  key(\"sid\")  ) ";
      Query q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"resource_bundle\" (  \"sid\" integer generated by default as identity,\"name\" varchar(50),\"language\" varchar(2),\"country\" varchar(2),\"variant\" varchar(2),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(  \"sid\"))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"resource\" (  \"sid\" integer generated by default as identity, \"_key\"  varchar(50) ,  \"_value\" varchar(2555),  \"resourcebundle\"  int  not null,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"), foreign  key  (  \"resourcebundle\")  references \""+schemaName+"\".\"resource_bundle\"  (  \"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();

      sqlscript="create  table if not exists  \""+schemaName+"\".\"options\"  (  \"sid\" integer generated by default as identity, \"row\"  varchar(2) not null,  \"options01\"  varchar(159),  \"purpose01\"  varchar(159),  \"value01\"  varchar(159),  \"options02\"  varchar(159),  \"purpose02\"  varchar(159),  \"value02\"  varchar(159),  \"options03\"  varchar(159),  \"purpose03\"  varchar(159),  \"value03\"  varchar(159),  \"options04\"  varchar(159),  \"purpose04\"  varchar(159),  \"value04\"  varchar(159),  \"options05\"  varchar(159),  \"purpose05\"  varchar(159),  \"value05\"  varchar(159),  \"options06\"  varchar(159),  \"purpose06\"  varchar(159),  \"value06\"  varchar(159),  \"options07\"  varchar(159),  \"purpose07\"  varchar(159),  \"value07\"  varchar(159),  \"options08\"  varchar(159),  \"purpose08\"  varchar(159),  \"value08\"  varchar(159),  \"options09\"  varchar(159),  \"purpose09\"  varchar(159),  \"value09\"  varchar(159),  \"options10\"  varchar(159),  \"purpose10\"  varchar(159),  \"value10\"  varchar(159),  \"options11\"  varchar(159),  \"purpose11\"  varchar(159),  \"value11\"  varchar(159),  \"options12\"  varchar(159),  \"purpose12\"  varchar(159),  \"value12\"  varchar(159),  \"options13\"  varchar(159),  \"purpose13\"  varchar(159),  \"value13\"  varchar(159),  \"options14\"  varchar(159),  \"purpose14\"  varchar(159),  \"value14\"  varchar(159),  \"options15\"  varchar(159),  \"purpose15\"  varchar(159),  \"value15\"  varchar(159),  \"options16\"  varchar(159),  \"purpose16\"  varchar(159),  \"value16\"  varchar(159),  \"options17\"  varchar(159),  \"purpose17\"  varchar(159),  \"value17\"  varchar(159),  \"options18\"  varchar(159),  \"purpose18\"  varchar(159),  \"value18\"  varchar(159),  \"options19\"  varchar(159),  \"purpose19\"  varchar(159),  \"value19\"  varchar(159),  \"options20\"  varchar(159),  \"purpose20\"  varchar(159),  \"value20\"  varchar(159),  \"options21\"  varchar(159),  \"purpose21\"  varchar(159),  \"value21\"  varchar(159),  \"options22\"  varchar(159),  \"purpose22\"  varchar(159),  \"value22\"  varchar(159),  \"options23\"  varchar(159),  \"purpose23\"  varchar(159),  \"value23\"  varchar(159),  \"options24\"  varchar(159),  \"purpose24\"  varchar(159),  \"value24\"  varchar(159),  \"options25\"  varchar(159),  \"purpose25\"  varchar(159),  \"value25\"  varchar(159),  \"options26\"  varchar(159),  \"purpose26\"  varchar(159),  \"value26\"  varchar(159),  \"options27\"  varchar(159),  \"purpose27\"  varchar(159),  \"value27\"  varchar(159),  \"options28\"  varchar(159),  \"purpose28\"  varchar(159),  \"value28\"  varchar(159),  \"options29\"  varchar(159),  \"purpose29\"  varchar(159),  \"value29\"  varchar(159),  \"options30\"  varchar(159),  \"purpose30\"  varchar(159),  \"value30\"  varchar(159),  \"options31\"  varchar(159),  \"purpose31\"  varchar(159),  \"value31\"  varchar(159),  \"options32\"  varchar(159),  \"purpose32\"  varchar(159),  \"value32\"  varchar(159),  \"options33\"  varchar(159),  \"purpose33\"  varchar(159),  \"value33\"  varchar(159),  \"options34\"  varchar(159),  \"purpose34\"  varchar(159),  \"value34\"  varchar(159),  \"options35\"  varchar(159),  \"purpose35\"  varchar(159),  \"value35\"  varchar(159),  \"options36\"  varchar(159),  \"purpose36\"  varchar(159),  \"value36\"  varchar(159),  \"options37\"  varchar(159),  \"purpose37\"  varchar(159),  \"value37\"  varchar(159),  \"options38\"  varchar(159),  \"purpose38\"  varchar(159),  \"value38\"  varchar(159),  \"options39\"  varchar(159),  \"purpose39\"  varchar(159),  \"value39\"  varchar(159),  \"options40\"  varchar(159),  \"purpose40\"  varchar(159),  \"value40\"  varchar(159),  \"options41\"  varchar(159),  \"purpose41\"  varchar(159),  \"value41\"  varchar(159),  \"options42\"  varchar(159),  \"purpose42\"  varchar(159),  \"value42\"  varchar(159),  \"options43\"  varchar(159),  \"purpose43\"  varchar(159),  \"value43\"  varchar(159),  \"options44\"  varchar(159),  \"purpose44\"  varchar(159),  \"value44\"  varchar(159),  \"options45\"  varchar(159),  \"purpose45\"  varchar(159),  \"value45\"  varchar(159),  \"options46\"  varchar(159),  \"purpose46\"  varchar(159),  \"value46\"  varchar(159),  \"options47\"  varchar(159),  \"purpose47\"  varchar(159),  \"value47\"  varchar(159),  \"options48\"  varchar(159),  \"purpose48\"  varchar(159),  \"value48\"  varchar(159),  \"options49\"  varchar(159),  \"purpose49\"  varchar(159),  \"value49\"  varchar(159),  \"options50\"  varchar(159),  \"purpose50\"  varchar(159),  \"value50\"  varchar(159),  \"options51\"  varchar(159),  \"purpose51\"  varchar(159),  \"value51\"  varchar(159),  \"options52\"  varchar(159),  \"purpose52\"  varchar(159),  \"value52\"  varchar(159),  \"options53\"  varchar(159),  \"purpose53\"  varchar(159),  \"value53\"  varchar(159),  \"options54\"  varchar(159),  \"purpose54\"  varchar(159),  \"value54\"  varchar(159),  \"options55\"  varchar(159),  \"purpose55\"  varchar(159),  \"value55\"  varchar(159),  \"options56\"  varchar(159),  \"purpose56\"  varchar(159),  \"value56\"  varchar(159),  \"options57\"  varchar(159),  \"purpose57\"  varchar(159),  \"value57\"  varchar(159),  \"options58\"  varchar(159),  \"purpose58\"  varchar(159),  \"value58\"  varchar(159),  \"options59\"  varchar(159),  \"purpose59\"  varchar(159),  \"value59\"  varchar(159),  \"options60\"  varchar(159),  \"purpose60\"  varchar(159),  \"value60\"  varchar(159),  \"options61\"  varchar(159),  \"purpose61\"  varchar(159),  \"value61\"  varchar(159),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\"), unique (\"row\",\"owner2\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"client\"  (  \"sid\" integer generated by default as identity, \"clientversion\"  varchar(5) not null,  \"serialnum\"  varchar(15),  \"enterprisecompanyna\"  varchar(35),  \"descript\"  varchar(120),  \"addrl1\"  varchar(35),  \"addrl2\"  varchar(35),  \"addrl3\"  varchar(35),  \"city\"  varchar(20),  \"provnstate\"  varchar(20),  \"countryname\"  varchar(20),  \"pzcode\"  varchar(20),  \"phoneo\"  varchar(30),  \"phoneh\"  varchar(25),  \"phonec\"  varchar(25),  \"phonex\"  varchar(30),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(60),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"enterprisecompcode\"  varchar(40),  \"enterprisecompsize\"  varchar(15),  \"barcsize\"  varchar(12),  \"level\"  boolean,  \"poskipp\"  varchar(10),  \"looseit\"  boolean,  \"jobskip\"  varchar(10),  \"cartonfl\"  boolean,  \"picklist\"  boolean,  \"proddesc\"  varchar(15),  \"prodcode\"  varchar(12),  \"njob\"  varchar(15),  \"nmateria\"  varchar(15),  \"nactivity\"  varchar(15),  \"nbutt\"  varchar(15),  \"ncustome\"  varchar(15),  \"ncontact\"  varchar(15),  \"nvendor\"  varchar(15),  \"nemployee\"  varchar(15),  \"nschedule\"  varchar(15),  \"nreject\"  varchar(15),  \"nreturn\"  varchar(15),  \"ncode\"  varchar(15),  \"manufid\"  varchar(20),  \"bartype\"  varchar(4),  \"cadtype\"  varchar(4),  \"cartype\"  varchar(4),  \"shitype\"  varchar(4),  \"reptype\"  varchar(4),  \"loctype\"  varchar(4),  \"barcol\"  boolean,  \"carcol\"  boolean,  \"cadcol\"  boolean,  \"shicol\"  boolean,  \"repcol\"  boolean,  \"loccol\"  boolean,  \"altseria\"  boolean,  \"countrycode\"  varchar(3),  \"naltseri\"  varchar(12),  \"scrcolor\"  varchar(255),  \"hilcolor\"  varchar(255),  \"textcolor\"  varchar(255),  \"baccolor\"  varchar(255),  \"datetype\"  varchar(7), \"currcode\"  varchar(3),  \"prinbar\"  boolean,  \"barprint\"  varchar(4),  \"carprint\"  varchar(4),  \"cadprint\"  varchar(4),  \"locprint\"  varchar(4),  \"shiprint\"  varchar(4),  \"repprint\"  varchar(4),  \"barprty\"  varchar(4),  \"repprty\"  varchar(4),  \"carprty\"  varchar(4),  \"cadprty\"  varchar(4),  \"shiprty\"  varchar(4),  \"locprty\"  varchar(4),  \"altselen\"  int,  \"custolen\"  int,  \"carcsize\"  varchar(12),  \"cadcsize\"  varchar(12),  \"shicsize\"  varchar(12),  \"repcsize\"  varchar(12),  \"loccsize\"  varchar(12),  \"cs\"  varchar(15),  \"nconftyp\"  varchar(12),  \"nlocatio\"  varchar(12),  \"ndivcode\"  varchar(12),  \"ndepcode\"  varchar(12),  \"naddcode\"  varchar(12),  \"nfloor\"  varchar(12),  \"nroom\"  varchar(12),  \"nrack\"  varchar(12),  \"menutype\"  varchar(3),  \"padtype\"  varchar(4),  \"nrate1ta\"  varchar(12),  \"nrate2ta\"  varchar(12),  \"defconft\" varchar(8)  ,  \"beepsou\"  boolean,  \"confirm\"  boolean,  \"linefeed\"  boolean,  \"refbaradj\"  int,  \"shibaradj\"  int,  \"cusbaradj\"  int,  \"locbaradj\"  int,  \"carbaradj\"  int,  \"ncorder\"  varchar(12),  \"nsperson\"  varchar(12),  \"prompti\"  boolean,  \"customerquotenb\"  varchar(15),  \"customerquoten\"  int,  \"customerquotena\"  varchar(15),  \"customerordernb\"  varchar(15),  \"customerordern\"  int,  \"customerorderna\"  varchar(15),  \"vendorordernb\"  varchar(15),  \"vendorordern\"  int,  \"vendororderna\"  varchar(15),\"jobnb\"  varchar(15),  \"jobn\"  int,  \"jobna\"  varchar(15),  \"customerinvoicenb\"  varchar(15),  \"customerinvoicen\"  int,  \"customerinvoicena\"  varchar(15),  \"vendorinvoicenb\"  varchar(15),  \"vendorinvoicen\"  int,  \"vendorinvoicena\"  varchar(15),  \"customerpicknb\"  varchar(15),  \"customerpickn\"  int,  \"customerpickna\"  varchar(15),  \"vendorquotenb\"  varchar(15),  \"vendorquoten\"  int,  \"vendorquotena\"  varchar(15),  \"customerpaymntnb\"  varchar(15),  \"customerpaymntn\"  int,  \"customerpaymntna\"  varchar(15),  \"vendorpaymntnb\"  varchar(15),  \"vendorpaymntn\"  int,  \"vendorpaymntna\"  varchar(15),  \"vendorchqnb\"  varchar(15),  \"vendorchqn\"  int,  \"vendorchqna\"  varchar(15),  \"tasknb\"  varchar(15),  \"taskn\"  int,  \"taskna\"  varchar(15),  \"arseqb\"  varchar(15),  \"arseq\"  int,  \"arseqa\"  varchar(15),  \"apseqb\"  varchar(15),  \"apseq\"  int,  \"apseqa\"  varchar(15),  \"glseqb\"  varchar(15),  \"glseq\"  int,  \"glseqa\"  varchar(15),  \"paseqb\"  varchar(15),  \"paseq\"  int,  \"paseqa\"  varchar(15),  \"icseqb\"  varchar(15),  \"icseq\"  int,  \"icseqa\"  varchar(15),  \"joseqb\"  varchar(15),  \"joseq\"  int,  \"joseqa\"  varchar(15),  \"sglentry\"  varchar(15),  \"tax1code\"  varchar(25),  \"tax2code\"  varchar(25),  \"tax3code\"  varchar(25),  \"ndecimal\"  int,  \"edipassw\"  varchar(10),  \"intpassw\"  varchar(10),  \"inrpassw\"  varchar(10),  \"imlpassw\"  varchar(10),  \"rmlpassw\"  varchar(10),  \"lmlpassw\"  varchar(10),  \"hospassw\"  varchar(10),  \"lanpassw\"  varchar(10),  \"wanpassw\"  varchar(10),  \"ashostid\"  varchar(35),  \"hdstyle\"  varchar(30),  \"mtstyle\"  varchar(30),  \"ststyle\"  varchar(30),  \"dtstyle\"  varchar(30),  \"ftstyle\"  varchar(30),  \"defaultr\"  varchar(15),  \"defaultc\"  varchar(3),  \"dbname\"  varchar(35),  \"rootdir\"  varchar(60),  \"keyorder\"  varchar(3),  \"currbusdat\"  timestamp,  \"lastbusdat\"  timestamp,  \"currcaldat\"  timestamp,  \"lastcaldat\"  timestamp,  \"preprocess\"  boolean,  \"margin\"  int,  \"footer\"  int,  \"lastuser\"  varchar(10),  \"listbuildc\"  boolean,  \"listbuildv\"  boolean,  \"listbuilde\"  boolean,  \"listbrownc\"  int,  \"listbrownv\"  int,  \"listbrowne\"  int,  \"smtpserver\"  varchar(30),  \"smtpuser\"  varchar(35),  \"smtppass\"  varchar(20),  \"pop3server\"  varchar(30),  \"pop3user\"  varchar(35),  \"pop3pass\"  varchar(20),  \"smatcode\"  varchar(15),  \"fyrend\"  timestamp,  \"fperiods\"  int,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  \"employeeordernb\"  varchar(15),  \"employeeordern\"  int,  \"employeeorderna\"  varchar(15),  \"licensetype\"  varchar(15),\"licensestart\"  timestamp,\"licenseend\"  timestamp, \"apiclientid\"  varchar(255),\"apiclientsecret\"  varchar(12000),  \"currsymb\"  varchar(4),  primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"department\"  (  \"sid\" integer generated by default as identity, \"depcode\"  varchar(32) not null,  \"descript\"  varchar(120),  \"glprefix\" varchar(20), \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")   )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"company\"  (  \"sid\" integer generated by default as identity, \"companycode\"  varchar(32) not null,  \"descript\"  varchar(120),  \"legalname\"  varchar(60),  \"mailtocode\" int , \"glprefix\" varchar(20), \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(\"sid\"),  foreign  key  ( \"mailtocode\"  )  references \""+schemaName+"\".\"address\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"control\"  (  \"sid\" integer generated by default as identity, \"controlcode\"  varchar(32) not null,  \"descript\"  varchar(120),  \"typeofcontrol\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"division\"  (  \"sid\" integer generated by default as identity, \"divcode\"  varchar(32) not null, \"descript\"  varchar(120),  \"glprefix\" varchar(20), \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"location\"  (  \"sid\" integer generated by default as identity, \"location\"  varchar(32) not null,  \"descript\"  varchar(120),  \"companycode\"  int  , \"addresscode\"  int  ,  \"floor\"  varchar(25),  \"room\"  varchar(25),  \"rack\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"exclude\"  boolean,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"companycode\"  )  references \""+schemaName+"\".\"company\"  (  \"sid\"  ),  foreign  key  (  \"addresscode\"  )  references \""+schemaName+"\".\"address\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"residency\"  (  \"sid\" integer generated by default as identity, \"residency\"  varchar(32) not null,  \"descript\"  varchar(120),  \"municipality\"  varchar(20),  \"province\"  varchar(20),  \"countryname\"  varchar(20),  \"exclude\"  boolean,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"account\"  (  \"sid\" integer generated by default as identity, \"account\"  varchar(20) not null  ,  \"descript\"  varchar(120),  \"category\"  varchar(20),  \"type\"  varchar(12),  \"budget\"  numeric(14,2),  \"actual\"  numeric(14,2),  \"actualn\"  numeric(14,2),  \"prevbudg\"  numeric(14,2),  \"prevact\"  numeric(14,2),  \"sequence\"  int,  \"child\"  varchar(20),  \"parent\"  varchar(20),  \"rollupq\"  int,  \"companycode\"  int  ,  \"depcode\"  int  ,  \"divcode\"  int  ,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"currency\"  varchar(3),  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"p0\"  numeric(14,2),  \"p1\"  numeric(14,2),  \"p2\"  numeric(14,2),  \"p3\"  numeric(14,2),  \"p4\"  numeric(14,2),  \"p5\"  numeric(14,2),  \"p6\"  numeric(14,2),  \"p7\"  numeric(14,2),  \"p8\"  numeric(14,2),  \"p9\"  numeric(14,2),  \"p10\"  numeric(14,2),  \"p11\"  numeric(14,2),  \"p12\"  numeric(14,2),  \"p13\"  numeric(14,2),  \"p14\"  numeric(14,2),  \"p8t\"  numeric(14,2),  \"p9t\"  numeric(14,2),  \"p10t\"  numeric(14,2),  \"p11t\"  numeric(14,2),  primary  key  (  \"sid\"  ),  foreign  key  (  \"companycode\"  )  references \""+schemaName+"\".\"company\"  (  \"sid\"  ),  foreign  key  (  \"depcode\"  )  references \""+schemaName+"\".\"department\"  (  \"sid\"  ),  foreign  key  (  \"divcode\"  )  references \""+schemaName+"\".\"division\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"customer\"  (  \"sid\" integer generated by default as identity, \"customer\"  varchar(32) not null,  \"descript\"  varchar(120),  \"title\"  varchar(12),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"customerascompanyname\"  varchar(25),  \"custtotl\"  numeric(14,2),  \"custtqty\"  numeric(14,2), \"companycode\" int,  \"location\"  int  ,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"custtax1\"  varchar(25),  \"custtax2\"  varchar(25),  \"custtax3\"  varchar(25),  \"phoneo\"  varchar(20),  \"phoneh\"  varchar(16),  \"phonec\"  varchar(16),  \"phonex\"  varchar(20),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"dob\" timestamp, \"placeofbirth\" varchar(60), \"sex\" varchar(1), \"age\" int, \"cusrtotl\"  numeric(14,2),  \"cusrtqty\"  numeric(14,2),  \"cusmtotl\"  numeric(14,2),  \"cusdtotl\"  numeric(14,2),  \"lastorder\"  varchar(20),  \"lastinvoic\"  varchar(20),  \"lastpaymnq\"  numeric(14,2),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"shiplabel\"  boolean,  \"type\"  varchar(10),  \"defaultglac\"  int,  \"integrset\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"totlpaid\"  numeric(14,2),  \"contacted\"  timestamp,  \"bywho\"  varchar(20),  \"nxtcontact\"  timestamp,  \"via\"  varchar(11),  \"keywords\"  varchar(30),  \"notes\"  varchar(159),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"  ),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign  key  (  \"companycode\")  references \""+schemaName+"\".\"company\"(  \"sid\"  ),  foreign  key  (  \"location\"  )  references \""+schemaName+"\".\"location\"  (  \"sid\" ),  foreign  key  (  \"defaultglac\"  )  references \""+schemaName+"\".\"account\"  (  \"sid\" ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendor\"  (  \"sid\" integer generated by default as identity, \"vendor\"  varchar(32) not null,  \"descript\"  varchar(60),  \"title\"  varchar(20),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"vendorascompanyname\"  varchar(25),  \"vendtotl\"  numeric(14,2),  \"vendtqty\"  numeric(14,2), \"companycode\" int  ,  \"location\"  int  ,  \"mailtocode\"  int  ,  \"phoneo\"  varchar(30),  \"phoneh\"  varchar(25),  \"phonec\"  varchar(25),  \"phonex\"  varchar(30),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"venrtotl\"  numeric(14,2),  \"venrtqty\"  numeric(14,2),  \"venmtotl\"  numeric(14,2),  \"venddtotl\"  numeric(14,2),  \"lastquote\"  varchar(20),  \"lastorder\"  varchar(20),  \"lastinvoic\"  varchar(20),  \"lastpaymq\"  numeric(14,2),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"shiplabel\"  boolean,  \"type\"  varchar(10),  \"shiptocode\"  int  ,  \"defaultglac\"  int,  \"integrset\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"totlpaid\"  numeric(14,2),  \"contacted\"  timestamp,  \"bywho\"  varchar(20),  \"keywords\"  varchar(30),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign  key  (  \"companycode\")  references \""+schemaName+"\".\"company\"(  \"sid\"  ),  foreign  key  (  \"location\"  )  references \""+schemaName+"\".\"location\"  (  \"sid\" ),  foreign  key  (  \"defaultglac\"  )  references \""+schemaName+"\".\"account\"  (  \"sid\" ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"employee\"  (  \"sid\" integer generated by default as identity, \"employee\"  varchar(32) not null,  \"descript\"  varchar(120),  \"title\"  varchar(20),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"companycode\"  int  ,  \"empltotl\"  numeric(14,2),  \"empltqty\"  numeric(14,2),  \"divcode\"  int  ,  \"depcode\"  int  ,  \"location\"  int  ,  \"residency\"  int  ,  \"mailtocode\"  int  ,  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"custtax1\"  varchar(25),  \"custtax2\"  varchar(25),  \"custtax3\"  varchar(25),  \"phoneo\"  varchar(30),  \"phoneh\"  varchar(25),  \"phonec\"  varchar(25),  \"phonex\"  varchar(30),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"emprtotl\"  numeric(14,2),  \"emprtqty\"  numeric(14,2),  \"empmtotl\"  numeric(14,2),  \"empdtotl\"  numeric(14,2),  \"lastquote\"  varchar(20),  \"lastorder\"  varchar(20),  \"lastinvoic\"  varchar(20),  \"lastpaymq\"  numeric(14,2),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"shiplabel\"  boolean,  \"shiptocode\"  int  ,  \"type\"  varchar(12),  \"defaultglac\"  int,  \"integrset\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"contacted\"  timestamp,  \"bywho\"  varchar(20),  \"keywords\"  varchar(30),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  (  \"depcode\"  )  references \""+schemaName+"\".\"department\"  (  \"sid\"  ),  foreign  key  (  \"divcode\"  )  references \""+schemaName+"\".\"division\"  (  \"sid\"  ),  foreign  key  (  \"companycode\"  )  references \""+schemaName+"\".\"company\"  (  \"sid\"  ),  foreign  key  ( \"mailtocode\"  )  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign  key  (  \"location\"  )  references \""+schemaName+"\".\"location\"  (  \"sid\"  ),  foreign  key  (  \"defaultglac\"  )  references \""+schemaName+"\".\"account\"  (  \"sid\" ),  foreign  key  (  \"residency\")  references \""+schemaName+"\".\"residency\"  (  \"sid\"  ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vcontact\"  (  \"sid\" integer generated by default as identity, \"contact\"  varchar(20)  not null ,  \"vendor\"  int,  \"title\"  varchar(20),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"phoneo\"  varchar(25),  \"phoneh\"  varchar(25),  \"phonec\"  varchar(25),  \"phonex\"  varchar(20),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"location\"  int,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"printsta\"  int,  \"shiplabel\"  boolean,  \"type\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"keywords\"  varchar(30),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign  key  (  \"location\")  references \""+schemaName+"\".\"location\"(  \"sid\"  ),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"ccontact\"  (  \"sid\" integer generated by default as identity, \"contact\"  varchar(32) not null,  \"customer\"  int,  \"title\"  varchar(20),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"custtax1\"  varchar(25),  \"custtax2\"  varchar(25),  \"custtax3\"  varchar(25),  \"phoneo\"  varchar(16),  \"phoneh\"  varchar(16),  \"phonec\"  varchar(16),  \"phonex\"  varchar(20),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"location\"  int,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"shiplabel\"  boolean,  \"type\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"keywords\"  varchar(30),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address\"(  \"sid\"  )  ,  foreign  key  (  \"location\")  references \""+schemaName+"\".\"location\"(  \"sid\"  )  ,  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"perioddates\"  (  \"sid\" integer generated by default as identity, \"period\"  varchar(2) not null,  \"descript\"  varchar(120),  \"startdate\"  timestamp,  \"enddate\"  timestamp,  \"startofweek\" int, \"startofbweek\" int, \"endofbweek\" int, \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"acperiod\"  (  \"sid\" integer generated by default as identity, \"rowid\" varchar(2) not null, \"currperiod\"  varchar(2),  \"descript\"  varchar(120),  \"currbusdate\"  timestamp,  \"currcaldate\"  timestamp,  \"currlocaldate\"  timestamp,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary key(\"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"wageearner\"  (  \"sid\" integer generated by default as identity, \"wageearnerid\"  varchar(32) not null,  \"employee\"  int  ,  \"sin\"  varchar(20),  \"birthdt\"  timestamp,  \"fedclaim\"  numeric(14,2),  \"provclaim\"  numeric(14,2),  \"payyrfreq\"  int,  \"payperiod\"  int,  \"wcb\"  boolean,  \"wcbytd\"  numeric(14,2),  \"emplinsur\"  boolean,  \"insytd\"  numeric(14,2),  \"vacretain\"  boolean,  \"vacatonyt\"  numeric(14,2),  \"wageunit\"  varchar(20),  \"wagerate\"  numeric(14,2),  \"otimeunit\"  varchar(20),  \"otimerate\"  numeric(14,2),  \"wageunits\"  numeric(14,2),  \"otimunits\"  numeric(14,2),  \"wageout\"  numeric(14,2),  \"ovtimeout\"  numeric(14,2),  \"salaryout\"  numeric(14,2),  \"commission\"  numeric(14,2),  \"benefits\"  numeric(14,2),  \"vacation\"  numeric(14,2),  \"vacpayout\"  numeric(14,2),  \"advance\"  numeric(14,2),  \"pension\"  numeric(14,2),  \"aftertax\"  boolean,  \"uniondues\"  numeric(14,2),  \"medical\"  numeric(14,2),  \"fincometx\"  numeric(14,2),  \"pincometx\"  numeric(14,2),  \"thispaya\"  numeric(14,2),  \"lastpaya\"  numeric(14,2),  \"payytd\"  numeric(14,2),  \"fpensiytd\"  numeric(14,2),  \"ppensiytd\"  numeric(14,2),  \"itaxytd\"  numeric(14,2),  \"ptaxytd\"  numeric(14,2),  \"grpayytd\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"arthatbl\"  (  \"sid\" integer generated by default as identity, \"usage\"  varchar(32) not null,  \"wcbpercnt\"  numeric(14,2),  \"insfactor\"  numeric(14,2),  \"vacatonrate\"  numeric(14,2),  \"pensionmax\"  numeric(14,2),  \"wcbmax\"  numeric(14,2),  \"insmax\"  numeric(14,2),  \"itaxlv0rate\"  numeric(14,2),  \"itaxlv1rate\"  numeric(14,2),  \"itaxlv2rate\"  numeric(14,2),  \"itaxlv3rate\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rollupgroup\"  (  \"sid\" integer generated by default as identity, \"groupid\"  varchar(32) not null,  \"descript\"  varchar(120),  \"type\"  varchar(10),  \"currpw\"  varchar(20),  \"expiry\"  timestamp,  \"currency\"  varchar(3),  \"period0b\"  numeric(14,2),  \"period0\"  numeric(14,2),  \"periodtotalsb\"  numeric(14,2),  \"periodtotals\" numeric(14,2),  \"period1budget\"  numeric(14,2),  \"period1actual\"  numeric(14,2),  \"period2b\"  numeric(14,2),  \"period2\"  numeric(14,2),  \"period3b\"  numeric(14,2),  \"period3\"  numeric(14,2),  \"period4b\"  numeric(14,2),  \"period4\"  numeric(14,2),  \"period5b\"  numeric(14,2),  \"period5\"  numeric(14,2),  \"period6b\"  numeric(14,2),  \"period6\"  numeric(14,2),  \"period7b\"  numeric(14,2),  \"period7\"  numeric(14,2),  \"period8b\"  numeric(14,2),  \"period8\"  numeric(14,2),  \"period9b\"  numeric(14,2),  \"period9\"  numeric(14,2),  \"period10b\"  numeric(14,2),  \"period10\"  numeric(14,2),  \"period11b\"  numeric(14,2),  \"period11\"  numeric(14,2),  \"period12b\"  numeric(14,2),  \"period12\"  numeric(14,2),  \"periodnb\"  numeric(14,2),  \"periodn\"  numeric(14,2),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"membersgroup\"  (  \"sid\" integer generated by default as identity, \"groupid\"  varchar(32) not null,  \"descript\"  varchar(120),  \"quantity\" numeric(14,2),  \"mode\"  boolean,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"arthahist\"  (  \"sid\" integer generated by default as identity, \"wageearner\"  varchar(32) not null,  \"sin\"  varchar(12),  \"period\"  int,  \"month\"  int,  \"ccyy\"  int,  \"vacation\"  numeric(14,2),  \"wage\"  numeric(14,2),  \"overtime\"  numeric(14,2),  \"salary\"  numeric(14,2),  \"commission\"  numeric(14,2),  \"benefit\"  numeric(14,2),  \"fincometx\"  numeric(14,2),  \"pincometx\"  numeric(14,2),  \"wcbout\"  numeric(14,2),  \"emplinsur\"  numeric(14,2),  \"vacpayout\"  numeric(14,2),  \"advance\"  numeric(14,2),  \"fpensobtx\"  numeric(14,2),  \"fpensoatx\"  numeric(14,2),  \"uniondues\"  numeric(14,2),  \"medical\"  numeric(14,2),  \"payamt\"  numeric(14,2),  \"notes\"  varchar(60),  \"notes2\"  varchar(120),  \"chqnumber\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"glentries\"  (  \"sid\" integer generated by default as identity, \"glentryno\"  varchar(32) not null,  \"descript\"  varchar(120),  \"refcode\"  varchar(20),  \"period\"  int,  \"postdate\"  timestamp,  \"calendardt\"  timestamp,  \"depcode\"  int,  \"divcode\"  int,  \"account\"  int,  \"tdebitamt\"  numeric(14,2),  \"tcreditamt\"  numeric(14,2),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  , foreign  key  ( \"period\")  references \""+schemaName+"\".\"perioddates\" (  \"sid\"),  foreign  key  ( \"account\")  references \""+schemaName+"\".\"account\"  (  \"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"gentriesdetails\"  (  \"sid\" integer generated by default as identity, \"glentrysidno\"  int  not null ,  \"line\"  int,  \"depcode\"  int,  \"divcode\"  int,  \"account\"  int,  \"debitamt\"  numeric(14,2),  \"creditamt\"  numeric(14,2),  \"linetotl\"  numeric(14,2), \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(  \"sid\"), foreign  key  (  \"glentrysidno\")  references \""+schemaName+"\".\"glentries\"  (  \"sid\") ,  foreign  key  ( \"account\")  references \""+schemaName+"\".\"account\"  (  \"sid\")   )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"holiday\"  (  \"sid\" integer generated by default as identity, \"sholiday\"  varchar(32) not null,  \"holiday\"  timestamp,  \"descript\"  varchar(120),  \"type\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"employee\"  int  ,  \"residency\"  int  ,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  \"residency\")  references \""+schemaName+"\".\"residency\"  (  \"sid\"  ),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"journal\"  (  \"sid\" integer generated by default as identity, \"spostdate\"  varchar(25) not null,  \"postdate\"  timestamp,  \"calendardt\"  timestamp,  \"jrnltype\"  varchar(12),  \"jnlseqb\"  varchar(15),  \"jnlseq\"  int,  \"jnlseqs\"  varchar(15),  \"period\"  int,  \"account\"  varchar(20),  \"debit\"  numeric(14,2),  \"credit\"  numeric(14,2),  \"xreference\"  varchar(20),  \"descript\"  varchar(120),  \"statusfl\"  int,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cjournal\"  (  \"sid\" integer generated by default as identity, \"spostdate\"  varchar(25) not null,  \"postdate\"  timestamp,  \"calendardt\"  timestamp,  \"jrnltype\"  varchar(12),  \"jnlseqb\"  varchar(15),  \"jnlseq\"  int,  \"jnlseqs\"  varchar(15),  \"period\"  int,  \"control\"  varchar(20),  \"debit\"  numeric(14,2),  \"credit\"  numeric(14,2),  \"xreference\"  varchar(20),  \"descript\"  varchar(120),  \"statusfl\"  int,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"jjournal\"  (  \"sid\" integer generated by default as identity, \"spostdate\"  varchar(25) not null,  \"postdate\"  timestamp,  \"calendardt\"  timestamp,  \"jrnltype\"  varchar(12),  \"jnlseqb\"  varchar(15),  \"jnlseq\"  int,  \"jnlseqs\"  varchar(15),  \"period\"  int,  \"job\"  varchar(20),  \"debit\"  numeric(14,2),  \"credit\"  numeric(14,2),  \"xreference\"  varchar(20),  \"descript\"  varchar(120),  \"statusfl\"  int,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"item\"  (  \"sid\" integer generated by default as identity, \"matcode\"  varchar(32) not null,  \"quantity\"  numeric(14,2),  \"descript\"  varchar(120),  \"dateadded\"  timestamp,  \"source1\"  varchar(35),  \"source2\"  varchar(35),  \"upccode\"  varchar(25),  \"cost\"  numeric(14,2),  \"replcost\"  numeric(14,2),  \"selprice\"  numeric(14,2),  \"spricold\"  numeric(14,2),  \"spricnew\"  numeric(14,2),  \"spriceffdt\"  timestamp,  \"shipcode\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"misccode1\"  varchar(25),  \"misccode2\"  varchar(25),  \"qtylevel1\"  numeric(14,2),  \"unit\"  varchar(12),  \"caseqty\"  numeric(14,2),  \"type\"  varchar(12),  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"aliascode\"  varchar(25),  \"parentcode\"  int  ,  \"avgprice\"  numeric(14,2),  \"avgcost\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"subcodesn\"  varchar(35),  \"subcodesn2\" varchar(35),  \"subcodesn3\" varchar(35),  \"cuordqty\"  numeric(14,2),  \"venorqty\"  numeric(14,2),  \"cupicqty\"  numeric(14,2),  \"venpiqty\"  numeric(14,2),  \"cuinvqty\"  numeric(14,2),  \"cushiqty\"  numeric(14,2),  \"venshqty\"  numeric(14,2),  \"effdate\"  timestamp,  \"integrset\"  varchar(20),  \"notes\"  varchar(4096000),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"location\"  int  ,  \"barupc\"  varchar(30),  \"dateexpiry\"  timestamp,  \"datetorenew\"  timestamp,  primary  key  (  \"sid\"), foreign  key  (  \"parentcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\")  , foreign  key  (  \"location\"  )  references \""+schemaName+"\".\"location\"  (  \"sid\" ) )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"activity\"  (  \"sid\" integer generated by default as identity, \"activitycode\"  varchar(32) not null,  \"quantity\"  numeric(14,2),  \"descript\"  varchar(120),  \"date\"  timestamp,  \"source1\"  varchar(35),  \"source2\"  varchar(35),  \"upccode\"  varchar(25),  \"cost\"  numeric(14,2),  \"replcost\"  numeric(14,2),  \"selprice\"  numeric(14,2),  \"spricold\"  numeric(14,2),  \"spricnew\"  numeric(14,2),  \"spriceffdt\"  timestamp,  \"shipcode\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"misccode1\"  varchar(25),  \"misccode2\"  varchar(25),  \"qtylevel1\"  numeric(14,2),  \"unit\"  varchar(12),  \"caseqty\"  numeric(14,2),  \"type\"  varchar(12),  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"aliascode\"  varchar(25),  \"parentcode\"  int  ,  \"avgprice\"  numeric(14,2),  \"avgcost\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"subcodesn\"  varchar(35),  \"subcodesn2\" varchar(35),  \"subcodesn3\" varchar(35),  \"cuordqty\"  numeric(14,2),  \"venorqty\"  numeric(14,2),  \"cupicqty\"  numeric(14,2),  \"venpiqty\"  numeric(14,2),  \"cuinvqty\"  numeric(14,2),  \"cushiqty\"  numeric(14,2),  \"venshqty\"  numeric(14,2),  \"effdate\"  timestamp,  \"integrset\"  varchar(20),  \"notes\"  varchar(60),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barupc\"  varchar(30),  primary  key  (  \"sid\"), foreign  key  (  \"parentcode\")  references \""+schemaName+"\".\"activity\"  (  \"sid\")   )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"schedule\"  (  \"sid\" integer generated by default as identity, \"todo\"  varchar(35) not null,  \"descript\"  varchar(120),  \"employee\"  int  ,  \"ssdatet\"  varchar(30),  \"activitycode\"  int  ,  \"location\"  int  ,  \"sdatet\"  timestamp,  \"durationh\"  int,  \"durationm\"  int,  \"stimeh\"  int,  \"stimem\"  int,  \"stimeampm\"  boolean,  \"edatet\"  timestamp,  \"priority\"  boolean,  \"percntdone\"  numeric(14,2),  \"vendor\"  int  ,  \"vontact\"  int  ,  \"customer\"  int  ,  \"type\"  varchar(20),  \"mailtocode\"  int  ,  \"otheremplo\"  int,  \"repeatf\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"privateind\"  boolean,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90), \"mgroup\" int ,  primary  key  (  \"sid\" ),  foreign  key  (  \"activitycode\")  references \""+schemaName+"\".\"activity\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ),  foreign  key  (  \"mgroup\"  )  references \""+schemaName+"\".\"membersgroup\"  (  \"sid\"  ),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\"),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign key (\"location\")  references \""+schemaName+"\".\"location\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"scheduledetails\"  (  \"sid\" integer generated by default as identity, \"schedulesidno\"  int  not null ,  \"line\"  int,  \"employee\"  int,  \"vendor\"  int,  \"customer\"  int,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(  \"sid\"), foreign  key  (  \"schedulesidno\")  references \""+schemaName+"\".\"schedule\"  (  \"sid\") ,  foreign  key  ( \"employee\")  references \""+schemaName+"\".\"employee\"  (  \"sid\")   ,  foreign  key  ( \"vendor\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\")   ,  foreign  key  ( \"customer\")  references \""+schemaName+"\".\"customer\"  (  \"sid\")   )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"user\"  (  \"sid\" integer generated by default as identity, \"id\"  varchar(60) not null,  \"client\"  int  ,  \"employee\"  int  ,  \"vendor\"  int  ,  \"customer\"  int  ,  \"otherid\"  varchar(60),  \"alevel\"  varchar(12),  \"blevel\"  varchar(12),  \"currpw\"  varchar(40) not null,  \"expiry\"  timestamp,  \"oldpw\"  varchar(40),  \"temporarypassword\"  boolean,  \"passwordhash\"  varbinary(1000000),  \"activationkey\" varchar(60),  \"restrict1\"  varchar(20),  \"restrict2\"  varchar(20),  \"restrict3\"  varchar(20),  \"allow1\"  varchar(20),  \"allow2\"  varchar(20),  \"allow3\"  varchar(20),  \"maxproflrow\" varchar(20), cproflrow varchar(20), \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"ucurrcalda\"  timestamp,  \"preprocess\"  boolean,  \"notes\"  varchar(60),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),\"signature\" varchar(1200),  primary  key  (  \"sid\"),  foreign  key  (  \"client\"  )  references \""+schemaName+"\".\"client\"  (  \"sid\"  ),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\")  )";
      if(dbProductName.equals("psql")){
       sqlscript="create  table if not exists  \""+schemaName+"\".\"user\"  (  \"sid\" integer generated by default as identity, \"id\"  varchar(60) not null,  \"client\"  int  ,  \"employee\"  int  ,  \"vendor\"  int  ,  \"customer\"  int  ,  \"otherid\"  varchar(60),  \"alevel\"  varchar(12),  \"blevel\"  varchar(12),  \"currpw\"  varchar(40) not null,  \"expiry\"  timestamp,  \"oldpw\"  varchar(40),  \"temporarypassword\"  boolean,  \"passwordhash\"  bytea,  \"activationkey\" varchar(60),  \"restrict1\"  varchar(20),  \"restrict2\"  varchar(20),  \"restrict3\"  varchar(20),  \"allow1\"  varchar(20),  \"allow2\"  varchar(20),  \"allow3\"  varchar(20),  \"maxproflrow\" varchar(20), cproflrow varchar(20), \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"ucurrcalda\"  timestamp,  \"preprocess\"  boolean,  \"notes\"  varchar(60),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),\"signature\" varchar(1200),  primary  key  (  \"sid\"),  foreign  key  (  \"client\"  )  references \""+schemaName+"\".\"client\"  (  \"sid\"  ),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ),  foreign  key  (  \"employee\")  references "+schemaName+"employee\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references "+schemaName+"vendor\"  (  \"sid\")  )";
      }
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"userprofl\"  (  \"sid\" integer generated by default as identity, \"logonid\"  int, \"row\" varchar(20),\"option\" varchar(255), \"selectvalue\" varchar(255),  \"scrcolor\"  varchar(30),  \"hilcolor\"  varchar(30),  \"textcolor\"  varchar(30),  \"baccolor\"  varchar(30),  \"beepsou\"  boolean,  \"confirm\"  boolean,  \"prompti\"  boolean,  \"p1\"  varchar(5),  \"p2\"  varchar(5),  \"p3\"  varchar(5),  \"p4\"  varchar(5),  \"p5\"  varchar(5),  \"p6\"  varchar(5),  \"mtstyle\"  varchar(30),  \"ststyle\"  varchar(30),  \"dtstyle\"  varchar(30),  \"ftstyle\"  varchar(30),  \"defaultr\"  varchar(20),  \"defaultc\"  varchar(3),  \"dbname\"  varchar(20),  \"rootdir\"  varchar(35),  \"keyorder\"  varchar(3),  \"margin\"  numeric(14,2),  \"footer\"  numeric(14,2),  \"listbuildc\"  boolean,  \"listbuildv\"  boolean,  \"listbuilde\"  boolean,  \"listbrownc\"  int,  \"listbrownv\"  int,  \"listbrowne\"  int,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\"), foreign key(\"logonid\") references  \""+schemaName+"\".\"user\"(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"venartha\"  (  \"sid\" integer generated by default as identity, \"chqnumber\"  varchar(32) not null,  \"reconciled\"  varchar(12),  \"vendorc\"  int  ,  \"date\"  timestamp,  \"addrescode\"  int,  \"chqamt\"  numeric(14,2),  \"amtverbos\"  varchar(120),  \"notes\"  varchar(60),  \"advisel1\"  varchar(60),  \"advisel2\"  varchar(60),  \"advisel3\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key (\"sid\" ) ,  foreign  key  (  \"vendorc\"  )  references \""+schemaName+"\".\"vendor\"  (  \"sid\" )  )" ;
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"acintegr\"  (  \"sid\" integer generated by default as identity, \"moduleid\"  varchar(12)  ,  \"usagedescr\"  varchar(35),  \"usagecode\"  varchar(3)  ,  \"setsid\"  varchar(20)  ,  \"account\"  int  ,  \"extraintfield\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  ( \"account\")  references \""+schemaName+"\".\"account\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"itemjob\"  (  \"sid\" integer generated by default as identity, \"jobno\"  varchar(32) not null,  \"matcode\"  int  ,  \"proddatet\"  timestamp,  \"qtyalloc\"  numeric(14,2),  \"pono\"  varchar(20),  \"qtyostnd\"  numeric(14,2),  \"qtyalstk\"  numeric(14,2),  \"qtyissud\"  numeric(14,2),  \"jobtotl\"  numeric(14,2),  \"statusfl\"  int,  \"customej\"  int  ,  \"vendor\"  int,  \"statusfldt\"  timestamp,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"printmstatj\"  int,  \"prinmtfldtj\"  timestamp,  \"type\"  varchar(12),  \"matcodeout\"  varchar(20),  \"qtyout\"  numeric(14,2),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"customej\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"activityjob\"  (  \"sid\" integer generated by default as identity, \"jobno\"  varchar(32) not null,  \"activitycode\"  int  ,  \"proddatet\"  timestamp,  \"qtyalloc\"  numeric(14,2),  \"pono\"  int,  \"qtyostnd\"  numeric(14,2),  \"qtyalstk\"  numeric(14,2),  \"qtyissud\"  numeric(14,2),  \"jobtotl\"  numeric(14,2),  \"statusfl\"  int,  \"customej\"  int  ,  \"vendor\"  int,  \"statusfldt\"  timestamp,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"printmstatj\"  int,  \"prinmtfldtj\"  timestamp,  \"type\"  varchar(12),  \"matcodeout\"  varchar(20),  \"qtyout\"  numeric(14,2),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  (  \"activitycode\")  references \""+schemaName+"\".\"activity\"  (  \"sid\"),  foreign  key  (  \"customej\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"venquote\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"vendor\"  int  ,  \"matcode\"  int  ,  \"replicate\"  int  ,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"statusfl\"  int,  \"cinvoice\"  varchar(20),  \"jobno\"  varchar(20),  \"vpono\"  varchar(20),  \"rfpord\"  varchar(20),  \"statusfldt\"  timestamp,  \"rcpono\"  varchar(20),  \"odatet\"  timestamp,  \"terms\"  varchar(20),  \"priority\"  boolean,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(25),  \"vinvoice\"  varchar(20),  \"attach\"  varchar(20),  \"shipcode\"  varchar(20),  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"startdatet\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"  ),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"replicate\")  references \""+schemaName+"\".\"venquote\"  (  \"sid\"),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendorders\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"vendor\"  int  ,  \"matcode\"  int  ,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"statusfl\"  int,  \"jobno\"  varchar(20),  \"vendqno\"  int  ,  \"rfpord\"  varchar(20),  \"statusfldt\"  timestamp,  \"rcpono\"  varchar(20),  \"odatet\"  timestamp,  \"terms\"  varchar(20),  \"priority\"  boolean,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(25),  \"vinvoice\"  varchar(20),  \"attach\"  varchar(20),  \"shipcode\"  varchar(20),  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"startdatet\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key(  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign key ( \"vendqno\" ) references \""+schemaName+"\".\"venquote\" (  \"sid\" ), foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vshipmen\"  (  \"sid\" integer generated by default as identity, \"shipcode\"  varchar(32) not null,  \"matcode\"  int  ,  \"shipper\"  int,  \"pono\"  int  ,  \"cpono\"  int,  \"invoice\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"carrier\"  varchar(20),  \"type\"  varchar(12),  \"shipdatet\"  timestamp,  \"shipdateta\"  timestamp,  \"tareno\"  varchar(20),  \"packno\"  varchar(20),  \"vendor\"  int  ,  \"customer\"  int  ,  \"billtocode\"  int  ,  \"billtosameasshipto\" boolean, \"shiptocode\"  int  ,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"serialno\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"shiptocode\"  )  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign  key  (  \"billtocode\")  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\")  ,  foreign  key  (  \"vendor\"  )  references \""+schemaName+"\".\"vendor\"  (  \"sid\"  ), foreign  key  (  \"pono\"  )  references \""+schemaName+"\".\"vendorders\"  (  \"sid\"  ),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuquote\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"vendor\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"statusfl\"  int,  \"customer\"  int  ,  \"matcode\"  int  ,  \"replicate\"  int  ,  \"cinvoice\"  varchar(20),  \"ordprice\"  numeric(14,2),  \"jobno\"  varchar(20),  \"vpono\"  varchar(20),  \"quoordt\"  varchar(20),  \"statusfldt\"  timestamp,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(12),  \"terms\"  varchar(25),  \"priority\"  boolean,  \"odatet\"  timestamp,  \"shipcode\"  int,  \"activitycode\"  varchar(20),  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"attach\"  varchar(20),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"replicate\")  references \""+schemaName+"\".\"cuquote\"  (  \"sid\"),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuorders\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"customer\"  int  ,  \"matcode\"  int  ,  \"cuquote\" int  , \"cinvoice\"  int,  \"jobno\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"vpono\"  int,  \"rfpord\"  int,  \"rcpono\"  int,  \"odatet\"  timestamp,  \"terms\"  varchar(20),  \"priority\"  boolean,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(25),  \"vinvoice\"  int,  \"attach\"  varchar(90),  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"startdatet\"  timestamp,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  \"shipcodefrompay\"  int,  \"shipcode\"  int, \"barpo\"  varchar(30),  primary  key  (  \"sid\"  ),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"cuquote\"  )  references \""+schemaName+"\".\"cuquote\"  (  \"sid\"  ),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee\"  (  \"sid\") ,  foreign  key  (  \"shipcodefrompay\")  references \""+schemaName+"\".\"address\"  (  \"sid\") , foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"address\"  (  \"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuinvoice\"  (  \"sid\" integer generated by default as identity, \"invoice\"  varchar(32) not null,  \"customer\"  int  ,  \"matcode\"  int  ,  \"invodate\"  timestamp,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"pono\"  int  ,  \"ref1typ\"  varchar(20),  \"ref1code\"  varchar(35),  \"shipdatet\"  timestamp,  \"shiptype\"  varchar(12),  \"shipcode\"  varchar(20),  \"terms\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"termsdat\"  timestamp,  \"discounp\"  numeric(14,2),  \"discoudt\"  timestamp,  \"discouds\"  numeric(14,2),  \"netddat\"  timestamp,  \"netddys\"  numeric(14,2),  \"fob\"  varchar(20),  \"type\"  varchar(12),  \"integrset\"  varchar(20),  \"attach\"  varchar(20),  \"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"agent\"  int  ,  \"notes\"  varchar(60),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  \"barinvoice\"  varchar(30),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"pono\"  )  references \""+schemaName+"\".\"cuorders\"  (  \"sid\"  ),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"shipment\"  (  \"sid\" integer generated by default as identity, \"shipcode\"  varchar(32) not null,  \"matcode\"  int  ,  \"shipper\"  int  ,  \"pono\"  int,  \"cpono\"  int  ,  \"invoice\"  int  ,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"carrier\"  int,  \"type\"  varchar(12),  \"shipdatet\"  timestamp,  \"shipdateta\"  timestamp,  \"tareno\"  varchar(20),  \"packno\"  varchar(20),  \"customer\"  int  ,  \"billtocode\"  int  ,  \"billtosameasshipto\" boolean, \"shiptocode\"  int  ,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"serialno\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barshipcod\"  varchar(30),  primary  key(  \"sid\"  ),  foreign  key  (  \"shipper\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\"), foreign  key  (  \"carrier\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\"),  foreign  key  (  \"billtocode\")  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address\"(  \"sid\"  )  ,  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ),  foreign  key  (  \"invoice\"  )  references \""+schemaName+"\".\"cuinvoice\"  (  \"sid\"  ),  foreign  key  (  \"cpono\"  )  references \""+schemaName+"\".\"cuorders\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"emplorders\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"employee\"  int  ,  \"matcode\"  int  ,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"statusfl\"  int,  \"jobno\"  int,  \"vpono\"  int,  \"rfpord\"  int,  \"statusfldt\"  timestamp,  \"rcpono\"  int,  \"odatet\"  timestamp,  \"terms\"  varchar(20),  \"priority\"  boolean,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(25),  \"vinvoice\"  int,  \"attach\"  varchar(20),  \"shipcode\"  int  ,  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"startdatet\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key(  \"sid\"),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"vshipmen\"  (  \"sid\"),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"editlog\"  (  \"sid\" integer generated by default as identity, \"databasenm\"  varchar(20) not null  ,  \"recordno\"  int,  \"field\"  varchar(20),  \"datet\"  timestamp,  \"username\"  varchar(20),  \"deleted\"  boolean,  \"prevchar\"  varchar(30),  \"prevnum\"  int,  \"prevlog\"  boolean,  \"prevdate\"  timestamp,  \"newchar\"  varchar(30),  \"newnum\"  int,  \"newlog\"  boolean,  \"newdate\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"hlogfile\"  (  \"sid\" integer generated by default as identity, \"serialno\"  varchar(25)  not null ,  \"matcode\"  varchar(20),  \"quanrecd\"  int,  \"vendor\"  varchar(20),  \"location\"  varchar(20),  \"recvrpt\"  varchar(25),  \"inflg\"  boolean,  \"phy\"  boolean,  \"datetin\"  timestamp,  \"datetout\"  timestamp,  \"jobno\"  varchar(20),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"pono\"  varchar(20),  \"scandatet\"  timestamp,  \"quanissd\"  int,  \"butt\"  varchar(25),  \"statusfl\"  int,  \"quanrejd\"  numeric(14,2),  \"customer\"  varchar(25),  \"cpono\"  varchar(20),  \"customej\"  varchar(25),  \"orgcost\"  numeric(14,2),  \"orgpono\"  varchar(20),  \"orgjobno\"  varchar(20),  \"altserno\"  varchar(25),  \"selprice\"  numeric(14,2),  \"physqty\"  numeric(14,2),  \"sperson\"  varchar(25),  \"cartonid\"  varchar(25),  \"cartonpr\"  boolean,  \"packcode\"  varchar(20),  \"tarecode\"  varchar(20),  \"shipcode\"  varchar(20),  \"type\"  varchar(12),  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cpayment\"  (  \"sid\" integer generated by default as identity, \"payment\"  varchar(32) not null,  \"customer\"  int  ,  \"cinvoice\"  int  ,  \"cheqdate\" timestamp, \"paymentduedate\" timestamp, \"postingperiod\" int, \"matcode\"  int,  \"integrset\"  varchar(20),  \"account\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2), \"amountin\" numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"discount\"  numeric(14,2),  \"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"paytype\"  varchar(4),  \"paybyid\"  varchar(20),  \"paybydate\"  timestamp,  \"currency\"  varchar(12),  \"convrate\"  numeric(14,2),  \"locamountt\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  \"cinvoice\")  references \""+schemaName+"\".\"cuinvoice\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ),  foreign  key  ( \"account\")  references \""+schemaName+"\".\"account\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"serialnumbers\"  (  \"sid\" integer generated by default as identity, \"serialno\"  varchar(25) not null  ,  \"matcode\"  varchar(20),  \"quanrecd\"  numeric(14,2),  \"vendor\"  varchar(20),  \"location\"  varchar(20),  \"recvrpt\"  varchar(20),  \"infl\"  boolean,  \"phy\"  boolean,  \"datetin\"  timestamp,  \"datetout\"  timestamp,  \"jobno\"  varchar(20),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"pono\"  varchar(20),  \"scandatet\"  timestamp,  \"quanissd\"  numeric(14,2),  \"butt\"  varchar(20),  \"statusfl\"  int,  \"quanrejd\"  numeric(14,2),  \"customer\"  varchar(20),  \"cpono\"  varchar(20),  \"customej\"  varchar(20),  \"orgcost\"  numeric(14,2),  \"orgpono\"  varchar(20),  \"orgjobno\"  varchar(20),  \"altserno\"  varchar(25),  \"selprice\"  numeric(14,2),  \"physqty\"  numeric(14,2),  \"sperson\"  varchar(20),  \"cartonid\"  varchar(20),  \"cartonpr\"  boolean,  \"packcode\"  varchar(20),  \"tarecode\"  varchar(20),  \"shipcode\"  varchar(20),  \"type\"  varchar(12),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barserial\"  varchar(30), primary  key(\"sid\"))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"machine\"  (  \"sid\" integer generated by default as identity, \"machinecode\"  varchar(32) not null,  \"quantity\"  numeric(14,2),  \"descript\"  varchar(120),  \"dateadded\"  timestamp,  \"source1\"  varchar(35),  \"source2\"  varchar(35),  \"upccode\"  varchar(25),  \"cost\"  numeric(14,2),  \"replcost\"  numeric(14,2),  \"selprice\"  numeric(14,2),  \"spricold\"  numeric(14,2),  \"spricnew\"  numeric(14,2),  \"spriceffdt\"  timestamp,  \"shipcode\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"misccode1\"  varchar(25),  \"misccode2\"  varchar(25),  \"qtylevel1\"  numeric(14,2),  \"unit\"  varchar(12),  \"caseqty\"  numeric(14,2),  \"type\"  varchar(12),  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"aliascode\"  varchar(25),  \"parentcode\"  int  ,  \"avgprice\"  numeric(14,2),  \"avgcost\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"subcodesn\"  varchar(35),  \"subcodesn2\" varchar(35),  \"subcodesn3\" varchar(35),  \"cuordqty\"  numeric(14,2),  \"venorqty\"  numeric(14,2),  \"cupicqty\"  numeric(14,2),  \"venpiqty\"  numeric(14,2),  \"cuinvqty\"  numeric(14,2),  \"cushiqty\"  numeric(14,2),  \"venshqty\"  numeric(14,2),  \"effdate\"  timestamp,  \"integrset\"  varchar(20),  \"notes\"  varchar(60),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barupc\"  varchar(30),  primary  key  (  \"sid\"), foreign  key  (  \"parentcode\")  references \""+schemaName+"\".\"machine\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"groupmembers\"  (  \"sid\" integer generated by default as identity, \"groupid\"  int not null,  \"memberid\"  varchar(32) not null,  \"descript\"  varchar(120), \"sourcetype\" varchar(10),  \"memberem\"  int  ,  \"membercu\"  int  ,  \"memberve\"  int  ,  \"memberit\"  int  ,  \"memberac\"  int  ,  \"memberma\"  int  ,  \"type\"  varchar(10),  \"currpw\"  varchar(32) ,  \"expiry\"  timestamp,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  \"groupid\")  references \""+schemaName+"\".\"membersgroup\" (  \"sid\"),  foreign  key  (  \"memberem\")  references \""+schemaName+"\".\"employee\"  (  \"sid\"),  foreign  key  (  \"membercu\")  references \""+schemaName+"\".\"customer\"  (  \"sid\"),  foreign  key  (  \"memberit\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"memberac\")  references \""+schemaName+"\".\"activity\"  (  \"sid\"),  foreign  key  (  \"memberma\")  references \""+schemaName+"\".\"machine\"  (  \"sid\"),  foreign  key  (  \"memberve\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"jobassignment\"  (  \"sid\" integer generated by default as identity, \"jobassign\" varchar(32) not null, \"machine\"  int ,  \"sequence\"  varchar(12) ,  \"location\"  int  ,  \"sdatet\"  timestamp,  \"durationh\"  int,  \"durationm\"  int,  \"stimeh\"  int,  \"stimem\"  int,  \"stimeampm\"  boolean,  \"edatet\"  timestamp,  \"priority\"  boolean,  \"percntdone\"  numeric(14,2),\"repeatf\"  varchar(20),  \"jobno\"  int  ,  \"matcode\"  int  , \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"pono\"  int,  \"vendor\"  int  ,  \"cpono\"  int,  \"customer\"  int  ,  \"statusfl\"  int, \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"notes\"  varchar(60),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"machine\")  references \""+schemaName+"\".\"machine\"  (  \"sid\"),     foreign  key  (  \"jobno\")  references \""+schemaName+"\".\"itemjob\"  (  \"sid\"),foreign key (\"location\")  references \""+schemaName+"\".\"location\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"nextserialno\"  (  \"sid\" integer generated by default as identity, \"nxtserno\"  varchar(4)  not null ,  \"curserno\"  varchar(4),  \"prevsern\"  varchar(4),  \"is9999\"  boolean,  \"refno\" varchar(14)  , \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rate1f\"  (  \"sid\" integer generated by default as identity, \"usertype\"  varchar(12)  not null ,  \"prodtype\"  varchar(12) not null,  \"stepname\"  varchar(25) not null,  \"step\"  int,  \"value\"  numeric(14,2),  \"effdate\"  timestamp,  \"enddate\"  timestamp,  \"incentive\"  varchar(25),  \"ieffdate\"  timestamp,  \"ienddate\"  timestamp, \"owner\"  varchar(40),  \"owner2\"  varchar(40), \"statusfl\" int, \"statusfldt\"  timestamp, primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"itembom\"  (  \"sid\" integer generated by default as identity, \"bomcode\"  varchar(32) not null,  \"descript\"  varchar(120),  \"quantity\" numeric(14,2),  \"mode\"  boolean,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"itembomdetails\"  (  \"sid\" integer generated by default as identity, \"bomcode\"  int not null,  \"matcode\"  int  not null ,  \"mode\"  boolean,  \"subqty\"  numeric(14,2), \"descript\"  varchar(1200), \"seq\"  varchar(4),  \"notes\"  varchar(60), \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"  ),  foreign  key  (  \"bomcode\")  references \""+schemaName+"\".\"itembom\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"task\"  (  \"sid\" integer generated by default as identity, \"taskid\" varchar(32) not null,  \"descript\"  varchar(120),  \"activitycode\"  int  ,  \"projectteam\"  int  ,  \"resource\" int  , \"mode\"  boolean,  \"eststart\" timestamp, \"calcstart\"  timestamp,  \"actlstart\"  timestamp,  \"estend\"  timestamp,  \"calcend\"  timestamp,  \"actlend\"  timestamp,  \"subqty\"  numeric(14,2),  \"bomcode\"  int,  \"location\"  int,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(\"sid\") ,  foreign  key  (  \"projectteam\")  references \""+schemaName+"\".\"membersgroup\" (  \"sid\"),  foreign  key  (\"resource\")  references \""+schemaName+"\".\"groupmembers\"  (  \"sid\"),  foreign  key  (  \"activitycode\"  )  references \""+schemaName+"\".\"activity\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"jobassignmentdetails\"  (  \"sid\" integer generated by default as identity, \"jobassign\" int not null, \"line\"  int, \"machine\"  int ,  \"sequence\"  varchar(12) ,  \"location\"  int  ,  \"sdatet\"  timestamp,  \"durationh\"  int,  \"durationm\"  int,  \"stimeh\"  int,  \"stimem\"  int,  \"stimeampm\"  boolean,  \"edatet\"  timestamp,  \"priority\"  boolean,  \"percntdone\"  numeric(14,2),\"repeatf\"  varchar(20),  \"jobno\"  int  ,  \"matcode\"  int  , \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"pono\"  int,  \"vendor\"  int  ,  \"cpono\"  int,  \"customer\"  int  ,  \"statusfl\"  int,  \"linetotl\"  numeric(14,2), \"owner\"  varchar(40),  \"owner2\"  varchar(40), \"jafield1\" varchar(60),jafield2 varchar(60), \"jafield3\"  varchar(60), \"jafield4\"  varchar(60), \"notes\" varchar(60), primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"machine\")  references \""+schemaName+"\".\"machine\"  (  \"sid\"),     foreign  key  (  \"jobno\")  references \""+schemaName+"\".\"itemjob\"  (  \"sid\"),foreign key (\"location\")  references \""+schemaName+"\".\"location\"  (  \"sid\"), foreign  key  (  \"jobassign\")  references \""+schemaName+"\".\"jobassignment\"  (  \"sid\"  ) )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"processdetails\"  (  \"sid\" integer generated by default as identity, \"process\" varchar(32) not null, \"cpono\" int , \"matcode\"  int , \"customer\" int,  \"sdatet\"  timestamp,  \"durationh\"  int,  \"durationm\"  int,  \"stimeh\"  int,  \"stimem\"  int,  \"stimeampm\"  boolean,  \"edatet\"  timestamp,  \"priority\"  boolean, \"percntdone\"  numeric(14,2), \"statusfl\"  int, \"statusfldt\"  timestamp,  \"notes\" varchar(60), \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ), foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"), foreign  key  (  \"cpono\")  references \""+schemaName+"\".\"cuorders\"  (  \"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"processattributes\"  (  \"sid\" integer generated by default as identity, \"pdetails\" int not null, \"name\"  varchar(32) , value varchar(32),  \"type\"  varchar(32),  \"range\"  varchar(32),  \"step\"  int,  \"statusfl\"  int, \"statusfldt\"  timestamp,  \"notes\" varchar(60), \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"pdetails\"  )  references \""+schemaName+"\".\"processdetails\"  (  \"sid\"  ))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"project\" (  \"sid\" integer generated by default as identity, \"proj\"  varchar(32) not null,  \"parentcode\"  int  ,  \"descript\"  varchar(120),  \"companycode\" int  , \"divcode\"  int  ,  \"depcode\"  int  ,  \"location\"  int  ,  \"sdatet\"  timestamp,  \"edatet\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(\"sid\"),  foreign  key  (  \"parentcode\"  )  references \""+schemaName+"\".\"project\"  (  \"sid\"), foreign  key  (  \"companycode\"  )  references \""+schemaName+"\".\"company\"  (  \"sid\"  ),  foreign  key  (  \"depcode\" )  references \""+schemaName+"\".\"department\"  (  \"sid\"  ),  foreign  key  (  \"divcode\"  )  references \""+schemaName+"\".\"division\"  (  \"sid\"  ))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"outline\"  (  \"sid\" integer generated by default as identity, \"proj\"  int not null,  \"parentcode\"  int  ,  \"userow\"  numeric(14,2),  \"usecol\"  numeric(14,2),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(\"sid\"),  foreign  key  (  \"parentcode\"  )  references \""+schemaName+"\".\"outline\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"scandate\"  (  \"sid\" integer generated by default as identity, \"sdsatetimeofscan\"  varchar(25) not null  ,  \"datetimeofscan\"  timestamp,  \"lastdate\"  timestamp,  \"bkupdate\"  timestamp, \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vinvoice\"  (  \"sid\" integer generated by default as identity, \"invoice\"  varchar(32) not null,  \"vendor\"  int  ,  \"matcode\"  int  ,  \"integrset\"  varchar(20),  \"invodate\"  timestamp,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"pono\"  int  ,  \"ref1typ\"  varchar(20),  \"ref1code\"  varchar(35),  \"shipdatet\"  timestamp,  \"shiptype\"  varchar(12),  \"shipcode\"  int  ,  \"terms\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"termsdat\"  timestamp,  \"discounp\"  numeric(14,2),  \"discoudt\"  timestamp,  \"discouds\"  numeric(14,2),  \"netddat\"  timestamp,  \"netddys\"  int,  \"fob\"  varchar(20),  \"type\"  varchar(12),  \"attach\"  varchar(20),\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"agent\"  int  ,  \"notes\"  varchar(60),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key(  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"vshipmen\"  (  \"sid\"),  foreign  key  (  \"pono\"  )  references \""+schemaName+"\".\"vendorders\"  (  \"sid\"  ),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vpayment\"  (  \"sid\" integer generated by default as identity, \"payment\"  varchar(32) not null,  \"vendor\"  int  ,  \"vinvoice\"  int  ,  \"cheqdate\" timestamp, \"paymentduedate\" timestamp, \"postingperiod\" int, \"matcode\"  int,  \"integrset\"  varchar(20),  \"account\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"amountin\" numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"discount\"  numeric(14,2),  \"paytype\"  varchar(4),  \"paybyid\"  varchar(20),  \"paybydate\"  timestamp,  \"currency\"  varchar(12),  \"convrate\"  numeric(14,2),  \"locamount\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  \"vinvoice\")  references \""+schemaName+"\".\"vinvoice\"  (  \"sid\"),  foreign  key  (  \"vendor\"  )  references \""+schemaName+"\".\"vendor\"  (  \"sid\")  , foreign  key  ( \"account\")  references \""+schemaName+"\".\"account\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuqdetails\"  (  \"sid\" integer generated by default as identity, \"cuqno\"  int   not null,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodate\"  timestamp,  \"idelvdate\"  timestamp, \"shipoption\" varchar(20) ,  \"vendor\"  int  ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\"),  foreign  key  (  \"cuqno\")  references \""+schemaName+"\".\"cuquote\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuodetails\"  (  \"sid\" integer generated by default as identity, \"cuono\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodate\"  timestamp,  \"idelvdate\"  timestamp,  \"vendor\"  int  ,\"shipoption\" varchar(20) ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2), \"owner2\"  varchar(40),  \"statusfl\"  int,  \"statusfldt\"  timestamp,\"barpo\" varchar(30),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\"),  foreign  key  (  \"cuono\")  references \""+schemaName+"\".\"cuorders\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuidetails\"  (  \"sid\" integer generated by default as identity, \"cuino\"  int   not null,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodatet\"  timestamp,  \"delvdateit\"  timestamp,  \"vendor\"  int  ,  \"qtyostnd\"  numeric(14,2),  \"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\"),  foreign  key  (  \"cuino\")  references \""+schemaName+"\".\"cuinvoice\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cupdetails\"  (  \"sid\" integer generated by default as identity, \"cupno\"  int  not null ,  \"line\"  int,  \"invoice\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordprice\"  numeric(14,2),  \"paytype\"  varchar(12),  \"paybyid\"  varchar(12), \"amountin\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"invoice\")  references \""+schemaName+"\".\"cuinvoice\"  (  \"sid\"),  foreign  key  (  \"cupno\")  references \""+schemaName+"\".\"cpayment\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"activityjobdetails\"  (  \"sid\" integer generated by default as identity, \"jobno\"  int   not null,  \"line\"  int,  \"activitycode\"  int  ,  \"proddatet\"  timestamp,  \"qtyalloc\"  numeric(14,2),  \"pono\"  int,  \"ordprice\"  numeric(14,2),  \"qtyostnd\"  numeric(14,2),  \"qtyalstk\"  numeric(14,2),  \"qtyissud\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"printmstatj\"  int,  \"prinmtfldtj\"  timestamp,  \"type\"  varchar(12),  \"activitycodeout\"  int,  \"qtyout\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"activitycode\")  references \""+schemaName+"\".\"activity\"  (  \"sid\"),  foreign  key  (  \"jobno\")  references \""+schemaName+"\".\"activityjob\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"shipmentdetails\"  (  \"sid\" integer generated by default as identity, \"shipcode\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyshipped\"  numeric(14,2),  \"shippingprice\"  numeric(14,2),  \"shipper\"  int,  \"pono\"  int,  \"cpono\"  int,  \"invoice\"  int,  \"amount\"  numeric(14,2),  \"amountostnd\"  numeric(14,2),  \"qty\"  numeric(14,2),  \"qtyostnd\"  numeric(14,2),  \"carrier\"  int,  \"type\"  varchar(12),  \"shipdatet\"  timestamp,  \"shipdateta\"  timestamp,  \"tareno\"  varchar(20),  \"packno\"  varchar(20),  \"customer\"  int  ,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"serialno\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barshipcod\"  varchar(30),  \"linetotl\"  numeric(14,2),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  ( \"mailtocode\"  )  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\"  )  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"shipment\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendqdetails\"  (  \"sid\" integer generated by default as identity, \"vendqno\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodatet\"  timestamp,\"shipoption\" varchar(20) ,  \"customer\"  int  ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ),  foreign  key  (  \"vendqno\"  )  references \""+schemaName+"\".\"venquote\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendodetails\"  (  \"sid\" integer generated by default as identity, \"vendono\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodatet\"  timestamp,  \"customer\"  int  ,\"shipoption\" varchar(20) ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ),  foreign  key  (  \"vendono\"  )  references \""+schemaName+"\".\"vendorders\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendidetails\"  (  \"sid\" integer generated by default as identity, \"vendino\"  int not null  ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodatet\"  timestamp,  \"customer\"  int  ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ),  foreign  key  (  \"vendino\"  )  references \""+schemaName+"\".\"vinvoice\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendpdetails\"  (  \"sid\" integer generated by default as identity, \"vendpno\"  int  not null ,  \"line\"  int,  \"invoice\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordprice\"  numeric(14,2),  \"paytype\"  varchar(12),  \"paybyid\"  varchar(12), \"amountin\"  numeric(14,2),  \"vendor\"  int  ,  \"vontact\"  int,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"invoice\")  references \""+schemaName+"\".\"vinvoice\"  (  \"sid\"),  foreign  key  (  \"vendor\"  )  references \""+schemaName+"\".\"vendor\"  (  \"sid\"  ),  foreign  key  (  \"vendpno\"  )  references \""+schemaName+"\".\"vpayment\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vshipmendetails\"  (  \"sid\" integer generated by default as identity, \"shipcode\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyshipped\"  numeric(14,2),  \"shippingprice\"  numeric(14,2),  \"shipper\"  int,  \"pono\"  int,  \"cpono\"  int,  \"invoice\"  int,  \"amount\"  numeric(14,2),  \"amountostnd\"  numeric(14,2),  \"qty\"  numeric(14,2),  \"qtyostnd\"  numeric(14,2),  \"carrier\"  int,  \"type\"  varchar(12),  \"shipdatet\"  timestamp,  \"shipdateta\"  timestamp,  \"tareno\"  varchar(20),  \"packno\"  varchar(20),  \"vendor\"  int,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"serialno\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barshipcod\"  varchar(30),  \"linetotl\"  numeric(14,2),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  ( \"mailtocode\"  )  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\"  )  references \""+schemaName+"\".\"address\"(  \"sid\"  ),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"vshipmen\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"wageearneraux\"  (  \"sid\" integer generated by default as identity, \"wageearnerid\"  int not null,  \"line\"  int,  \"sin\"  varchar(12),  \"wcbytdl\"  numeric(14,2),  \"wcbytdn\"  numeric(14,2),  \"insytdl\"  numeric(14,2),  \"insytdn\"  numeric(14,2),  \"vacatonyl\"  numeric(14,2),  \"vacatonyn\"  numeric(14,2),  \"payytdl\"  numeric(14,2),  \"fpensiytl\"  numeric(14,2),  \"ppensiytl\"  numeric(14,2),  \"itaxytdl\"  numeric(14,2),  \"ptaxytdl\"  numeric(14,2),  \"payytdn\"  numeric(14,2),  \"fpensiytn\"  numeric(14,2),  \"ppensiytn\"  numeric(14,2),  \"itaxytdn\"  numeric(14,2),  \"patxytdn\"  numeric(14,2),  \"gpayytdl\"  numeric(14,2),  \"gpayytdn\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  \"wageearnerid\")  references \""+schemaName+"\".\"wageearner\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create table if not exists  \""+schemaName+"\".\"rgenapp\" ( \"sid\" integer generated by default as identity, \"appname\" varchar(40) not null, \"descript\"  varchar(120),  \"apptype\" varchar(20), \"appwaccounting\" boolean, \"appwemail\" boolean, \"appwjmsmq\" boolean, \"appvendor\" varchar(20), \"appversion\" varchar(20), \"appplatform\" varchar(40), \"appmodelpkg\" varchar(40), \"appactionpkg\" varchar(40), \"appskin\" varchar(20), \"appdeploytype\" varchar(20), \"createfidata\" varchar(4096000), \"revengdata\" varchar(4096000), \"initializefidata\" varchar(4096000), \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary key(\"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rgendb\" ( \"sid\" integer generated by default as identity, \"dbname\" varchar(40) not null, \"descript\"  varchar(120),  \"dbtype\" varchar(20), \"dbvendor\" varchar(20), \"dbversion\" varchar(20), \"dbplatform\" varchar(20), \"appcode\"  int  ,  \"sqldriver\" varchar(40), \"sqlurl\" varchar(40), \"sqluser\" varchar(20), \"sqlpassword\" varchar(20), \"sqlclasspath\" varchar(40), \"sqlcreatedbscript\" varchar(20), \"sqldropdbscript\" varchar(20), \"sqlcreatetblsscript\" varchar(20), \"sqlloadtblsscript\" varchar(20), \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary key(\"sid\"), foreign  key  (  \"appcode\"  )  references \""+schemaName+"\".\"rgenapp\"  (  \"sid\"  ) )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rgentable\"  (  \"sid\" integer generated by default as identity, \"tablename\"  varchar(40)  not null ,  \"dbcode\" int  , \"inaddmenu\"  boolean,  \"inlistmenu\"  boolean,  \"intransactionmenu\"  boolean,  \"inreportmenu\"  boolean,  \"ingraphsmenu\"  boolean,  \"inmailingmenu\"  boolean,  \"ingeneratemenu\"  boolean,  \"inadminmenu\"  boolean,  \"inmaintenancemenu\"  boolean,  \"inlabelsmenu\"  boolean,  \"inskipmenu\"  boolean,  \"incustom1menu\"  boolean,  \"menulevel\"  varchar(12),  \"menurole\"  varchar(12),  \"menulabelgroup\"  varchar(20),  \"submenusequence\"  int,  \"usagescope\" varchar(12), \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(  \"sid\"), foreign  key  (  \"dbcode\"  )  references \""+schemaName+"\".\"rgendb\"  (  \"sid\"  ) )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rgenfields\"  (  \"sid\" integer generated by default as identity, \"dbcode\" int   , \"tablename\"  int   ,  \"fieldname\"  varchar(60) not null,  \"fieldtype\" varchar(20), \"fieldlength\" varchar(2), \"ingroup\"  varchar(20),  \"seqwithingroup\"  int,  \"focusseq\"  int,  \"future1\"  varchar(20),  \"initialvalue\"  varchar(12),  \"keyoradditional\"  varchar(12),  \"keyoradditional2\"  varchar(12),  \"keyoradditional3\"  varchar(12),  \"showinmenu\"  varchar(20),  \"showinreport\"  varchar(20),  \"processoption1\"  varchar(20),  \"processoption2\"  varchar(20), \"fdbcode\" varchar(40)  ,  \"ftablename\"  varchar(60)  ,  \"ffieldkeyname1\"  varchar(60),  \"ffieldkeyname2\"  varchar(60),  \"ffieldkeyname3\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"), foreign  key  (  \"tablename\"  )  references \""+schemaName+"\".\"rgentable\"  (  \"sid\"), foreign  key  (  \"dbcode\" )  references \""+schemaName+"\".\"rgendb\"  (  \"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"genoptions\"  (  \"sid\" integer generated by default as identity, \"row\"  varchar(2) not null,  \"genoptions01\"  varchar(159),  \"genpurpose01\"  varchar(159),  \"genvalue01\"  varchar(159),  \"genoptions02\"  varchar(159),  \"genpurpose02\"  varchar(159),  \"genvalue02\"  varchar(159),  \"genoptions03\"  varchar(159),  \"genpurpose03\"  varchar(159),  \"genvalue03\"  varchar(159),  \"genoptions04\"  varchar(159),  \"genpurpose04\"  varchar(159),  \"genvalue04\"  varchar(159),  \"genoptions05\"  varchar(159),  \"genpurpose05\"  varchar(159),  \"genvalue05\"  varchar(159),  \"genoptions06\"  varchar(159),  \"genpurpose06\"  varchar(159),  \"genvalue06\"  varchar(159),  \"genoptions07\"  varchar(159),  \"genpurpose07\"  varchar(159),  \"genvalue07\"  varchar(159),  \"genoptions08\"  varchar(159),  \"genpurpose08\"  varchar(159),  \"genvalue08\"  varchar(159),  \"genoptions09\"  varchar(159),  \"genpurpose09\"  varchar(159),  \"genvalue09\"  varchar(159),  \"genoptions10\"  varchar(159),  \"genpurpose10\"  varchar(159),  \"genvalue10\"  varchar(159),  \"genoptions11\"  varchar(159),  \"genpurpose11\"  varchar(159),  \"genvalue11\"  varchar(159),  \"genoptions12\"  varchar(159),  \"genpurpose12\"  varchar(159),  \"genvalue12\"  varchar(159),  \"genoptions13\"  varchar(159),  \"genpurpose13\"  varchar(159),  \"genvalue13\"  varchar(159),  \"genoptions14\"  varchar(159),  \"genpurpose14\"  varchar(159),  \"genvalue14\"  varchar(159),  \"genoptions15\"  varchar(159),  \"genpurpose15\"  varchar(159),  \"genvalue15\"  varchar(159),  \"genoptions16\"  varchar(159),  \"genpurpose16\"  varchar(159),  \"genvalue16\"  varchar(159),  \"genoptions17\"  varchar(159),  \"genpurpose17\"  varchar(159),  \"genvalue17\"  varchar(159),  \"genoptions18\"  varchar(159),  \"genpurpose18\"  varchar(159),  \"genvalue18\"  varchar(159),  \"genoptions19\"  varchar(159),  \"genpurpose19\"  varchar(159),  \"genvalue19\"  varchar(159),  \"genoptions20\"  varchar(159),  \"genpurpose20\"  varchar(159),  \"genvalue20\"  varchar(159),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"blobdata\"  (  \"sid\" integer generated by default as identity, \"fromtable\"  varchar(35) not null,  \"fromkey\" varchar(35) not null, \"qualifier\"  varchar(32) not null,  \"sequence\"  int,  \"type\" varchar(40), \"data\"  varbinary(1000000),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\" ))";
      if(dbProductName.equals("psql")){
       sqlscript="create  table if not exists  \""+schemaName+"\".\"blobdata\"  (  \"sid\" integer generated by default as identity, \"fromtable\"  varchar(35) not null,  \"fromkey\" varchar(35) not null, \"qualifier\"  varchar(32) not null,  \"sequence\"  int,  \"type\" varchar(40), \"data\"  bytea,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\" ))";
      }
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"clobdata\"  (  \"sid\" integer generated by default as identity, \"fromtable\"  varchar(35) not null,  \"fromkey\" varchar(35) not null, \"qualifier\"  varchar(32) not null,  \"sequence\"  int,  \"type\" varchar(40), \"data\"  varchar(4096000),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"controlusagebyperiods\"  (  \"sid\" integer generated by default as identity, \"ctlusagetrackerid\"  varchar(32)  not null,  \"descript\"  varchar(120), \"controlcode \"  int,  \"currency\"  varchar(3),  \"period0label\" varchar(20), \"period0b\"  numeric(14,2),  \"period0\"  numeric(14,2),  \"periodtotalslabel\" varchar(20), periodtotalsb\"  numeric(14,2),  \"periodtotals\"  numeric(14,2),  \"period1label\" varchar(20), \"period1budget\"  numeric(14,2),  \"period1actual\"  numeric(14,2),  \"period2label\" varchar(20), \"period2b\"  numeric(14,2),  \"period2\"   numeric(14,2),  \"period3label\" varchar(20), \"period3b\"  numeric(14,2),  \"period3\"  numeric(14,2),  \"period4label\" varchar(20), \"period4b\"  numeric(14,2),  \"period4\"  numeric(14,2),  \"period5label\" varchar(20), \"period5b\"  numeric(14,2),  \"period5\"  numeric(14,2),  \"period6label\" varchar(20), \"period6b\"  numeric(14,2),  \"period6\"  numeric(14,2),  \"period7label\" varchar(20), \"period7b\"  numeric(14,2),  \"period7\"  numeric(14,2),  \"period8label\" varchar(20), \"period8b\"  numeric(14,2),  \"period8\"  numeric(14,2),  \"period9label\" varchar(20), \"period9b\"  numeric(14,2),  \"period9\"  numeric(14,2),  \"period10label\" varchar(20), \"period10b\"  numeric(14,2),  \"period10\"  numeric(14,2),  \"period11label\" varchar(20), period11b\"  numeric(14,2),  \"period11\"  numeric(14,2),  \"period12label\" varchar(20), \"period12b\"  numeric(14,2),  \"period12\"  numeric(14,2),  \"periodnlabel\" varchar(20), \"periodnb\"  numeric(14,2),  \"periodn\"  numeric(14,2),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  \"foreign  key  (  controlcode)  references \""+schemaName+"\".\"control\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"resourcedetails\"  (  \"sid\" integer generated by default as identity, \"taskno\"  int,  \"resourcenumber\"  int,  \"projectteam\"  int  ,  \"resource\"  int  not null ,  \"usagepercent\" numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (projectteam)  references \""+schemaName+"\".\"membersgroup\"  (  \"sid\"),  foreign  key  (\"resource\")  references \""+schemaName+"\".\"groupmembers\"  (  \"sid\"),  foreign  key  (  taskno)  references \""+schemaName+"\".\"task\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"emplodetails\"  (  \"sid\" integer generated by default as identity, \"emplono\"  int  not null ,  \"line\"  int not null,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodate\"  timestamp,  \"idelvdate\"  timestamp,  \"vendor\"  int  ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor\"  (  \"sid\"),  foreign  key  (  \"emplono\")  references \""+schemaName+"\".\"emplorders\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"usagebyperiods\"  (  \"sid\" integer generated by default as identity, \"usagetrackerid\"  varchar(32) not null,  \"descript\"  varchar(120),  \"matcode\" int  , \"currency\"  varchar(3),  \"period0label\" varchar(20), \"period0b\"  numeric(14,2),  \"period0\"  numeric(14,2),  \"period0formulae\"  varchar(159),  \"periodtotalslabel\" varchar(20), \"periodtotalsb\"  numeric(14,2),  \"periodtotals\" numeric(14,2),  \"periodtotalsformulae\"  varchar(159),  \"period1label\" varchar(20), \"period1budget\"  numeric(14,2),  \"period1\"  numeric(14,2),  \"period1formulae\"  varchar(159),  \"period2label\" varchar(20), \"period2b\"  numeric(14,2),  \"period2\"   numeric(14,2),  \"period2formulae\"  varchar(159),  \"period3label\" varchar(20), \"period3b\"  numeric(14,2),  \"period3\"  numeric(14,2),  \"period3formulae\"  varchar(159),  \"period4label\" varchar(20), \"period4b\"  numeric(14,2),  \"period4\"  numeric(14,2),  \"period4formulae\"  varchar(159),  \"period5label\" varchar(20), period5b\"  numeric(14,2),  \"period5\"  numeric(14,2),  \"period5formulae\"  varchar(159),  \"period6label\" varchar(20), period6b\"  numeric(14,2),  \"period6\"  numeric(14,2),  \"period6formulae\"  varchar(159),  \"period7label\" varchar(20), \"period7b\"  numeric(14,2),  \"period7\"  numeric(14,2),  \"period7formulae\"  varchar(159),  \"period8label\" varchar(20), period8b\"  numeric(14,2),  \"period8\"  numeric(14,2),  \"period8formulae\"  varchar(159),  \"period9label\" varchar(20), \"period9b\"  numeric(14,2),  \"period9\"  numeric(14,2),  \"period9formulae\"  varchar(159),  \"period10label\" varchar(20), \"period10b\"  numeric(14,2),  \"period10\"  numeric(14,2),  \"period10formulae\"  varchar(159),  \"period11label\" varchar(20), \"period11b\"  numeric(14,2),  \"period11\"  numeric(14,2),  \"period11formulae\"  varchar(159),  \"period12label\" varchar(20), \"period12b\"  numeric(14,2),  \"period12\"  numeric(14,2),  \"period12formulae\"  varchar(159),  \"periodnlabel\" varchar(20), \"periodnb\"  numeric(14,2),  \"periodn\"  numeric(14,2),  \"periodnformulae\"  varchar(159),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"groupcode\"  int  ,  primary  key  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"), foreign  key  (  groupcode)  references \""+schemaName+"\".\"rollupgroup\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"truefalse\" (  \"sid\" integer generated by default as identity, \"tablename\"  varchar(50) ,  \"qualifier\" varchar(32)), \"show001\" boolean, \"show002\" boolean, \"show003\" boolean, \"show004\" boolean, \"show005\" boolean, \"show006\" boolean, \"show007\" boolean, \"show008\" boolean, \"show009\" boolean, \"show010\" boolean, \"show011\" boolean, \"show012\" boolean, \"show013\" boolean, \"show014\" boolean, \"show015\" boolean, \"show016\" boolean, \"show017\" boolean, \"show018\" boolean, \"show019\" boolean, \"show020\" boolean, \"show021\" boolean, \"show022\" boolean, \"show023\" boolean, \"show024\" boolean, \"show025\" boolean, \"show026\" boolean, \"show027\" boolean, \"show028\" boolean, \"show029\" boolean, \"show030\" boolean, \"show031\" boolean, \"show032\" boolean, \"show033\" boolean, \"show034\" boolean, \"show035\" boolean, \"show036\" boolean, \"show037\" boolean, \"show038\" boolean, \"show039\" boolean, \"show040\" boolean, \"show041\" boolean, \"show042\" boolean, \"show043\" boolean, \"show044\" boolean, \"show045\" boolean, \"show046\" boolean, \"show047\" boolean, \"show048\" boolean, \"show049\" boolean, \"show050\" boolean, \"show051\" boolean, \"show052\" boolean, \"show053\" boolean, \"show054\" boolean, \"show055\" boolean, \"show056\" boolean, \"show057\" boolean, \"show058\" boolean, \"show059\" boolean, \"show060\" boolean, \"show061\" boolean, \"show062\" boolean, \"show063\" boolean, \"show064\" boolean, \"show065\" boolean, \"show066\" boolean, \"show067\" boolean, \"show068\" boolean, \"show069\" boolean, \"show070\" boolean, \"show071\" boolean, \"show072\" boolean, \"show073\" boolean, \"show074\" boolean, \"show075\" boolean, \"show076\" boolean, \"show077\" boolean, \"show078\" boolean, \"show079\" boolean, \"show080\" boolean, \"show081\" boolean, \"show082\" boolean, \"show083\" boolean, \"show084 boolean ), \"show085\" boolean, \"show086\" boolean, \"show087\" boolean, \"show088\" boolean, \"show089\" boolean, \"show090\" boolean, \"show091\" boolean, \"show092\" boolean, \"show093\" boolean, \"show094\" boolean, \"show095\" boolean, \"show096\" boolean, \"show097\" boolean, \"show098\" boolean, \"show099\" boolean, \"show100\" boolean, \"show101\" boolean, \"show102\" boolean, \"show103\" boolean, \"show104\" boolean, \"show105\" boolean, \"show106\" boolean, \"show107\" boolean, \"show108\" boolean, \"show109\" boolean, \"show110\" boolean, \"show111\" boolean, \"show112\" boolean, \"show113\" boolean, \"show114\" boolean, \"show115\" boolean, \"show116\" boolean, \"show117\" boolean, \"show118\" boolean, \"show119\" boolean, \"show120\" boolean, \"show121\" boolean, \"show122\" boolean, \"show123\" boolean, \"show124\" boolean, \"show125\" boolean, \"show126\" boolean, \"show127\" boolean, \"show128\" boolean, \"show129\" boolean, \"show130\" boolean, \"show131\" boolean, \"show132\" boolean, \"show133\" boolean, \"show134\" boolean, \"show135\" boolean, \"show136\" boolean, \"show137\" boolean, \"show138\" boolean, \"show139\" boolean,\"show140\" boolean,\"show141\" boolean,\"show142\" boolean,\"show143\" boolean,\"show144\" boolean,\"show145\" boolean,\"show146\" boolean,\"show147\" boolean,\"show148\" boolean,\"show149\" boolean,\"show150\" boolean,\"show151\" boolean,\"show152\" boolean,\"show153\" boolean,\"show154\" boolean,\"show155\" boolean,\"show156\" boolean,\"show157\" boolean,\"show158\" boolean,\"show159\" boolean,\"show160\" boolean,\"show161\" boolean,\"show162\" boolean,\"show163\" boolean,\"show164\" boolean,\"show165\" boolean,\"show166\" boolean,\"show167\" boolean,\"show168\" boolean,\"show169\" boolean,\"show170\" boolean,\"show171\" boolean,\"show172\" boolean,\"show173\" boolean,\"show174\" boolean,\"show175\" boolean,\"show176\" boolean,\"show177\" boolean,\"show178\" boolean,\"show179\" boolean,\"show180\" boolean,\"show181\" boolean,\"show182\" boolean,\"show183\" boolean,\"show184\" boolean,\"show185\" boolean,\"show186\" boolean,\"show187\" boolean,\"show188\" boolean,\"show189\" boolean,\"show190\" boolean,\"show191\" boolean,\"show192\" boolean,\"show193\" boolean,\"show194\" boolean,\"show195\" boolean,\"show196\" boolean,\"show197\" boolean,\"show198\" boolean,\"show199\" boolean, \"show200\" boolean, \"show201\" boolean, \"show202\" boolean, \"show203\" boolean, \"show204\" boolean, \"show205\" boolean, \"show206\" boolean, \"show207\" boolean, \"show208\" boolean, \"show209\" boolean, \"show210\" boolean, \"statusfl\"  int), \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"seat\" (  \"sid\" integer generated by default as identity, \"location\"  int  not null , \"row\"  varchar(4) not null, \"rowlabel\"  varchar(50), \"seat001status\" varchar(1), \"name001\" varchar(50), \"ticket001\" varchar(50), \"po001\" varchar(32), \"seat002status\" varchar(1), \"name002\" varchar(50), \"ticket002\" varchar(50), \"po002\" varchar(32), \"seat003status\" varchar(1), \"name003\" varchar(50), \"ticket003\" varchar(50), \"po003\" varchar(32), \"seat004status\" varchar(1), \"name004\" varchar(50), \"ticket004\" varchar(50), \"po004\" varchar(32), \"seat005status\" varchar(1), \"name005\" varchar(50), \"ticket005\" varchar(50), \"po005\" varchar(32), \"seat006status\" varchar(1), \"name006\" varchar(50), \"ticket006\" varchar(50), \"po006\" varchar(32), \"seat007status\" varchar(1), \"name007\" varchar(50), \"ticket007\" varchar(50), \"po007\" varchar(32), \"seat008status\" varchar(1), \"name008\" varchar(50), \"ticket008\" varchar(50), \"po008\" varchar(32), \"seat009status\" varchar(1), \"name009\" varchar(50), \"ticket009\" varchar(50), \"po009\" varchar(32), \"seat010status\" varchar(1), \"name010\" varchar(50), \"ticket010\" varchar(50), \"po010\" varchar(32), \"seat011status\" varchar(1), \"name011\" varchar(50), \"ticket011\" varchar(50), \"po011\" varchar(32), \"seat012status\" varchar(1), \"name012\" varchar(50), \"ticket012\" varchar(50), \"po012\" varchar(32), \"seat013status\" varchar(1), \"name013\" varchar(50), \"ticket013\" varchar(50), \"po013\" varchar(32), \"seat014status\" varchar(1), \"name014\" varchar(50), \"ticket014\" varchar(50), \"po014\" varchar(32), \"seat015status\" varchar(1), \"name015\" varchar(50), \"ticket015\" varchar(50), \"po015\" varchar(32), \"seat016status\" varchar(1), \"name016\" varchar(50), \"ticket016\" varchar(50), \"po016\" varchar(32), \"seat017status\" varchar(1), \"name017\" varchar(50), \"ticket017\" varchar(50), \"po017\" varchar(32), \"seat018status\" varchar(1), \"name018\" varchar(50), \"ticket018\" varchar(50), \"po018\" varchar(32), \"seat019status\" varchar(1), \"name019\" varchar(50), \"ticket019\" varchar(50), \"po019\" varchar(32), \"seat020status\" varchar(1), \"name020\" varchar(50), \"ticket020\" varchar(50), \"po020\" varchar(32), \"seat021status\" varchar(1), \"name021\" varchar(50), \"ticket021\" varchar(50), \"po021\" varchar(32), \"seat022status\" varchar(1), \"name022\" varchar(50), \"ticket022\" varchar(50), \"po022\" varchar(32), \"seat023status\" varchar(1), \"name023\" varchar(50), \"ticket023\" varchar(50), \"po023\" varchar(32), \"seat024status\" varchar(1), \"name024\" varchar(50), \"ticket024\" varchar(50), \"po024\" varchar(32), \"seat025status\" varchar(1), \"name025\" varchar(50), \"ticket025\" varchar(50), \"po025\" varchar(32), \"seat026status\" varchar(1), \"name026\" varchar(50), \"ticket026\" varchar(50), \"po026\" varchar(32), \"seat027status\" varchar(1), \"name027\" varchar(50), \"ticket027\" varchar(50), \"po027\" varchar(32), \"seat028status\" varchar(1), \"name028\" varchar(50), \"ticket028\" varchar(50), \"po028\" varchar(32), \"seat029status\" varchar(1), \"name029\" varchar(50), \"ticket029\" varchar(50), \"po029\" varchar(32), \"seat030status\" varchar(1), \"name030\" varchar(50), \"ticket030\" varchar(50), \"po030\" varchar(32), \"seat031status\" varchar(1), \"name031\" varchar(50), \"ticket031\" varchar(50), \"po031\" varchar(32), \"seat032status\" varchar(1), \"name032\" varchar(50), \"ticket032\" varchar(50), \"po032\" varchar(32), \"seat033status\" varchar(1), \"name033\" varchar(50), \"ticket033\" varchar(50), \"po033\" varchar(32), \"seat034status\" varchar(1), \"name034\" varchar(50), \"ticket034\" varchar(50), \"po034\" varchar(32), \"seat035status\" varchar(1), \"name035\" varchar(50), \"ticket035\" varchar(50), \"po035\" varchar(32), \"seat036status\" varchar(1), \"name036\" varchar(50), \"ticket036\" varchar(50), \"po036\" varchar(32), \"seat037status\" varchar(1), \"name037\" varchar(50), \"ticket037\" varchar(50), \"po037\" varchar(32), \"seat038status\" varchar(1), \"name038\" varchar(50), \"ticket038\" varchar(50), \"po038\" varchar(32), \"seat039status\" varchar(1), \"name039\" varchar(50), \"ticket039\" varchar(50), \"po039\" varchar(32), \"seat040status\" varchar(1), \"name040\" varchar(50), \"ticket040\" varchar(50), \"po040\" varchar(32),  \"seat041status\" varchar(1), \"name041\" varchar(50), \"ticket041\" varchar(50), \"po041\" varchar(32), \"seat042status\" varchar(1), \"name042\" varchar(50), \"ticket042\" varchar(50), \"po042\" varchar(32), \"seat043status\" varchar(1), \"name043\" varchar(50), \"ticket043\" varchar(50), \"po043\" varchar(32), \"seat044status\" varchar(1), \"name044\" varchar(50), \"ticket044\" varchar(50), \"po044\" varchar(32), \"seat045status\" varchar(1), \"name045\" varchar(50), \"ticket045\" varchar(50), \"po045\" varchar(32), \"seat046status\" varchar(1), \"name046\" varchar(50), \"ticket046\" varchar(50), \"po046\" varchar(32), \"seat047status\" varchar(1), \"name047\" varchar(50), \"ticket047\" varchar(50), \"po047\" varchar(32), \"seat048status\" varchar(1), \"name048\" varchar(50), \"ticket048\" varchar(50), \"po048\" varchar(32), \"seat049status\" varchar(1), \"name049\" varchar(50), \"ticket049\" varchar(50), \"po049\" varchar(32), \"seat050status\" varchar(1), \"name050\" varchar(50), \"ticket050\" varchar(50), \"po050\" varchar(32), \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"), \"foreign  key  (  \"location\")  references \""+schemaName+"\".\"location\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
//sep09 2019 used as holding table to map csv to pojo columns, no need to backup this table, so no _b or _c
      sqlscript="create  table if not exists  \""+schemaName+"\".\"importcsv\"  (  \"sid\" integer generated by default as identity, \"tablenm varchar(60), \"row\"  varchar(2) not null,  \"column01\"  varchar(159),  \"column02\"  varchar(159),  \"column03\"  varchar(159),  \"column04\"  varchar(159),  \"column05\"  varchar(159),  \"column06\"  varchar(159),  \"column07\"  varchar(159),  \"column08\"  varchar(159),  \"column09\"  varchar(159),  \"column10\"  varchar(159),  \"column11\"  varchar(159),  \"column12\"  varchar(159),  \"column13\"  varchar(159),  \"column14\"  varchar(159),  \"column15\"  varchar(159),  \"column16\"  varchar(159),  \"column17\"  varchar(159),  \"column18\"  varchar(159),  \"column19\"  varchar(159),  \"column20\"  varchar(159),  \"column21\"  varchar(159),  \"column22\"  varchar(159),  \"column23\"  varchar(159),  \"column24\"  varchar(159),  \"column25\"  varchar(159),  \"column26\"  varchar(159),  \"column27\"  varchar(159),  \"column28\"  varchar(159),  \"column29\"  varchar(159),  \"column30\"  varchar(159),  \"column31\"  varchar(159),  \"column32\"  varchar(159),  \"column33\"  varchar(159),  \"column34\"  varchar(159),  \"column35\"  varchar(159),  \"column36\"  varchar(159),  \"column37\"  varchar(159),  \"column38\"  varchar(159),  \"column39\"  varchar(159),  \"column40\"  varchar(159),  \"column41\"  varchar(159),  \"column42\"  varchar(159),  \"column43\"  varchar(159),  \"column44\"  varchar(159),  \"column45\"  varchar(159),  \"column46\"  varchar(159),  \"column47\"  varchar(159),  \"column48\"  varchar(159),  \"column49\"  varchar(159),  \"column50\"  varchar(159),  \"column51\"  varchar(159),  \"column52\"  varchar(159),  \"column53\"  varchar(159),  \"column54\"  varchar(159),  \"column55\"  varchar(159),  \"column56\"  varchar(159),  \"column57\"  varchar(159),  \"column58\"  varchar(159),  \"column59\"  varchar(159),  \"column60\"  varchar(159),  \"column61\"  varchar(159),  \"column62\"  varchar(159),  \"column63\"  varchar(159),  \"column64\"  varchar(159),  \"column65\"  varchar(159),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\"), unique (tablenm,row,owner2)  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();

      sqlscript="create  table if not exists  \""+schemaName+"\".\"itemprofl\"  (  \"sid\" integer generated by default as identity, \"itemid\"  int, \"row\" varchar(20), length varchar(255), width varchar(255),  \"height\"  varchar(30),  \"weightunit\"  varchar(30),  \"shipmode\"  varchar(30),  \"colour\"  varchar(30),  \"material\"  boolean,  \"madein\"  boolean,  \"sku\"  boolean,  \"saleschannel\"  varchar(5),  \"compareprice\"  varchar(5),  \"customscode\"  varchar(5),  \"pagetitle\"  varchar(5),  \"metadescription\"  varchar(5),  \"urlhandle\"  varchar(5),  \"rating\"  varchar(30),  \"points\"  varchar(30),  \"pointsunit\"  varchar(30),  \"dtstyle\"  varchar(30),  \"ftstyle\"  varchar(20),  \"defaultr\"  varchar(3),  \"defaultc\"  varchar(3),  \"dbname\"  varchar(20),  \"rootdir\"  varchar(35),  \"keyorder\"  varchar(3),  \"margin\"  numeric(14,2),  \"footer\"  numeric(14,2),  \"listbuildc\"  boolean,  \"listbuildv\"  boolean,  \"listbuilde\"  boolean,  \"listbrownc\"  int,  \"listbrownv\"  int,  \"listbrowne\"  int,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\"), foreign key(itemid) references  \""+schemaName+"\".\"item\"(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();

      //facesmessages.instance().add("create_tables_done");
      //null means global message, for a specific button etc use componentid which is tied to jsf id
      //facescontext.getcurrentinstance().addmessage(null,new facesmessage(
                                     //facesmessage.severity_info,bundle.getString("create")+" "+bundle.getString("tables")+" "+bundle.getString("done"),""));
        log.info("create tables for "+schemaName+ " done");

	 return "create tables done";
      }catch (Exception e) {
       log.severe("create tables Exception for "+schemaName+", error "+e.getMessage());
       return null;
      }

     }
     public String  createTablesMsql(String schemaName) {
      //mysql uses NOT NULL AUTO_INCREMENT instead of IDENTITY, \"longblob instead of image or bytea
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }
      //so cannot use common createTables method, copy createTables()but change

        log.info("create mysql tables for schema "+schemaName+ " done");
	 return "create tables done";
	 }

     public String  createTablesMsql_b(String schemaName) {
      //mysql uses NOT NULL AUTO_INCREMENT instead of IDENTITY, \"longblob instead of image or bytea
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }
      //so cannot use common createTables method, copy createTables()but change

        log.info("create mysql tables for schema "+schemaName+ " done");
	 return "create tables done";
	 }

     public String  createTablesMsql_c(String schemaName) {
      //mysql uses NOT NULL AUTO_INCREMENT instead of IDENTITY, \"longblob instead of image or bytea
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }
      //so cannot use common createTables method, copy createTables()but change

        log.info("create mysql tables for schema "+schemaName+ " done");
	 return "create tables done";
	 }

     public String  createTables_b(String dbProductName,String schemaName) {
      if(dbProductName == null || dbProductName.isEmpty()){
       dbProductName="hsql";
      }
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }
     // warning- sqlscript may have multiple creates under one quote mark. do not put line feeds in the middle to look nicer
     //aug18 2021 made separate scripts because hsqldb did not support it.
     if(dbProductName.equals("msql")){
      createTablesMsql_b(schemaName);// uses auto-create for identify
      return null;
     }
      try{
      String sqlscript ="";
      sqlscript="create  table if not exists  \""+schemaName+"\".\"address_b\"  (  \"sid\" integer generated by default as identity, \"addrescode\"  varchar(32) not null,  \"addrl1\"  varchar(159),  \"addrl2\"  varchar(159),  \"addrl3\"  varchar(159),  \"city\"  varchar(20),  \"provnstate\"  varchar(20),  \"country\"  varchar(20),  \"pzcode\"  varchar(20),  \"descript\"  varchar(120),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp, primary  key(\"sid\")  ) ";
      Query q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"options_b\"  (  \"sid\" integer generated by default as identity, \"row\"  varchar(2) not null,  \"options01\"  varchar(159),  \"purpose01\"  varchar(159),  \"value01\"  varchar(159),  \"options02\"  varchar(159),  \"purpose02\"  varchar(159),  \"value02\"  varchar(159),  \"options03\"  varchar(159),  \"purpose03\"  varchar(159),  \"value03\"  varchar(159),  \"options04\"  varchar(159),  \"purpose04\"  varchar(159),  \"value04\"  varchar(159),  \"options05\"  varchar(159),  \"purpose05\"  varchar(159),  \"value05\"  varchar(159),  \"options06\"  varchar(159),  \"purpose06\"  varchar(159),  \"value06\"  varchar(159),  \"options07\"  varchar(159),  \"purpose07\"  varchar(159),  \"value07\"  varchar(159),  \"options08\"  varchar(159),  \"purpose08\"  varchar(159),  \"value08\"  varchar(159),  \"options09\"  varchar(159),  \"purpose09\"  varchar(159),  \"value09\"  varchar(159),  \"options10\"  varchar(159),  \"purpose10\"  varchar(159),  \"value10\"  varchar(159),  \"options11\"  varchar(159),  \"purpose11\"  varchar(159),  \"value11\"  varchar(159),  \"options12\"  varchar(159),  \"purpose12\"  varchar(159),  \"value12\"  varchar(159),  \"options13\"  varchar(159),  \"purpose13\"  varchar(159),  \"value13\"  varchar(159),  \"options14\"  varchar(159),  \"purpose14\"  varchar(159),  \"value14\"  varchar(159),  \"options15\"  varchar(159),  \"purpose15\"  varchar(159),  \"value15\"  varchar(159),  \"options16\"  varchar(159),  \"purpose16\"  varchar(159),  \"value16\"  varchar(159),  \"options17\"  varchar(159),  \"purpose17\"  varchar(159),  \"value17\"  varchar(159),  \"options18\"  varchar(159),  \"purpose18\"  varchar(159),  \"value18\"  varchar(159),  \"options19\"  varchar(159),  \"purpose19\"  varchar(159),  \"value19\"  varchar(159),  \"options20\"  varchar(159),  \"purpose20\"  varchar(159),  \"value20\"  varchar(159),  \"options21\"  varchar(159),  \"purpose21\"  varchar(159),  \"value21\"  varchar(159),  \"options22\"  varchar(159),  \"purpose22\"  varchar(159),  \"value22\"  varchar(159),  \"options23\"  varchar(159),  \"purpose23\"  varchar(159),  \"value23\"  varchar(159),  \"options24\"  varchar(159),  \"purpose24\"  varchar(159),  \"value24\"  varchar(159),  \"options25\"  varchar(159),  \"purpose25\"  varchar(159),  \"value25\"  varchar(159),  \"options26\"  varchar(159),  \"purpose26\"  varchar(159),  \"value26\"  varchar(159),  \"options27\"  varchar(159),  \"purpose27\"  varchar(159),  \"value27\"  varchar(159),  \"options28\"  varchar(159),  \"purpose28\"  varchar(159),  \"value28\"  varchar(159),  \"options29\"  varchar(159),  \"purpose29\"  varchar(159),  \"value29\"  varchar(159),  \"options30\"  varchar(159),  \"purpose30\"  varchar(159),  \"value30\"  varchar(159),  \"options31\"  varchar(159),  \"purpose31\"  varchar(159),  \"value31\"  varchar(159),  \"options32\"  varchar(159),  \"purpose32\"  varchar(159),  \"value32\"  varchar(159),  \"options33\"  varchar(159),  \"purpose33\"  varchar(159),  \"value33\"  varchar(159),  \"options34\"  varchar(159),  \"purpose34\"  varchar(159),  \"value34\"  varchar(159),  \"options35\"  varchar(159),  \"purpose35\"  varchar(159),  \"value35\"  varchar(159),  \"options36\"  varchar(159),  \"purpose36\"  varchar(159),  \"value36\"  varchar(159),  \"options37\"  varchar(159),  \"purpose37\"  varchar(159),  \"value37\"  varchar(159),  \"options38\"  varchar(159),  \"purpose38\"  varchar(159),  \"value38\"  varchar(159),  \"options39\"  varchar(159),  \"purpose39\"  varchar(159),  \"value39\"  varchar(159),  \"options40\"  varchar(159),  \"purpose40\"  varchar(159),  \"value40\"  varchar(159),  \"options41\"  varchar(159),  \"purpose41\"  varchar(159),  \"value41\"  varchar(159),  \"options42\"  varchar(159),  \"purpose42\"  varchar(159),  \"value42\"  varchar(159),  \"options43\"  varchar(159),  \"purpose43\"  varchar(159),  \"value43\"  varchar(159),  \"options44\"  varchar(159),  \"purpose44\"  varchar(159),  \"value44\"  varchar(159),  \"options45\"  varchar(159),  \"purpose45\"  varchar(159),  \"value45\"  varchar(159),  \"options46\"  varchar(159),  \"purpose46\"  varchar(159),  \"value46\"  varchar(159),  \"options47\"  varchar(159),  \"purpose47\"  varchar(159),  \"value47\"  varchar(159),  \"options48\"  varchar(159),  \"purpose48\"  varchar(159),  \"value48\"  varchar(159),  \"options49\"  varchar(159),  \"purpose49\"  varchar(159),  \"value49\"  varchar(159),  \"options50\"  varchar(159),  \"purpose50\"  varchar(159),  \"value50\"  varchar(159),  \"options51\"  varchar(159),  \"purpose51\"  varchar(159),  \"value51\"  varchar(159),  \"options52\"  varchar(159),  \"purpose52\"  varchar(159),  \"value52\"  varchar(159),  \"options53\"  varchar(159),  \"purpose53\"  varchar(159),  \"value53\"  varchar(159),  \"options54\"  varchar(159),  \"purpose54\"  varchar(159),  \"value54\"  varchar(159),  \"options55\"  varchar(159),  \"purpose55\"  varchar(159),  \"value55\"  varchar(159),  \"options56\"  varchar(159),  \"purpose56\"  varchar(159),  \"value56\"  varchar(159),  \"options57\"  varchar(159),  \"purpose57\"  varchar(159),  \"value57\"  varchar(159),  \"options58\"  varchar(159),  \"purpose58\"  varchar(159),  \"value58\"  varchar(159),  \"options59\"  varchar(159),  \"purpose59\"  varchar(159),  \"value59\"  varchar(159),  \"options60\"  varchar(159),  \"purpose60\"  varchar(159),  \"value60\"  varchar(159),  \"options61\"  varchar(159),  \"purpose61\"  varchar(159),  \"value61\"  varchar(159),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\"), unique (\"row\",\"owner2\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"client_b\"  (  \"sid\" integer generated by default as identity, \"clientversion\"  varchar(5) not null,  \"serialnum\"  varchar(15),  \"enterprisecompanyna\"  varchar(35),  \"descript\"  varchar(120),  \"addrl1\"  varchar(35),  \"addrl2\"  varchar(35),  \"addrl3\"  varchar(35),  \"city\"  varchar(20),  \"provnstate\"  varchar(20),  \"countryname\"  varchar(20),  \"pzcode\"  varchar(20),  \"phoneo\"  varchar(30),  \"phoneh\"  varchar(25),  \"phonec\"  varchar(25),  \"phonex\"  varchar(30),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(60),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"enterprisecompcode\"  varchar(40),  \"enterprisecompsize\"  varchar(15),  \"barcsize\"  varchar(12),  \"level\"  boolean,  \"poskipp\"  varchar(10),  \"looseit\"  boolean,  \"jobskip\"  varchar(10),  \"cartonfl\"  boolean,  \"picklist\"  boolean,  \"proddesc\"  varchar(15),  \"prodcode\"  varchar(12),  \"njob\"  varchar(15),  \"nmateria\"  varchar(15),  \"nactivity\"  varchar(15),  \"nbutt\"  varchar(15),  \"ncustome\"  varchar(15),  \"ncontact\"  varchar(15),  \"nvendor\"  varchar(15),  \"nemployee\"  varchar(15),  \"nschedule\"  varchar(15),  \"nreject\"  varchar(15),  \"nreturn\"  varchar(15),  \"ncode\"  varchar(15),  \"manufid\"  varchar(20),  \"bartype\"  varchar(4),  \"cadtype\"  varchar(4),  \"cartype\"  varchar(4),  \"shitype\"  varchar(4),  \"reptype\"  varchar(4),  \"loctype\"  varchar(4),  \"barcol\"  boolean,  \"carcol\"  boolean,  \"cadcol\"  boolean,  \"shicol\"  boolean,  \"repcol\"  boolean,  \"loccol\"  boolean,  \"altseria\"  boolean,  \"countrycode\"  varchar(3),  \"naltseri\"  varchar(12),  \"scrcolor\"  varchar(255),  \"hilcolor\"  varchar(255),  \"textcolor\"  varchar(255),  \"baccolor\"  varchar(255),  \"datetype\"  varchar(7), \"currcode\"  varchar(3),  \"prinbar\"  boolean,  \"barprint\"  varchar(4),  \"carprint\"  varchar(4),  \"cadprint\"  varchar(4),  \"locprint\"  varchar(4),  \"shiprint\"  varchar(4),  \"repprint\"  varchar(4),  \"barprty\"  varchar(4),  \"repprty\"  varchar(4),  \"carprty\"  varchar(4),  \"cadprty\"  varchar(4),  \"shiprty\"  varchar(4),  \"locprty\"  varchar(4),  \"altselen\"  int,  \"custolen\"  int,  \"carcsize\"  varchar(12),  \"cadcsize\"  varchar(12),  \"shicsize\"  varchar(12),  \"repcsize\"  varchar(255),  \"loccsize\"  varchar(12),  \"cs\"  varchar(15),  \"nconftyp\"  varchar(12),  \"nlocatio\"  varchar(12),  \"ndivcode\"  varchar(12),  \"ndepcode\"  varchar(12),  \"naddcode\"  varchar(12),  \"nfloor\"  varchar(12),  \"nroom\"  varchar(12),  \"nrack\"  varchar(12),  \"menutype\"  varchar(3),  \"padtype\"  varchar(4),  \"nrate1ta\"  varchar(12),  \"nrate2ta\"  varchar(12),  \"defconft\" varchar(8)  ,  \"beepsou\"  boolean,  \"confirm\"  boolean,  \"linefeed\"  boolean,  \"refbaradj\"  int,  \"shibaradj\"  int,  \"cusbaradj\"  int,  \"locbaradj\"  int,  \"carbaradj\"  int,  \"ncorder\"  varchar(12),  \"nsperson\"  varchar(12),  \"prompti\"  boolean,  \"customerquotenb\"  varchar(15),  \"customerquoten\"  int,  \"customerquotena\"  varchar(15),  \"customerordernb\"  varchar(15),  \"customerordern\"  int,  \"customerorderna\"  varchar(15),  \"vendorordernb\"  varchar(15),  \"vendorordern\"  int,  \"vendororderna\"  varchar(15),\"jobnb\"  varchar(15),  \"jobn\"  int,  \"jobna\"  varchar(15),  \"customerinvoicenb\"  varchar(15),  \"customerinvoicen\"  int,  \"customerinvoicena\"  varchar(15),  \"vendorinvoicenb\"  varchar(15),  \"vendorinvoicen\"  int,  \"vendorinvoicena\"  varchar(15),  \"customerpicknb\"  varchar(15),  \"customerpickn\"  int,  \"customerpickna\"  varchar(15),  \"vendorquotenb\"  varchar(15),  \"vendorquoten\"  int,  \"vendorquotena\"  varchar(15),  \"customerpaymntnb\"  varchar(15),  \"customerpaymntn\"  int,  \"customerpaymntna\"  varchar(15),  \"vendorpaymntnb\"  varchar(15),  \"vendorpaymntn\"  int,  \"vendorpaymntna\"  varchar(15),  \"vendorchqnb\"  varchar(15),  \"vendorchqn\"  int,  \"vendorchqna\"  varchar(15),  \"tasknb\"  varchar(15),  \"taskn\"  int,  \"taskna\"  varchar(15),  \"arseqb\"  varchar(15),  \"arseq\"  int,  \"arseqa\"  varchar(15),  \"apseqb\"  varchar(15),  \"apseq\"  int,  \"apseqa\"  varchar(15),  \"glseqb\"  varchar(15),  \"glseq\"  int,  \"glseqa\"  varchar(15),  \"paseqb\"  varchar(15),  \"paseq\"  int,  \"paseqa\"  varchar(15),  \"icseqb\"  varchar(15),  \"icseq\"  int,  \"icseqa\"  varchar(15),  \"joseqb\"  varchar(15),  \"joseq\"  int,  \"joseqa\"  varchar(15),  \"sglentry\"  varchar(15),  \"tax1code\"  varchar(25),  \"tax2code\"  varchar(25),  \"tax3code\"  varchar(25),  \"ndecimal\"  int,  \"edipassw\"  varchar(10),  \"intpassw\"  varchar(10),  \"inrpassw\"  varchar(10),  \"imlpassw\"  varchar(10),  \"rmlpassw\"  varchar(10),  \"lmlpassw\"  varchar(10),  \"hospassw\"  varchar(10),  \"lanpassw\"  varchar(10),  \"wanpassw\"  varchar(10),  \"ashostid\"  varchar(35),  \"hdstyle\"  varchar(30),  \"mtstyle\"  varchar(30),  \"ststyle\"  varchar(30),  \"dtstyle\"  varchar(30),  \"ftstyle\"  varchar(30),  \"defaultr\"  varchar(15),  \"defaultc\"  varchar(3),  \"dbname\"  varchar(35),  \"rootdir\"  varchar(60),  \"keyorder\"  varchar(3),  \"currbusdat\"  timestamp,  \"lastbusdat\"  timestamp,  \"currcaldat\"  timestamp,  \"lastcaldat\"  timestamp,  \"preprocess\"  boolean,  \"margin\"  int,  \"footer\"  int,  \"lastuser\"  varchar(10),  \"listbuildc\"  boolean,  \"listbuildv\"  boolean,  \"listbuilde\"  boolean,  \"listbrownc\"  int,  \"listbrownv\"  int,  \"listbrowne\"  int,  \"smtpserver\"  varchar(30),  \"smtpuser\"  varchar(35),  \"smtppass\"  varchar(20),  \"pop3server\"  varchar(30),  \"pop3user\"  varchar(35),  \"pop3pass\"  varchar(20),  \"smatcode\"  varchar(15),  \"fyrend\"  timestamp,  \"fperiods\"  int,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  \"employeeordernb\"  varchar(15),  \"employeeordern\"  int,  \"employeeorderna\"  varchar(15),  \"licensetype\"  varchar(15),\"licensestart\"  timestamp,\"licenseend\"  timestamp, \"apiclientid\"  varchar(255),\"apiclientsecret\"  varchar(12000),  \"currsymb\"  varchar(4),  primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"department_b\"  (  \"sid\" integer generated by default as identity, \"depcode\"  varchar(32) not null,  \"descript\"  varchar(120),  \"glprefix\" varchar(20),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"company_b\"  (  \"sid\" integer generated by default as identity, \"companycode\"  varchar(32) not null,  \"descript\"  varchar(120),  \"legalname\"  varchar(60),  \"mailtocode\" int , \"glprefix\" varchar(20),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(\"sid\"),  foreign  key  ( \"mailtocode\"  )  references \""+schemaName+"\".\"address_b\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"control_b\"  (  \"sid\" integer generated by default as identity, \"controlcode\"  varchar(32) not null,  \"descript\"  varchar(120),  \"typeofcontrol\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"division_b\"  (  \"sid\" integer generated by default as identity, \"divcode\"  varchar(32) not null, \"descript\"  varchar(120),  \"glprefix\" varchar(20),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"location_b\"  (  \"sid\" integer generated by default as identity, \"location\"  varchar(32) not null,  \"descript\"  varchar(120),  \"companycode\"  int  , \"addresscode\"  int  ,  \"floor\"  varchar(25),  \"room\"  varchar(25),  \"rack\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"exclude\"  boolean,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"companycode\"  )  references \""+schemaName+"\".\"company_b\"  (  \"sid\"  ),  foreign  key  (  \"addresscode\"  )  references \""+schemaName+"\".\"address_b\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"residency_b\"  (  \"sid\" integer generated by default as identity, \"residency\"  varchar(32) not null,  \"descript\"  varchar(120),  \"municipality\"  varchar(20),  \"province\"  varchar(20),  \"countryname\"  varchar(20),  \"exclude\"  boolean,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"account_b\"  (  \"sid\" integer generated by default as identity, \"account\"  varchar(20) not null  ,  \"descript\"  varchar(120),  \"category\"  varchar(20),  \"type\"  varchar(12),  \"budget\"  numeric(14,2),  \"actual\"  numeric(14,2),  \"actualn\"  numeric(14,2),  \"prevbudg\"  numeric(14,2),  \"prevact\"  numeric(14,2),  \"sequence\"  int,  \"child\"  varchar(20),  \"parent\"  varchar(20),  \"rollupq\"  int,  \"companycode\"  int  ,  \"depcode\"  int  ,  \"divcode\"  int  ,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"currency\"  varchar(3),  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"p0\"  numeric(14,2),  \"p1\"  numeric(14,2),  \"p2\"  numeric(14,2),  \"p3\"  numeric(14,2),  \"p4\"  numeric(14,2),  \"p5\"  numeric(14,2),  \"p6\"  numeric(14,2),  \"p7\"  numeric(14,2),  \"p8\"  numeric(14,2),  \"p9\"  numeric(14,2),  \"p10\"  numeric(14,2),  \"p11\"  numeric(14,2),  \"p12\"  numeric(14,2),  \"p13\"  numeric(14,2),  \"p14\"  numeric(14,2),  \"p8t\"  numeric(14,2),  \"p9t\"  numeric(14,2),  \"p10t\"  numeric(14,2),  \"p11t\"  numeric(14,2),  primary  key  (  \"sid\"  ),  foreign  key  (  \"companycode\"  )  references \""+schemaName+"\".\"company_b\"  (  \"sid\"  ),  foreign  key  (  \"depcode\"  )  references \""+schemaName+"\".\"department_b\"  (  \"sid\"  ),  foreign  key  (  \"divcode\"  )  references \""+schemaName+"\".\"division_b\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"customer_b\"  (  \"sid\" integer generated by default as identity, \"customer\"  varchar(32) not null,  \"descript\"  varchar(120),  \"title\"  varchar(12),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"customerascompanyname\"  varchar(25),  \"custtotl\"  numeric(14,2),  \"custtqty\"  numeric(14,2), \"companycode\" int,  \"location\"  int  ,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"custtax1\"  varchar(25),  \"custtax2\"  varchar(25),  \"custtax3\"  varchar(25),  \"phoneo\"  varchar(20),  \"phoneh\"  varchar(16),  \"phonec\"  varchar(16),  \"phonex\"  varchar(20),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"dob\" timestamp, \"placeofbirth\" varchar(60), \"sex\" varchar(1), \"age\" int, \"cusrtotl\"  numeric(14,2),  \"cusrtqty\"  numeric(14,2),  \"cusmtotl\"  numeric(14,2),  \"cusdtotl\"  numeric(14,2),  \"lastorder\"  varchar(20),  \"lastinvoic\"  varchar(20),  \"lastpaymnq\"  numeric(14,2),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"shiplabel\"  boolean,  \"type\"  varchar(10),  \"defaultglac\"  int,  \"integrset\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"totlpaid\"  numeric(14,2),  \"contacted\"  timestamp,  \"bywho\"  varchar(20),  \"nxtcontact\"  timestamp,  \"via\"  varchar(11),  \"keywords\"  varchar(30),  \"notes\"  varchar(159),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"  ),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign  key  (  \"companycode\")  references \""+schemaName+"\".\"company_b(  \"sid\"  ),  foreign  key  (  \"location\"  )  references \""+schemaName+"\".\"location_b\"  (  \"sid\" ),  foreign  key  (  \"defaultglac\"  )  references \""+schemaName+"\".\"account_b\"  (  \"sid\" ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address_b\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendor_b\"  (  \"sid\" integer generated by default as identity, \"vendor\"  varchar(32) not null,  \"descript\"  varchar(60),  \"title\"  varchar(20),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"vendorascompanyname\"  varchar(25),  \"vendtotl\"  numeric(14,2),  \"vendtqty\"  numeric(14,2), \"companycode\" int  ,  \"location\"  int  ,  \"mailtocode\"  int  ,  \"phoneo\"  varchar(30),  \"phoneh\"  varchar(25),  \"phonec\"  varchar(25),  \"phonex\"  varchar(30),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"venrtotl\"  numeric(14,2),  \"venrtqty\"  numeric(14,2),  \"venmtotl\"  numeric(14,2),  \"venddtotl\"  numeric(14,2),  \"lastquote\"  varchar(20),  \"lastorder\"  varchar(20),  \"lastinvoic\"  varchar(20),  \"lastpaymq\"  numeric(14,2),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"shiplabel\"  boolean,  \"type\"  varchar(10),  \"shiptocode\"  int  ,  \"defaultglac\"  int,  \"integrset\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"totlpaid\"  numeric(14,2),  \"contacted\"  timestamp,  \"bywho\"  varchar(20),  \"keywords\"  varchar(30),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign  key  (  \"companycode\")  references \""+schemaName+"\".\"company_b(  \"sid\"  ),  foreign  key  (  \"location\"  )  references \""+schemaName+"\".\"location_b\"  (  \"sid\" ),  foreign  key  (  \"defaultglac\"  )  references \""+schemaName+"\".\"account_b\"  (  \"sid\" ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address_b\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"employee_b\"  (  \"sid\" integer generated by default as identity, \"employee\"  varchar(32) not null,  \"descript\"  varchar(120),  \"title\"  varchar(20),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"companycode\"  int  ,  \"empltotl\"  numeric(14,2),  \"empltqty\"  numeric(14,2),  \"divcode\"  int  ,  \"depcode\"  int  ,  \"location\"  int  ,  \"residency\"  int  ,  \"mailtocode\"  int  ,  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"custtax1\"  varchar(25),  \"custtax2\"  varchar(25),  \"custtax3\"  varchar(25),  \"phoneo\"  varchar(30),  \"phoneh\"  varchar(25),  \"phonec\"  varchar(25),  \"phonex\"  varchar(30),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"emprtotl\"  numeric(14,2),  \"emprtqty\"  numeric(14,2),  \"empmtotl\"  numeric(14,2),  \"empdtotl\"  numeric(14,2),  \"lastquote\"  varchar(20),  \"lastorder\"  varchar(20),  \"lastinvoic\"  varchar(20),  \"lastpaymq\"  numeric(14,2),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"shiplabel\"  boolean,  \"shiptocode\"  int  ,  \"type\"  varchar(12),  \"defaultglac\"  int,  \"integrset\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"contacted\"  timestamp,  \"bywho\"  varchar(20),  \"keywords\"  varchar(30),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  (  \"depcode\"  )  references \""+schemaName+"\".\"department_b\"  (  \"sid\"  ),  foreign  key  (  \"divcode\"  )  references \""+schemaName+"\".\"division_b\"  (  \"sid\"  ),  foreign  key  (  \"companycode\"  )  references \""+schemaName+"\".\"company_b\"  (  \"sid\"  ),  foreign  key  ( \"mailtocode\"  )  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign  key  (  \"location\"  )  references \""+schemaName+"\".\"location_b\"  (  \"sid\"  ),  foreign  key  (  \"defaultglac\"  )  references \""+schemaName+"\".\"account_b\"  (  \"sid\" ),  foreign  key  (  \"residency\")  references \""+schemaName+"\".\"residency_b\"  (  \"sid\"  ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address_b\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vcontact_b\"  (  \"sid\" integer generated by default as identity, \"contact\"  varchar(20)  not null ,  \"vendor\"  int,  \"title\"  varchar(20),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"phoneo\"  varchar(25),  \"phoneh\"  varchar(25),  \"phonec\"  varchar(25),  \"phonex\"  varchar(20),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"location\"  int,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"printsta\"  int,  \"shiplabel\"  boolean,  \"type\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"keywords\"  varchar(30),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign  key  (  \"location\")  references \""+schemaName+"\".\"location_b(  \"sid\"  ),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"ccontact_b\"  (  \"sid\" integer generated by default as identity, \"contact\"  varchar(32) not null,  \"customer\"  int,  \"title\"  varchar(20),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"custtax1\"  varchar(25),  \"custtax2\"  varchar(25),  \"custtax3\"  varchar(25),  \"phoneo\"  varchar(16),  \"phoneh\"  varchar(16),  \"phonec\"  varchar(16),  \"phonex\"  varchar(20),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"location\"  int,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"shiplabel\"  boolean,  \"type\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"keywords\"  varchar(30),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address_b\"(  \"sid\"  )  ,  foreign  key  (  \"location\")  references \""+schemaName+"\".\"location_b(  \"sid\"  )  ,  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"perioddates_b\"  (  \"sid\" integer generated by default as identity, \"period\"  varchar(2) not null,  \"descript\"  varchar(120),  \"startdate\"  timestamp,  \"enddate\"  timestamp,  \"startofweek\" int, \"startofbweek\" int, \"endofbweek\" int,\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"acperiod_b\"  (  \"sid\" integer generated by default as identity, \"rowid\" varchar(2) not null, \"currperiod\"  varchar(2),  \"descript\"  varchar(120),  \"currbusdate\"  timestamp,  \"currcaldate\"  timestamp,  \"currlocaldate\"  timestamp,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary key(\"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"wageearner_b\"  (  \"sid\" integer generated by default as identity, \"wageearnerid\"  varchar(32) not null,  \"employee\"  int  ,  \"sin\"  varchar(20),  \"birthdt\"  timestamp,  \"fedclaim\"  numeric(14,2),  \"provclaim\"  numeric(14,2),  \"payyrfreq\"  int,  \"payperiod\"  int,  \"wcb\"  boolean,  \"wcbytd\"  numeric(14,2),  \"emplinsur\"  boolean,  \"insytd\"  numeric(14,2),  \"vacretain\"  boolean,  \"vacatonyt\"  numeric(14,2),  \"wageunit\"  varchar(20),  \"wagerate\"  numeric(14,2),  \"otimeunit\"  varchar(20),  \"otimerate\"  numeric(14,2),  \"wageunits\"  numeric(14,2),  \"otimunits\"  numeric(14,2),  \"wageout\"  numeric(14,2),  \"ovtimeout\"  numeric(14,2),  \"salaryout\"  numeric(14,2),  \"commission\"  numeric(14,2),  \"benefits\"  numeric(14,2),  \"vacation\"  numeric(14,2),  \"vacpayout\"  numeric(14,2),  \"advance\"  numeric(14,2),  \"pension\"  numeric(14,2),  \"aftertax\"  boolean,  \"uniondues\"  numeric(14,2),  \"medical\"  numeric(14,2),  \"fincometx\"  numeric(14,2),  \"pincometx\"  numeric(14,2),  \"thispaya\"  numeric(14,2),  \"lastpaya\"  numeric(14,2),  \"payytd\"  numeric(14,2),  \"fpensiytd\"  numeric(14,2),  \"ppensiytd\"  numeric(14,2),  \"itaxytd\"  numeric(14,2),  \"ptaxytd\"  numeric(14,2),  \"grpayytd\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"arthatbl_b\"  (  \"sid\" integer generated by default as identity, \"usage\"  varchar(32) not null,  \"wcbpercnt\"  numeric(14,2),  \"insfactor\"  numeric(14,2),  \"vacatonrate\"  numeric(14,2),  \"pensionmax\"  numeric(14,2),  \"wcbmax\"  numeric(14,2),  \"insmax\"  numeric(14,2),  \"itaxlv0rate\"  numeric(14,2),  \"itaxlv1rate\"  numeric(14,2),  \"itaxlv2rate\"  numeric(14,2),  \"itaxlv3rate\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rollupgroup_b\"  (  \"sid\" integer generated by default as identity, \"groupid\"  varchar(32) not null,  \"descript\"  varchar(120),  \"type\"  varchar(10),  \"currpw\"  varchar(20),  \"expiry\"  timestamp,  \"currency\"  varchar(3),  \"period0b\"  numeric(14,2),  \"period0\"  numeric(14,2),  \"periodtotalsb\"  numeric(14,2),  \"periodtotals\" numeric(14,2),  \"period1budget\"  numeric(14,2),  \"period1actual\"  numeric(14,2),  \"period2b\"  numeric(14,2),  \"period2\"   numeric(14,2),  \"period3b\"  numeric(14,2),  \"period3\"  numeric(14,2),  \"period4b\"  numeric(14,2),  \"period4\"  numeric(14,2),  \"period5b\"  numeric(14,2),  \"period5\"  numeric(14,2),  \"period6b\"  numeric(14,2),  \"period6\"  numeric(14,2),  \"period7b\"  numeric(14,2),  \"period7\"  numeric(14,2),  \"period8b\"  numeric(14,2),  \"period8\"  numeric(14,2),  \"period9b\"  numeric(14,2),  \"period9\"  numeric(14,2),  \"period10b\"  numeric(14,2),  \"period10\"  numeric(14,2),  \"period11b\"  numeric(14,2),  \"period11\"  numeric(14,2),  \"period12b\"  numeric(14,2),  \"period12\"  numeric(14,2),  \"periodnb\"  numeric(14,2),  \"periodn\"  numeric(14,2),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"membersgroup_b\"  (  \"sid\" integer generated by default as identity, \"groupid\"  varchar(32) not null,  \"descript\"  varchar(120),  \"quantity\" numeric(14,2),  \"mode\"  boolean,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"arthahist_b\"  (  \"sid\" integer generated by default as identity, \"wageearner\"  varchar(32) not null,  \"sin\"  varchar(12),  \"period\"  int,  \"month\"  int,  \"ccyy\"  int,  \"vacation\"  numeric(14,2),  \"wage\"  numeric(14,2),  \"overtime\"  numeric(14,2),  \"salary\"  numeric(14,2),  \"commission\"  numeric(14,2),  \"benefit\"  numeric(14,2),  \"fincometx\"  numeric(14,2),  \"pincometx\"  numeric(14,2),  \"wcbout\"  numeric(14,2),  \"emplinsur\"  numeric(14,2),  \"vacpayout\"  numeric(14,2),  \"advance\"  numeric(14,2),  \"fpensobtx\"  numeric(14,2),  \"fpensoatx\"  numeric(14,2),  \"uniondues\"  numeric(14,2),  \"medical\"  numeric(14,2),  \"payamt\"  numeric(14,2),  \"notes\"  varchar(60),  \"notes2\"  varchar(120),  \"chqnumber\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"glentries_b\"  (  \"sid\" integer generated by default as identity, \"glentryno\"  varchar(32) not null,  \"descript\"  varchar(120),  \"refcode\"  varchar(20),  \"period\"  int,  \"postdate\"  timestamp,  \"calendardt\"  timestamp,  \"depcode\"  int,  \"divcode\"  int,  \"account\"  int,  \"tdebitamt\"  numeric(14,2),  \"tcreditamt\"  numeric(14,2),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  , foreign  key  ( \"period\")  references \""+schemaName+"\".\"perioddates_b (  \"sid\"),  foreign  key  ( \"account\")  references \""+schemaName+"\".\"account_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"gentriesdetails_b\"  (  \"sid\" integer generated by default as identity, \"glentrysidno\"  int  not null ,  \"line\"  int,  \"depcode\"  int,  \"divcode\"  int,  \"account\"  int,  \"debitamt\"  numeric(14,2),  \"creditamt\"  numeric(14,2),  \"linetotl\"  numeric(14,2), \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(  \"sid\"), foreign  key  (  \"glentrysidno\")  references \""+schemaName+"\".\"glentries_b\"  (  \"sid\") ,  foreign  key  ( \"account\")  references \""+schemaName+"\".\"account_b\"  (  \"sid\")   )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"holiday_b\"  (  \"sid\" integer generated by default as identity, \"sholiday\"  varchar(32) not null,  \"holiday\"  timestamp,  \"descript\"  varchar(120),  \"type\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"employee\"  int  ,  \"residency\"  int  ,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  \"residency\")  references \""+schemaName+"\".\"residency_b\"  (  \"sid\"  ),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"journal_b\"  (  \"sid\" integer generated by default as identity, \"spostdate\"  varchar(25) not null,  \"postdate\"  timestamp,  \"calendardt\"  timestamp,  \"jrnltype\"  varchar(12),  \"jnlseqb\"  varchar(15),  \"jnlseq\"  int,  \"jnlseqs\"  varchar(15),  \"period\"  int,  \"account\"  varchar(20),  \"debit\"  numeric(14,2),  \"credit\"  numeric(14,2),  \"xreference\"  varchar(20),  \"descript\"  varchar(120),  \"statusfl\"  int,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cjournal_b\"  (  \"sid\" integer generated by default as identity, \"spostdate\"  varchar(25) not null,  \"postdate\"  timestamp,  \"calendardt\"  timestamp,  \"jrnltype\"  varchar(12),  \"jnlseqb\"  varchar(15),  \"jnlseq\"  int,  \"jnlseqs\"  varchar(15),  \"period\"  int,  \"control\"  varchar(20),  \"debit\"  numeric(14,2),  \"credit\"  numeric(14,2),  \"xreference\"  varchar(20),  \"descript\"  varchar(120),  \"statusfl\"  int,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"jjournal_b\"  (  \"sid\" integer generated by default as identity, \"spostdate\"  varchar(25) not null,  \"postdate\"  timestamp,  \"calendardt\"  timestamp,  \"jrnltype\"  varchar(12),  \"jnlseqb\"  varchar(15),  \"jnlseq\"  int,  \"jnlseqs\"  varchar(15),  \"period\"  int,  \"job\"  varchar(20),  \"debit\"  numeric(14,2),  \"credit\"  numeric(14,2),  \"xreference\"  varchar(20),  \"descript\"  varchar(120),  \"statusfl\"  int,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"item_b\"  (  \"sid\" integer generated by default as identity, \"matcode\"  varchar(32) not null,  \"quantity\"  numeric(14,2),  \"descript\"  varchar(120),  \"dateadded\"  timestamp,  \"source1\"  varchar(35),  \"source2\"  varchar(35),  \"upccode\"  varchar(25),  \"cost\"  numeric(14,2),  \"replcost\"  numeric(14,2),  \"selprice\"  numeric(14,2),  \"spricold\"  numeric(14,2),  \"spricnew\"  numeric(14,2),  \"spriceffdt\"  timestamp,  \"shipcode\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"misccode1\"  varchar(25),  \"misccode2\"  varchar(25),  \"qtylevel1\"  numeric(14,2),  \"unit\"  varchar(12),  \"caseqty\"  numeric(14,2),  \"type\"  varchar(12),  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"aliascode\"  varchar(25),  \"parentcode\"  int  ,  \"avgprice\"  numeric(14,2),  \"avgcost\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"subcodesn\"  varchar(35),  \"subcodesn2\" varchar(35),  \"subcodesn3\" varchar(35),  \"cuordqty\"  numeric(14,2),  \"venorqty\"  numeric(14,2),  \"cupicqty\"  numeric(14,2),  \"venpiqty\"  numeric(14,2),  \"cuinvqty\"  numeric(14,2),  \"cushiqty\"  numeric(14,2),  \"venshqty\"  numeric(14,2),  \"effdate\"  timestamp,  \"integrset\"  varchar(20),  \"notes\"  varchar(4096000),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"location\"  int  ,  \"barupc\"  varchar(30),  \"dateexpiry\"  timestamp,  \"datetorenew\"  timestamp,  primary  key  (  \"sid\"), foreign  key  (  \"parentcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\")  , foreign  key  (  \"location\"  )  references \""+schemaName+"\".\"location_b\"  (  \"sid\" ) )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"activity_b\"  (  \"sid\" integer generated by default as identity, \"activitycode\"  varchar(32) not null,  \"quantity\"  numeric(14,2),  \"descript\"  varchar(120),  \"date\"  timestamp,  \"source1\"  varchar(35),  \"source2\"  varchar(35),  \"upccode\"  varchar(25),  \"cost\"  numeric(14,2),  \"replcost\"  numeric(14,2),  \"selprice\"  numeric(14,2),  \"spricold\"  numeric(14,2),  \"spricnew\"  numeric(14,2),  \"spriceffdt\"  timestamp,  \"shipcode\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"misccode1\"  varchar(25),  \"misccode2\"  varchar(25),  \"qtylevel1\"  numeric(14,2),  \"unit\"  varchar(12),  \"caseqty\"  numeric(14,2),  \"type\"  varchar(12),  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"aliascode\"  varchar(25),  \"parentcode\"  int  ,  \"avgprice\"  numeric(14,2),  \"avgcost\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"subcodesn\"  varchar(35),  \"subcodesn2\" varchar(35),  \"subcodesn3\" varchar(35),  \"cuordqty\"  numeric(14,2),  \"venorqty\"  numeric(14,2),  \"cupicqty\"  numeric(14,2),  \"venpiqty\"  numeric(14,2),  \"cuinvqty\"  numeric(14,2),  \"cushiqty\"  numeric(14,2),  \"venshqty\"  numeric(14,2),  \"effdate\"  timestamp,  \"integrset\"  varchar(20),  \"notes\"  varchar(60),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barupc\"  varchar(30),  primary  key  (  \"sid\"), foreign  key  (  \"parentcode\")  references \""+schemaName+"\".\"activity_b\"  (  \"sid\")   )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"schedule_b\"  (  \"sid\" integer generated by default as identity, \"todo\"  varchar(35) not null,  \"descript\"  varchar(120),  \"employee\"  int  ,  \"ssdatet\"  varchar(30),  \"activitycode\"  int  ,  \"location\"  int  ,  \"sdatet\"  timestamp,  \"durationh\"  int,  \"durationm\"  int,  \"stimeh\"  int,  \"stimem\"  int,  \"stimeampm\"  boolean,  \"edatet\"  timestamp,  \"priority\"  boolean,  \"percntdone\"  numeric(14,2),  \"vendor\"  int  ,  \"vontact\"  int  ,  \"customer\"  int ,  \"type\"  varchar(20),  \"mailtocode\"  int  ,  \"otheremplo\"  int,  \"repeatf\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"privateind\"  boolean,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90), \"mgroup\" int ,  primary  key  (  \"sid\" ),  foreign  key  (  \"activitycode\")  references \""+schemaName+"\".\"activity_b\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  ),  foreign  key  (  \"mgroup\"  )  references \""+schemaName+"\".\"membersgroup_b\"  (  \"sid\"  ),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\"),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign key (\"location\")  references \""+schemaName+"\".\"location_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();

      sqlscript="create  table if not exists  \""+schemaName+"\".\"scheduledetails_b\"  (  \"sid\" integer generated by default as identity, \"schedulesidno\"  int  not null ,  \"line\"  int,  \"employee\"  int,  \"vendor\"  int,  \"customer\"  int,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(  \"sid\"), foreign  key  (  \"schedulesidno\")  references \""+schemaName+"\".\"schedule_b\"  (  \"sid\") ,  foreign  key  ( \"employee\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\")   ,  foreign  key  ( \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\")   ,  foreign  key  ( \"customer\")  references \""+schemaName+"\".\"customer_b\"  (  \"sid\")   )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"user_b\"  (  \"sid\" integer generated by default as identity, \"id\"  varchar(60) not null,  \"client\"  int  ,  \"employee\"  int  ,  \"vendor\"  int  ,  \"customer\"  int  ,  \"otherid\"  varchar(60),  \"alevel\"  varchar(12),  \"blevel\"  varchar(12),  \"currpw\"  varchar(40) not null,  \"expiry\"  timestamp,  \"oldpw\"  varchar(40),  \"temporarypassword\"  boolean,  \"passwordhash\"  varbinary(1000000),  \"activationkey\" varchar(60),  \"restrict1\"  varchar(20),  \"restrict2\"  varchar(20),  \"restrict3\"  varchar(20),  \"allow1\"  varchar(20),  \"allow2\"  varchar(20),  \"allow3\"  varchar(20),  \"maxproflrow\" varchar(20), cproflrow varchar(20),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"ucurrcalda\"  timestamp,  \"preprocess\"  boolean,  \"notes\"  varchar(60),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),\"signature\" varchar(1200),  primary  key  (  \"sid\"),  foreign  key  (  \"client\"  )  references \""+schemaName+"\".\"client_b\"  (  \"sid\"  ),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  ),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\")  )";
      if(dbProductName.equals("psql")){
       sqlscript="create  table if not exists  \""+schemaName+"\".\"user_b\"  (  \"sid\" integer generated by default as identity, \"id\"  varchar(60) not null,  \"client\"  int  ,  \"employee\"  int  ,  \"vendor\"  int  ,  \"customer\"  int  ,  \"otherid\"  varchar(60),  \"alevel\"  varchar(12),  \"blevel\"  varchar(12),  \"currpw\"  varchar(40) not null,  \"expiry\"  timestamp,  \"oldpw\"  varchar(40),  \"temporarypassword\"  boolean,  \"passwordhash\"  bytea,  \"activationkey\" varchar(60),  \"restrict1\"  varchar(20),  \"restrict2\"  varchar(20),  \"restrict3\"  varchar(20),  \"allow1\"  varchar(20),  \"allow2\"  varchar(20),  \"allow3\"  varchar(20),  \"maxproflrow\" varchar(20), cproflrow varchar(20),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"ucurrcalda\"  timestamp,  \"preprocess\"  boolean,  \"notes\"  varchar(60),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),\"signature\" varchar(1200),  primary  key  (  \"sid\"),  foreign  key  (  \"client\"  )  references \""+schemaName+"\".\"client_b\"  (  \"sid\"  ),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  ),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\")  )";
      }
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"userprofl_b\"  (  \"sid\" integer generated by default as identity, \"logonid\"  int, \"row\" varchar(20),\"option\" varchar(255), \"selectvalue\" varchar(255),  \"scrcolor\"  varchar(30),  \"hilcolor\"  varchar(30),  \"textcolor\"  varchar(30),  \"baccolor\"  varchar(30),  \"beepsou\"  boolean,  \"confirm\"  boolean,  \"prompti\"  boolean,  \"p1\"  varchar(5),  \"p2\"  varchar(5),  \"p3\"  varchar(5),  \"p4\"  varchar(5),  \"p5\"  varchar(5),  \"p6\"  varchar(5),  \"mtstyle\"  varchar(30),  \"ststyle\"  varchar(30),  \"dtstyle\"  varchar(30),  \"ftstyle\"  varchar(30),  \"defaultr\"  varchar(20),  \"defaultc\"  varchar(3),  \"dbname\"  varchar(20),  \"rootdir\"  varchar(35),  \"keyorder\"  varchar(3),  \"margin\"  numeric(14,2),  \"footer\"  numeric(14,2),  \"listbuildc\"  boolean,  \"listbuildv\"  boolean,  \"listbuilde\"  boolean,  \"listbrownc\"  int,  \"listbrownv\"  int,  \"listbrowne\"  int,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\"), foreign key(\"logonid\") references  \""+schemaName+"\".\"user_b\"(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"venartha_b\"  (  \"sid\" integer generated by default as identity, \"chqnumber\"  varchar(32) not null,  \"reconciled\"  varchar(12),  \"vendorc\"  int  ,  \"date\"  timestamp,  \"addrescode\"  int,  \"chqamt\"  numeric(14,2),  \"amtverbos\"  varchar(120),  \"notes\"  varchar(60),  \"advisel1\"  varchar(60),  \"advisel2\"  varchar(60),  \"advisel3\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key (\"sid\" ) ,  foreign  key  (  \"vendorc\"  )  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\" )  )" ;
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"acintegr_b\"  (  \"sid\" integer generated by default as identity, \"moduleid\"  varchar(12)  ,  \"usagedescr\"  varchar(35),  \"usagecode\"  varchar(3)  ,  \"setsid\"  varchar(20)  ,  \"account\"  int  ,  \"extraintfield\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  ( \"account\")  references \""+schemaName+"\".\"account_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"itemjob_b\"  (  \"sid\" integer generated by default as identity, \"jobno\"  varchar(32) not null,  \"matcode\"  int  ,  \"proddatet\"  timestamp,  \"qtyalloc\"  numeric(14,2),  \"pono\"  varchar(20),  \"qtyostnd\"  numeric(14,2),  \"qtyalstk\"  numeric(14,2),  \"qtyissud\"  numeric(14,2),  \"jobtotl\"  numeric(14,2),  \"statusfl\"  int,  \"customej\"  int  ,  \"vendor\"  int,  \"statusfldt\"  timestamp,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"printmstatj\"  int,  \"prinmtfldtj\"  timestamp,  \"type\"  varchar(12),  \"matcodeout\"  varchar(20),  \"qtyout\"  numeric(14,2),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"customej\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"activityjob_b\"  (  \"sid\" integer generated by default as identity, \"jobno\"  varchar(32) not null,  \"activitycode\"  int  ,  \"proddatet\"  timestamp,  \"qtyalloc\"  numeric(14,2),  \"pono\"  int,  \"qtyostnd\"  numeric(14,2),  \"qtyalstk\"  numeric(14,2),  \"qtyissud\"  numeric(14,2),  \"jobtotl\"  numeric(14,2),  \"statusfl\"  int,  \"customej\"  int  ,  \"vendor\"  int,  \"statusfldt\"  timestamp,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"printmstatj\"  int,  \"prinmtfldtj\"  timestamp,  \"type\"  varchar(12),  \"matcodeout\"  varchar(20),  \"qtyout\"  numeric(14,2),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  (  \"activitycode\")  references \""+schemaName+"\".\"activity_b\"  (  \"sid\"),  foreign  key  (  \"customej\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"venquote_b\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"vendor\"  int  ,  \"matcode\"  int  ,  \"replicate\"  int  ,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"statusfl\"  int,  \"cinvoice\"  varchar(20),  \"jobno\"  varchar(20),  \"vpono\"  varchar(20),  \"rfpord\"  varchar(20),  \"statusfldt\"  timestamp,  \"rcpono\"  varchar(20),  \"odatet\"  timestamp,  \"terms\"  varchar(20),  \"priority\"  boolean,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(25),  \"vinvoice\"  varchar(20),  \"attach\"  varchar(20),  \"shipcode\"  varchar(20),  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"startdatet\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"  ),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"replicate\")  references \""+schemaName+"\".\"venquote_b\"  (  \"sid\"),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendorders_b\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"vendor\"  int  ,  \"matcode\"  int  ,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"statusfl\"  int,  \"jobno\"  varchar(20),  \"vendqno\"  int  ,  \"rfpord\"  varchar(20),  \"statusfldt\"  timestamp,  \"rcpono\"  varchar(20),  \"odatet\"  timestamp,  \"terms\"  varchar(20),  \"priority\"  boolean,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(25),  \"vinvoice\"  varchar(20),  \"attach\"  varchar(20),  \"shipcode\"  varchar(20),  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"startdatet\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key(  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign key ( \"vendqno\" ) references  \""+schemaName+"\".\"venquote_b (  \"sid\" ), foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
       sqlscript="create  table if not exists  \""+schemaName+"\".\"vshipmen_b\"  (  \"sid\" integer generated by default as identity, \"shipcode\"  varchar(32) not null,  \"matcode\"  int  ,  \"shipper\"  int,  \"pono\"  int  ,  \"cpono\"  int,  \"invoice\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"carrier\"  varchar(20),  \"type\"  varchar(12),  \"shipdatet\"  timestamp,  \"shipdateta\"  timestamp,  \"tareno\"  varchar(20),  \"packno\"  varchar(20),  \"vendor\"  int  ,  \"customer\"  int  ,  \"billtocode\"  int  ,  \"billtosameasshipto\" boolean, \"shiptocode\"  int  ,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"serialno\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"shiptocode\"  )  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign  key  (  \"billtocode\")  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\")  ,  foreign  key  (  \"vendor\"  )  references \""+schemaName+"\".\"vendor_b (  \"sid\"  ), foreign  key  (  \"pono\"  )  references \""+schemaName+"\".\"vendorders_b\"  (  \"sid\"  ),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuquote_b\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"vendor\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"statusfl\"  int,  \"customer\"  int  ,  \"matcode\"  int  ,  \"replicate\"  int  ,  \"cinvoice\"  varchar(20),  \"ordprice\"  numeric(14,2),  \"jobno\"  varchar(20),  \"vpono\"  varchar(20),  \"quoordt\"  varchar(20),  \"statusfldt\"  timestamp,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(12),  \"terms\"  varchar(25),  \"priority\"  boolean,  \"odatet\"  timestamp,  \"shipcode\"  int,  \"activitycode\"  varchar(20),  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"attach\"  varchar(20),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  ),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"replicate\")  references \""+schemaName+"\".\"cuquote_b\"  (  \"sid\"),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuorders_b\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"customer\"  int  ,  \"matcode\"  int  ,  \"cuquote\" int  , \"cinvoice\"  int,  \"jobno\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"vpono\"  int,  \"rfpord\"  int,  \"rcpono\"  int,  \"odatet\"  timestamp,  \"terms\"  varchar(20),  \"priority\"  boolean,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(25),  \"vinvoice\"  int,  \"attach\"  varchar(90),  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"startdatet\"  timestamp,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  \"shipcodefrompay\"  int,  \"shipcode\"  int, \"barpo\"  varchar(30),  primary  key  (  \"sid\"  ),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  ),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"cuquote\"  )  references \""+schemaName+"\".\"cuquote_b\"  (  \"sid\"  ),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\") ,  foreign  key  (  \"shipcodefrompay\")  references \""+schemaName+"\".\"address\"  (  \"sid\"),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"address\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuinvoice_b\"  (  \"sid\" integer generated by default as identity, \"invoice\"  varchar(32) not null,  \"customer\"  int  ,  \"matcode\"  int  ,  \"invodate\"  timestamp,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"pono\"  int  ,  \"ref1typ\"  varchar(20),  \"ref1code\"  varchar(35),  \"shipdatet\"  timestamp,  \"shiptype\"  varchar(12),  \"shipcode\"  varchar(20),  \"terms\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"termsdat\"  timestamp,  \"discounp\"  numeric(14,2),  \"discoudt\"  timestamp,  \"discouds\"  numeric(14,2),  \"netddat\"  timestamp,  \"netddys\"  numeric(14,2),  \"fob\"  varchar(20),  \"type\"  varchar(12),  \"integrset\"  varchar(20),  \"attach\"  varchar(20),  \"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"agent\"  int  ,  \"notes\"  varchar(60),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  \"barinvoice\"  varchar(30),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  ),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"pono\"  )  references \""+schemaName+"\".\"cuorders_b\"  (  \"sid\"  ),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"shipment_b\"  (  \"sid\" integer generated by default as identity, \"shipcode\"  varchar(32) not null,  \"matcode\"  int  ,  \"shipper\"  int  ,  \"pono\"  int,  \"cpono\"  int  ,  \"invoice\"  int  ,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"carrier\"  int,  \"type\"  varchar(12),  \"shipdatet\"  timestamp,  \"shipdateta\"  timestamp,  \"tareno\"  varchar(20),  \"packno\"  varchar(20),  \"customer\"  int  ,  \"billtocode\"  int  ,  \"billtosameasshipto\" boolean, \"shiptocode\"  int  ,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"serialno\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barshipcod\"  varchar(30),  primary  key(  \"sid\"  ),  foreign  key  (  \"shipper\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\"), foreign  key  (  \"carrier\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\"),  foreign  key  (  \"billtocode\")  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address_b\"(  \"sid\"  )  ,  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  ),  foreign  key  (  \"invoice\"  )  references \""+schemaName+"\".\"cuinvoice_b\"  (  \"sid\"  ),  foreign  key  (  \"cpono\"  )  references \""+schemaName+"\".\"cuorders_b\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"emplorders_b\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"employee\"  int  ,  \"matcode\"  int  ,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"statusfl\"  int,  \"jobno\"  int,  \"vpono\"  int,  \"rfpord\"  int,  \"statusfldt\"  timestamp,  \"rcpono\"  int,  \"odatet\"  timestamp,  \"terms\"  varchar(20),  \"priority\"  boolean,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(25),  \"vinvoice\"  int,  \"attach\"  varchar(20),  \"shipcode\"  int  ,  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"startdatet\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key(  \"sid\"),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"vshipmen_b\"  (  \"sid\"),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"editlog_b\"  (  \"sid\" integer generated by default as identity, \"databasenm\"  varchar(20) not null  ,  \"recordno\"  int,  \"field\"  varchar(20),  \"datet\"  timestamp,  \"username\"  varchar(20),  \"deleted\"  boolean,  \"prevchar\"  varchar(30),  \"prevnum\"  int,  \"prevlog\"  boolean,  \"prevdate\"  timestamp,  \"newchar\"  varchar(30),  \"newnum\"  int,  \"newlog\"  boolean,  \"newdate\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"hlogfile_b\"  (  \"sid\" integer generated by default as identity, \"serialno\"  varchar(25)  not null ,  \"matcode\"  varchar(20),  \"quanrecd\"  int,  \"vendor\"  varchar(20),  \"location\"  varchar(20),  \"recvrpt\"  varchar(25),  \"inflg\"  boolean,  \"phy\"  boolean,  \"datetin\"  timestamp,  \"datetout\"  timestamp,  \"jobno\"  varchar(20),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"pono\"  varchar(20),  \"scandatet\"  timestamp,  \"quanissd\"  int,  \"butt\"  varchar(25),  \"statusfl\"  int,  \"quanrejd\"  numeric(14,2),  \"customer\"  varchar(25),  \"cpono\"  varchar(20),  \"customej\"  varchar(25),  \"orgcost\"  numeric(14,2),  \"orgpono\"  varchar(20),  \"orgjobno\"  varchar(20),  \"altserno\"  varchar(25),  \"selprice\"  numeric(14,2),  \"physqty\"  numeric(14,2),  \"sperson\"  varchar(25),  \"cartonid\"  varchar(25),  \"cartonpr\"  boolean,  \"packcode\"  varchar(20),  \"tarecode\"  varchar(20),  \"shipcode\"  varchar(20),  \"type\"  varchar(12),  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cpayment_b\"  (  \"sid\" integer generated by default as identity, \"payment\"  varchar(32) not null,  \"customer\"  int  ,  \"cinvoice\"  int  ,  \"cheqdate\" timestamp, \"paymentduedate\" timestamp, \"postingperiod\" int, \"matcode\"  int,  \"integrset\"  varchar(20),  \"account\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2), \"amountin\" numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"discount\"  numeric(14,2),  \"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"paytype\"  varchar(4),  \"paybyid\"  varchar(20),  \"paybydate\"  timestamp,  \"currency\"  varchar(12),  \"convrate\"  numeric(14,2),  \"locamountt\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  \"cinvoice\")  references \""+schemaName+"\".\"cuinvoice_b\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  ),  foreign  key  ( \"account\")  references \""+schemaName+"\".\"account_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"serialnumbers_b\"  (  \"sid\" integer generated by default as identity, \"serialno\"  varchar(25) not null  ,  \"matcode\"  varchar(20),  \"quanrecd\"  numeric(14,2),  \"vendor\"  varchar(20),  \"location\"  varchar(20),  \"recvrpt\"  varchar(20),  \"infl\"  boolean,  \"phy\"  boolean,  \"datetin\"  timestamp,  \"datetout\"  timestamp,  \"jobno\"  varchar(20),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"pono\"  varchar(20),  \"scandatet\"  timestamp,  \"quanissd\"  numeric(14,2),  \"butt\"  varchar(20),  \"statusfl\"  int,  \"quanrejd\"  numeric(14,2),  \"customer\"  varchar(20),  \"cpono\"  varchar(20),  \"customej\"  varchar(20),  \"orgcost\"  numeric(14,2),  \"orgpono\"  varchar(20),  \"orgjobno\"  varchar(20),  \"altserno\"  varchar(25),  \"selprice\"  numeric(14,2),  \"physqty\"  numeric(14,2),  \"sperson\"  varchar(20),  \"cartonid\"  varchar(20),  \"cartonpr\"  boolean,  \"packcode\"  varchar(20),  \"tarecode\"  varchar(20),  \"shipcode\"  varchar(20),  \"type\"  varchar(12),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barserial\"  varchar(30), primary  key(\"sid\"))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"machine_b\"  (  \"sid\" integer generated by default as identity, \"machinecode\"  varchar(32) not null,  \"quantity\"  numeric(14,2),  \"descript\"  varchar(120),  \"dateadded\"  timestamp,  \"source1\"  varchar(35),  \"source2\"  varchar(35),  \"upccode\"  varchar(25),  \"cost\"  numeric(14,2),  \"replcost\"  numeric(14,2),  \"selprice\"  numeric(14,2),  \"spricold\"  numeric(14,2),  \"spricnew\"  numeric(14,2),  \"spriceffdt\"  timestamp,  \"shipcode\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"misccode1\"  varchar(25),  \"misccode2\"  varchar(25),  \"qtylevel1\"  numeric(14,2),  \"unit\"  varchar(12),  \"caseqty\"  numeric(14,2),  \"type\"  varchar(12),  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"aliascode\"  varchar(25),  \"parentcode\"  int  ,  \"avgprice\"  numeric(14,2),  \"avgcost\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"subcodesn\"  varchar(35),  \"subcodesn2\" varchar(35),  \"subcodesn3\" varchar(35),  \"cuordqty\"  numeric(14,2),  \"venorqty\"  numeric(14,2),  \"cupicqty\"  numeric(14,2),  \"venpiqty\"  numeric(14,2),  \"cuinvqty\"  numeric(14,2),  \"cushiqty\"  numeric(14,2),  \"venshqty\"  numeric(14,2),  \"effdate\"  timestamp,  \"integrset\"  varchar(20),  \"notes\"  varchar(60),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barupc\"  varchar(30),  primary  key  (  \"sid\"), foreign  key  (  \"parentcode\")  references \""+schemaName+"\".\"machine_b\"  (  \"sid\")  )";
      sqlscript="create  table if not exists  \""+schemaName+"\".\"groupmembers_b\"  (  \"sid\" integer generated by default as identity, \"groupid\"  int not null,  \"memberid\"  varchar(32) not null,  \"descript\"  varchar(120), \"sourcetype\" varchar(10),  \"memberem\"  int  ,  \"membercu\"  int  ,  \"memberve\"  int  ,  \"memberit\"  int  ,  \"memberac\"  int  ,  \"memberma\"  int  ,  \"type\"  varchar(10),  \"currpw\"  varchar(32) ,  \"expiry\"  timestamp,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  \"groupid\")  references \""+schemaName+"\".\"membersgroup_b (  \"sid\"),  foreign  key  (  \"memberem\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\"),  foreign  key  (  \"membercu\")  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"),  foreign  key  (  \"memberit\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"memberac\")  references \""+schemaName+"\".\"activity_b\"  (  \"sid\"),  foreign  key  (  \"memberma\")  references \""+schemaName+"\".\"machine_b\"  (  \"sid\"),  foreign  key  (  \"memberve\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"jobassignment_b\"  (  \"sid\" integer generated by default as identity, \"jobassign\" varchar(32) not null, \"machine\"  int ,  \"sequence\"  varchar(12) ,  \"location\"  int  ,  \"sdatet\"  timestamp,  \"durationh\"  int,  \"durationm\"  int,  \"stimeh\"  int,  \"stimem\"  int,  \"stimeampm\"  boolean,  \"edatet\"  timestamp,  \"priority\"  boolean,  \"percntdone\"  numeric(14,2),\"repeatf\"  varchar(20),  \"jobno\"  int  ,  \"matcode\"  int  , \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"pono\"  int,  \"vendor\"  int  ,  \"cpono\"  int,  \"customer\"  int  ,  \"statusfl\"  int, \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"notes\"  varchar(60),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  ),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"machine\")  references \""+schemaName+"\".\"machine_b\"  (  \"sid\"),   foreign  key  (  \"jobno\")  references \""+schemaName+"\".\"itemjob_b\"  (  \"sid\"),foreign key (\"location\")  references \""+schemaName+"\".\"location_b\"  (  \"sid\")  )";
      sqlscript="create  table if not exists  \""+schemaName+"\".\"nextserialno_b\"  (  \"sid\" integer generated by default as identity, \"nxtserno\"  varchar(4)  not null ,  \"curserno\"  varchar(4),  \"prevsern\"  varchar(4),  \"is9999\"  boolean,  \"refno\" varchar(14)  , \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rate1f_b\"  (  \"sid\" integer generated by default as identity, \"usertype\"  varchar(12)  not null ,  \"prodtype\"  varchar(12) not null,  \"stepname\"  varchar(25) not null,  \"step\"  int,  \"value\"  numeric(14,2),  \"effdate\"  timestamp,  \"enddate\"  timestamp,  \"incentive\"  varchar(25),  \"ieffdate\"  timestamp,  \"ienddate\"  timestamp, \"statusfl\" int, \"statusfldt\"  timestamp, \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"itembom_b\"  (  \"sid\" integer generated by default as identity, \"bomcode\"  varchar(32) not null,  \"descript\"  varchar(120),  \"quantity\" numeric(14,2),  \"mode\"  boolean,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  \"statusfl\"  int,  \"statusfldt\"  timestamp, primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"itembomdetails_b\"  (  \"sid\" integer generated by default as identity, \"bomcode\"  int not null,  \"matcode\"  int  not null ,  \"mode\"  boolean,  \"subqty\"  numeric(14,2), \"descript\"  varchar(1200), \"seq\"  varchar(4),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"  ),  foreign  key  (  \"bomcode\")  references \""+schemaName+"\".\"itembom_b\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"task_b\"  (  \"sid\" integer generated by default as identity, \"taskid\" varchar(32) not null,  \"descript\"  varchar(120),  \"activitycode\"  int  ,  \"projectteam\"  int  ,  \"resource\" int  , \"mode\"  boolean,  \"eststart\" timestamp, calcstart\"  timestamp,  \"actlstart\"  timestamp,  \"estend\"  timestamp,  \"calcend\"  timestamp,  \"actlend\"  timestamp,  \"subqty\"  numeric(14,2),  \"bomcode\"  int,  \"location\"  int,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(\"sid\") ,  foreign  key  (  projectteam)  references \""+schemaName+"\".\"membersgroup_b (  \"sid\"),  foreign  key  (resource)  references \""+schemaName+"\".\"groupmembers_b\"  (  \"sid\"),  foreign  key  (  \"activitycode\"  )  references \""+schemaName+"\".\"activity_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"jobassignmentdetails_b\"  (  \"sid\" integer generated by default as identity, \"jobassign\" int not null, line\"  int, \"machine\"  int ,  \"sequence\"  varchar(12) ,  \"location\"  int  ,  \"sdatet\"  timestamp,  \"durationh\"  int,  \"durationm\"  int,  \"stimeh\"  int,  \"stimem\"  int,  \"stimeampm\"  boolean,  \"edatet\"  timestamp,  \"priority\"  boolean,  \"percntdone\"  numeric(14,2),\"repeatf\"  varchar(20),  \"jobno\"  int  ,  \"matcode\"  int  ,qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"pono\"  int,  \"vendor\"  int  ,  \"cpono\"  int,  \"customer\"  int  ,  \"statusfl\"  int,  \"linetotl\"  numeric(14,2), \"owner\"  varchar(40),  \"owner2\"  varchar(40), \"jafield1\" varchar(60), \"jafield2\"  varchar(60), \"jafield3\"  varchar(60), \"jafield4\"  varchar(60), \"notes\" varchar(60),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  ),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"machine\")  references \""+schemaName+"\".\"machine_b\"  (  \"sid\"),     foreign  key  (  \"jobno\")  references \""+schemaName+"\".\"itemjob_b\"  (  \"sid\"),foreign key (\"location\")  references \""+schemaName+"\".\"location_b\"  (  \"sid\"), foreign  key  (  \"jobassign\")  references \""+schemaName+"\".\"jobassignment_b\"  (  \"sid\"  ) )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"processdetails_b\"  (  \"sid\" integer generated by default as identity, \"process\" varchar(32) not null, \"cpono\" int , \"matcode\"  int , \"customer\" int,  \"sdatet\"  timestamp,  \"durationh\"  int,  \"durationm\"  int,  \"stimeh\"  int,  \"stimem\"  int,  \"stimeampm\"  boolean,  \"edatet\"  timestamp,  \"priority\"  boolean, \"percntdone\"  numeric(14,2),\"statusfl\"  int, \"statusfldt\"  timestamp,  \"notes\" varchar(60), \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ), foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"), foreign  key  (  \"cpono\")  references \""+schemaName+"\".\"cuorders_b\"  (  \"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"processattributes_b\"  (  \"sid\" integer generated by default as identity, \"pdetails\" int not null, \"name\"  varchar(32) , value varchar(32),  \"type\"  varchar(32),  \"range\"  varchar(32),  \"step\"  int,  \"statusfl\"  int, \"statusfldt\"  timestamp,  \"notes\" varchar(60), \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"pdetails\"  )  references \""+schemaName+"\".\"processdetails_b\"  (  \"sid\"  ))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"project_b (  \"sid\" integer generated by default as identity, \"proj\"  varchar(32) not null,  \"parentcode\"  int  ,  \"descript\"  varchar(120),  \"companycode\" int  , \"divcode\"  int  ,  \"depcode\"  int  ,  \"location\"  int  ,  \"sdatet\"  timestamp,  \"edatet\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(\"sid\"),  foreign  key  (  \"parentcode\"  )  references \""+schemaName+"\".\"project_b\"  (  \"sid\"), foreign  key  (  \"companycode\"  )  references \""+schemaName+"\".\"company_b\"  (  \"sid\"  ),  foreign  key  (  \"depcode\" )  references \""+schemaName+"\".\"department_b\"  (  \"sid\"  ),  foreign  key  (  \"divcode\"  )  references \""+schemaName+"\".\"division_b\"  (  \"sid\"  ))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
       sqlscript="create  table if not exists  \""+schemaName+"\".\"outline_b\"  (  \"sid\" integer generated by default as identity, \"proj\"  int not null,  \"parentcode\"  int  ,  \"userow\"  numeric(14,2),  \"usecol\"  numeric(14,2),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(\"sid\"),  foreign  key  (  \"parentcode\"  )  references \""+schemaName+"\".\"outline_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"scandate_b\"  (  \"sid\" integer generated by default as identity, \"sdsatetimeofscan\"  varchar(25) not null  ,  \"datetimeofscan\"  timestamp,  \"lastdate\"  timestamp,  \"bkupdate\"  timestamp, \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vinvoice_b\"  (  \"sid\" integer generated by default as identity, \"invoice\"  varchar(32) not null,  \"vendor\"  int  ,  \"matcode\"  int  ,  \"integrset\"  varchar(20),  \"invodate\"  timestamp,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"pono\"  int  ,  \"ref1typ\"  varchar(20),  \"ref1code\"  varchar(35),  \"shipdatet\"  timestamp,  \"shiptype\"  varchar(12),  \"shipcode\"  int  ,  \"terms\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"termsdat\"  timestamp,  \"discounp\"  numeric(14,2),  \"discoudt\"  timestamp,  \"discouds\"  numeric(14,2),  \"netddat\"  timestamp,  \"netddys\"  int,  \"fob\"  varchar(20),  \"type\"  varchar(12),  \"attach\"  varchar(20),\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"agent\"  int  ,  \"notes\"  varchar(60),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key(  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"vshipmen_b\"  (  \"sid\"),  foreign  key  (  \"pono\"  )  references \""+schemaName+"\".\"vendorders_b\"  (  \"sid\"  ),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vpayment_b\"  (  \"sid\" integer generated by default as identity, \"payment\"  varchar(32) not null,  \"vendor\"  int  ,  \"vinvoice\"  int  ,  \"cheqdate\" timestamp, \"paymentduedate\" timestamp, \"postingperiod\" int, \"matcode\"  int,  \"integrset\"  varchar(20),  \"account\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"amountin\" numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"discount\"  numeric(14,2),  \"paytype\"  varchar(4),  \"paybyid\"  varchar(20),  \"paybydate\"  timestamp,  \"currency\"  varchar(12),  \"convrate\"  numeric(14,2),  \"locamount\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  \"vinvoice\")  references \""+schemaName+"\".\"vinvoice_b\"  (  \"sid\"),  foreign  key  (  \"vendor\"  )  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\")  , foreign  key  ( \"account\")  references \""+schemaName+"\".\"account_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuqdetails_b\"  (  \"sid\" integer generated by default as identity, \"cuqno\"  int   not null,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodate\"  timestamp,  \"idelvdate\"  timestamp, \"shipoption\" varchar(20) ,  \"vendor\"  int  ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\"),  foreign  key  (  \"cuqno\")  references \""+schemaName+"\".\"cuquote_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuodetails_b\"  (  \"sid\" integer generated by default as identity, \"cuono\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodate\"  timestamp,  \"idelvdate\"  timestamp,  \"vendor\"  int  ,\"shipoption\" varchar(20) ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2), \"owner2\"  varchar(40),  \"statusfl\"  int,  \"statusfldt\"  timestamp,\"barpo\" varchar(30),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\"),  foreign  key  (  \"cuono\")  references \""+schemaName+"\".\"cuorders_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuidetails_b\"  (  \"sid\" integer generated by default as identity, \"cuino\"  int   not null,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodatet\"  timestamp,  \"delvdateit\"  timestamp,  \"vendor\"  int  ,  \"qtyostnd\"  numeric(14,2),  \"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\"),  foreign  key  (  \"cuino\")  references \""+schemaName+"\".\"cuinvoice_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cupdetails_b\"  (  \"sid\" integer generated by default as identity, \"cupno\"  int  not null ,  \"line\"  int,  \"invoice\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordprice\"  numeric(14,2),  \"paytype\"  varchar(12),  \"paybyid\"  varchar(12), \"amountin\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"invoice\")  references \""+schemaName+"\".\"cuinvoice_b\"  (  \"sid\"),  foreign  key  (  cupno)  references \""+schemaName+"\".\"cpayment_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"activityjobdetails_b\"  (  \"sid\" integer generated by default as identity, \"jobno\"  int   not null,  \"line\"  int,  \"activitycode\"  int  ,  \"proddatet\"  timestamp,  \"qtyalloc\"  numeric(14,2),  \"pono\"  int,  \"ordprice\"  numeric(14,2),  \"qtyostnd\"  numeric(14,2),  \"qtyalstk\"  numeric(14,2),  \"qtyissud\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"printmstatj\"  int,  \"prinmtfldtj\"  timestamp,  \"type\"  varchar(12),  \"activitycodeout\"  int,  \"qtyout\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"activitycode\")  references \""+schemaName+"\".\"activity_b\"  (  \"sid\"),  foreign  key  (  \"jobno\")  references \""+schemaName+"\".\"activityjob_b\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"shipmentdetails_b\"  (  \"sid\" integer generated by default as identity, \"shipcode\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyshipped\"  numeric(14,2),  \"shippingprice\"  numeric(14,2),  \"shipper\"  int,  \"pono\"  int,  \"cpono\"  int,  \"invoice\"  int,  \"amount\"  numeric(14,2),  \"amountostnd\"  numeric(14,2),  \"qty\"  numeric(14,2),  \"qtyostnd\"  numeric(14,2),  \"carrier\"  int,  \"type\"  varchar(12),  \"shipdatet\"  timestamp,  \"shipdateta\"  timestamp,  \"tareno\"  varchar(20),  \"packno\"  varchar(20),  \"customer\"  int  ,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"serialno\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barshipcod\"  varchar(30),  \"linetotl\"  numeric(14,2),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  ( \"mailtocode\"  )  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\"  )  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"shipment_b\"  (  \"sid\")  )";
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendqdetails_b\"  (  \"sid\" integer generated by default as identity, \"vendqno\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodatet\"  timestamp,\"shipoption\" varchar(20) ,  \"customer\"  int  ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  ),  foreign  key  (  \"vendqno\"  )  references \""+schemaName+"\".\"venquote_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendodetails_b\"  (  \"sid\" integer generated by default as identity, \"vendono\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodatet\"  timestamp,  \"customer\"  int  ,\"shipoption\" varchar(20) ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  ),  foreign  key  (  \"vendono\"  )  references \""+schemaName+"\".\"vendorders_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendidetails_b\"  (  \"sid\" integer generated by default as identity, \"vendino\"  int not null  ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodatet\"  timestamp,  \"customer\"  int  ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_b\"  (  \"sid\"  ),  foreign  key  (  \"vendino\"  )  references \""+schemaName+"\".\"vinvoice_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendpdetails_b\"  (  \"sid\" integer generated by default as identity, \"vendpno\"  int  not null ,  \"line\"  int,  \"invoice\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordprice\"  numeric(14,2),  \"paytype\"  varchar(12),  \"paybyid\"  varchar(12), \"amountin\"  numeric(14,2),  \"vendor\"  int  ,  \"vontact\"  int,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"invoice\")  references \""+schemaName+"\".\"vinvoice_b\"  (  \"sid\"),  foreign  key  (  \"vendor\"  )  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\"  ),  foreign  key  (  vendpno  )  references \""+schemaName+"\".\"vpayment_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vshipmendetails_b\"  (  \"sid\" integer generated by default as identity, \"shipcode\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyshipped\"  numeric(14,2),  \"shippingprice\"  numeric(14,2),  \"shipper\"  int,  \"pono\"  int,  \"cpono\"  int,  \"invoice\"  int,  \"amount\"  numeric(14,2),  \"amountostnd\"  numeric(14,2),  \"qty\"  numeric(14,2),  \"qtyostnd\"  numeric(14,2),  \"carrier\"  int,  \"type\"  varchar(12),  \"shipdatet\"  timestamp,  \"shipdateta\"  timestamp,  \"tareno\"  varchar(20),  \"packno\"  varchar(20),  \"vendor\"  int,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"serialno\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barshipcod\"  varchar(30),  \"linetotl\"  numeric(14,2),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  ( \"mailtocode\"  )  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\"  )  references \""+schemaName+"\".\"address_b\"(  \"sid\"  ),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"vshipmen_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"wageearneraux_b\"  (  \"sid\" integer generated by default as identity, \"wageearnerid\"  int not null,  \"line\"  int,  \"sin\"  varchar(12),  \"wcbytdl\"  numeric(14,2),  \"wcbytdn\"  numeric(14,2),  \"insytdl\"  numeric(14,2),  \"insytdn\"  numeric(14,2),  \"vacatonyl\"  numeric(14,2),  \"vacatonyn\"  numeric(14,2),  \"payytdl\"  numeric(14,2),  \"fpensiytl\"  numeric(14,2),  \"ppensiytl\"  numeric(14,2),  \"itaxytdl\"  numeric(14,2),  \"ptaxytdl\"  numeric(14,2),  \"payytdn\"  numeric(14,2),  \"fpensiytn\"  numeric(14,2),  \"ppensiytn\"  numeric(14,2),  \"itaxytdn\"  numeric(14,2),  \"patxytdn\"  numeric(14,2),  \"gpayytdl\"  numeric(14,2),  \"gpayytdn\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  wageearnerid)  references \""+schemaName+"\".\"wageearner_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create table if not exists  \""+schemaName+"\".\"rgenapp_b ( \"sid\" integer generated by default as identity, \"appname\" varchar(40) not null, \"descript\"  varchar(120),  \"apptype varchar(20), appwaccounting boolean, appwemail boolean, appwjmsmq boolean, appvendor varchar(20), appversion varchar(20), appplatform varchar(40), appmodelpkg varchar(40), appactionpkg varchar(40), appskin varchar(20), appdeploytype varchar(20), createfidata varchar(4096000), revengdata varchar(4096000), initializefidata varchar(4096000),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary key(\"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rgendb_b ( \"sid\" integer generated by default as identity, \"dbname\" varchar(40) not null, \"descript\"  varchar(120),  \"dbtype varchar(20), dbvendor varchar(20), dbversion varchar(20), dbplatform varchar(20), appcode\"  int  ,  \"sqldriver varchar(40), sqlurl varchar(40), sqluser varchar(20), sqlpassword varchar(20), sqlclasspath varchar(40), sqlcreatedbscript varchar(20), sqldropdbscript varchar(20), sqlcreatetblsscript varchar(20), sqlloadtblsscript varchar(20),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary key(\"sid\"), foreign  key  (  appcode  )  references \""+schemaName+"\".\"rgenapp_b\"  (  \"sid\"  ) )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rgentable_b \"  (  \"sid\" integer generated by default as identity, \"tablename\"  varchar(40)  not null ,  \"dbcode int  , inaddmenu\"  boolean,  \"inlistmenu\"  boolean,  \"intransactionmenu\"  boolean,  \"inreportmenu\"  boolean,  \"ingraphsmenu\"  boolean,  \"inmailingmenu\"  boolean,  \"ingeneratemenu\"  boolean,  \"inadminmenu\"  boolean,  \"inmaintenancemenu\"  boolean,  \"inlabelsmenu\"  boolean,  \"inskipmenu\"  boolean,  \"incustom1menu\"  boolean,  \"menulevel\"  varchar(12),  \"menurole\"  varchar(12),  \"menulabelgroup\"  varchar(20),  \"submenusequence\"  int,  \"usagescope varchar(12),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(  \"sid\"), foreign  key  (  dbcode  )  references \""+schemaName+"\".\"rgendb_b\"  (  \"sid\"  ) )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rgenfields_b\"  (  \"sid\" integer generated by default as identity, \"dbcode int   , tablename\"  int   ,  \"fieldname\"  varchar(60) not null,  \"fieldtype varchar(20), fieldlength varchar(2), ingroup\"  varchar(20),  \"seqwithingroup\"  int,  \"focusseq\"  int,  \"future1\"  varchar(20),  \"initialvalue\"  varchar(12),  \"keyoradditional\"  varchar(12),  \"keyoradditional2\"  varchar(12),  \"keyoradditional3\"  varchar(12),  \"showinmenu\"  varchar(20),  \"showinreport\"  varchar(20),  \"processoption1\"  varchar(20),  \"processoption2\"  varchar(20), fdbcode varchar(40)  ,  \"ftablename \"  varchar(60)  ,  \"ffieldkeyname1\"  varchar(60),  \"ffieldkeyname2\"  varchar(60),  \"ffieldkeyname3\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"), foreign  key  (  \"tablename\"  )  references \""+schemaName+"\".\"rgentable_b \"  (  \"sid\"), foreign  key  (  dbcode )  references \""+schemaName+"\".\"rgendb_b\"  (  \"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"genoptions_b\"  (  \"sid\" integer generated by default as identity, \"row\"  varchar(2) not null,  \"genoptions01\"  varchar(159),  \"genpurpose01\"  varchar(159),  \"genvalue01\"  varchar(159),  \"genoptions02\"  varchar(159),  \"genpurpose02\"  varchar(159),  \"genvalue02\"  varchar(159),  \"genoptions03\"  varchar(159),  \"genpurpose03\"  varchar(159),  \"genvalue03\"  varchar(159),  \"genoptions04\"  varchar(159),  \"genpurpose04\"  varchar(159),  \"genvalue04\"  varchar(159),  \"genoptions05\"  varchar(159),  \"genpurpose05\"  varchar(159),  \"genvalue05\"  varchar(159),  \"genoptions06\"  varchar(159),  \"genpurpose06\"  varchar(159),  \"genvalue06\"  varchar(159),  \"genoptions07\"  varchar(159),  \"genpurpose07\"  varchar(159),  \"genvalue07\"  varchar(159),  \"genoptions08\"  varchar(159),  \"genpurpose08\"  varchar(159),  \"genvalue08\"  varchar(159),  \"genoptions09\"  varchar(159),  \"genpurpose09\"  varchar(159),  \"genvalue09\"  varchar(159),  \"genoptions10\"  varchar(159),  \"genpurpose10\"  varchar(159),  \"genvalue10\"  varchar(159),  \"genoptions11\"  varchar(159),  \"genpurpose11\"  varchar(159),  \"genvalue11\"  varchar(159),  \"genoptions12\"  varchar(159),  \"genpurpose12\"  varchar(159),  \"genvalue12\"  varchar(159),  \"genoptions13\"  varchar(159),  \"genpurpose13\"  varchar(159),  \"genvalue13\"  varchar(159),  \"genoptions14\"  varchar(159),  \"genpurpose14\"  varchar(159),  \"genvalue14\"  varchar(159),  \"genoptions15\"  varchar(159),  \"genpurpose15\"  varchar(159),  \"genvalue15\"  varchar(159),  \"genoptions16\"  varchar(159),  \"genpurpose16\"  varchar(159),  \"genvalue16\"  varchar(159),  \"genoptions17\"  varchar(159),  \"genpurpose17\"  varchar(159),  \"genvalue17\"  varchar(159),  \"genoptions18\"  varchar(159),  \"genpurpose18\"  varchar(159),  \"genvalue18\"  varchar(159),  \"genoptions19\"  varchar(159),  \"genpurpose19\"  varchar(159),  \"genvalue19\"  varchar(159),  \"genoptions20\"  varchar(159),  \"genpurpose20\"  varchar(159),  \"genvalue20\"  varchar(159),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"blobdata_b\"  (  \"sid\" integer generated by default as identity, \"fromtable\"  varchar(35) not null,  \"fromkey\" varchar(35) not null, qualifier\"  varchar(32) not null,  \"sequence\"  int,  \"type\" varchar(40), \"data\"  varbinary(1000000),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\" ))";
      if(dbProductName.equals("psql")){
       sqlscript="create  table if not exists  \""+schemaName+"\".\"blobdata_b\"  (  \"sid\" integer generated by default as identity, \"fromtable\"  varchar(35) not null,  \"fromkey\" varchar(35) not null, qualifier\"  varchar(32) not null,  \"sequence\"  int,  \"type\" varchar(40), \"data\"  bytea,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\" ))";
      }
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"clobdata_b\"  (  \"sid\" integer generated by default as identity, \"fromtable\"  varchar(35) not null,  \"fromkey\" varchar(35) not null, qualifier\"  varchar(32) not null,  \"sequence\"  int,  \"type\" varchar(40), data\"  varchar(4096000),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"controlusagebyperiods_b\"  (  \"sid\" integer generated by default as identity, \"ctlusagetrackerid\"  varchar(32)  not null,  \"descript\"  varchar(120), controlcode \"  int,  \"currency\"  varchar(3),  \"period0label varchar(20), \"period0b\"  numeric(14,2),  \"period0\"  numeric(14,2),  \"periodtotalslabel varchar(20), periodtotalsb\"  numeric(14,2),  \"periodtotals\"  numeric(14,2),  \"period1label varchar(20), \"period1budget\"  numeric(14,2),  \"period1actual\"  numeric(14,2),  \"period2label\" varchar(20), \"period2b\"  numeric(14,2),  \"period2\"   numeric(14,2),  \"period3label varchar(20), period3b\"  numeric(14,2),  \"period3\"  numeric(14,2),  \"period4label varchar(20), period4b\"  numeric(14,2),  \"period4\"  numeric(14,2),  \"period5label\" varchar(20), period5b\"  numeric(14,2),  \"period5\"  numeric(14,2),  \"period6label varchar(20), period6b\"  numeric(14,2),  \"period6\"  numeric(14,2),  \"period7label varchar(20), period7b\"  numeric(14,2),  \"period7\"  numeric(14,2),  \"period8label varchar(20), period8b\"  numeric(14,2),  \"period8\"  numeric(14,2),  \"period9label varchar(20), period9b\"  numeric(14,2),  \"period9\"  numeric(14,2),  \"period10label varchar(20), period10b\"  numeric(14,2),  \"period10\"  numeric(14,2),  \"period11label varchar(20), period11b\"  numeric(14,2),  \"period11\"  numeric(14,2),  \"period12label varchar(20), period12b\"  numeric(14,2),  \"period12\"  numeric(14,2),  \"periodnlabel varchar(20), periodnb\"  numeric(14,2),  \"periodn\"  numeric(14,2),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  controlcode)  references \""+schemaName+"\".\"control_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"resourcedetails_b\"  (  \"sid\" integer generated by default as identity, \"taskno\"  int,  \"resourcenumber\"  int,  \"projectteam\"  int  ,  \"resource\"  int  not null ,  \"usagepercent numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (projectteam)  references \""+schemaName+"\".\"membersgroup_b\"  (  \"sid\"),  foreign  key  (resource)  references \""+schemaName+"\".\"groupmembers_b\"  (  \"sid\"),  foreign  key  (  taskno)  references \""+schemaName+"\".\"task_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"emplodetails_b\"  (  \"sid\" integer generated by default as identity, \"emplono\"  int  not null ,  \"line\"  int not null,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodate\"  timestamp,  \"idelvdate\"  timestamp,  \"vendor\"  int  ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_b\"  (  \"sid\"),  foreign  key  (  emplono)  references \""+schemaName+"\".\"emplorders_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
       sqlscript="create  table if not exists  \""+schemaName+"\".\"usagebyperiods_b\"  (  \"sid\" integer generated by default as identity, \"usagetrackerid\"  varchar(32) not null,  \"descript\"  varchar(120),  \"matcode int  , \"currency\"  varchar(3),  \"period0label varchar(20), \"period0b\"  numeric(14,2),  \"period0\"  numeric(14,2),  \"period0formulae\"  varchar(159),  \"periodtotalslabel varchar(20), periodtotalsb\"  numeric(14,2),  \"periodtotals\" numeric(14,2),  \"periodtotalsformulae\"  varchar(159),  \"period1label varchar(20), \"period1budget\"  numeric(14,2),  \"period1\"  numeric(14,2),  \"period1formulae\"  varchar(159),  \"period2label\" varchar(20), \"period2b\"  numeric(14,2),  \"period2\"   numeric(14,2),  \"period2formulae\"  varchar(159),  \"period3label varchar(20), period3b\"  numeric(14,2),  \"period3\"  numeric(14,2),  \"period3formulae\"  varchar(159),  \"period4label varchar(20), period4b\"  numeric(14,2),  \"period4\"  numeric(14,2),  \"period4formulae\"  varchar(159),  \"period5label\" varchar(20), period5b\"  numeric(14,2),  \"period5\"  numeric(14,2),  \"period5formulae\"  varchar(159),  \"period6label varchar(20), period6b\"  numeric(14,2),  \"period6\"  numeric(14,2),  \"period6formulae\"  varchar(159),  \"period7label varchar(20), period7b\"  numeric(14,2),  \"period7\"  numeric(14,2),  \"period7formulae\"  varchar(159),  \"period8label varchar(20), period8b\"  numeric(14,2),  \"period8\"  numeric(14,2),  \"period8formulae\"  varchar(159),  \"period9label varchar(20), period9b\"  numeric(14,2),  \"period9\"  numeric(14,2),  \"period9formulae\"  varchar(159),  \"period10label varchar(20), period10b\"  numeric(14,2),  \"period10\"  numeric(14,2),  \"period10formulae\"  varchar(159),  \"period11label varchar(20), period11b\"  numeric(14,2),  \"period11\"  numeric(14,2),  \"period11formulae\"  varchar(159),  \"period12label varchar(20), period12b\"  numeric(14,2),  \"period12\"  numeric(14,2),  \"period12formulae\"  varchar(159),  \"periodnlabel varchar(20), periodnb\"  numeric(14,2),  \"periodn\"  numeric(14,2),  \"periodnformulae\"  varchar(159),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"groupcode\"  int  ,  primary  key  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_b\"  (  \"sid\"), foreign  key  (  groupcode)  references \""+schemaName+"\".\"rollupgroup_b\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"resource_bundle_b\" (  \"sid\" integer generated by default as identity,\"name\" varchar(50),language varchar(2),country varchar(2),variant varchar(2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(  \"sid\"))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"resource_b\" (  \"sid\" integer generated by default as identity, \"_key\"  varchar(50) , \"_value\" varchar(2555),  \"resourcebundle\"  int  not null,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"), foreign  key  (  \"resourcebundle\")  references \""+schemaName+"\".\"resource_bundle_b\"  (  \"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"truefalse_b\" (  \"sid\" integer generated by default as identity, \"tablename\"  varchar(50) ,  \"qualifier varchar(32), show001 boolean, show002 boolean, show003 boolean, show004 boolean, show005 boolean, show006 boolean, show007 boolean, show008 boolean, show009 boolean, show010 boolean, show011 boolean, show012 boolean, show013 boolean, show014 boolean, show015 boolean, show016 boolean, show017 boolean, show018 boolean, show019 boolean, show020 boolean, show021 boolean, show022 boolean, show023 boolean, show024 boolean, show025 boolean, show026 boolean, show027 boolean, show028 boolean, show029 boolean, show030 boolean, show031 boolean, show032 boolean, show033 boolean, show034 boolean, show035 boolean, show036 boolean, show037 boolean, show038 boolean, show039 boolean, show040 boolean, show041 boolean, show042 boolean, show043 boolean, show044 boolean, show045 boolean, show046 boolean, show047 boolean, show048 boolean, show049 boolean, show050 boolean, show051 boolean, show052 boolean, show053 boolean, show054 boolean, show055 boolean, show056 boolean, show057 boolean, show058 boolean, show059 boolean, show060 boolean, show061 boolean, show062 boolean, show063 boolean, show064 boolean, show065 boolean, show066 boolean, show067 boolean, show068 boolean, show069 boolean, show070 boolean, show071 boolean, show072 boolean, show073 boolean, show074 boolean, show075 boolean, show076 boolean, show077 boolean, show078 boolean, show079 boolean, show080 boolean, show081 boolean, show082 boolean, show083 boolean, show084 boolean , show085 boolean, show086 boolean, show087 boolean, show088 boolean, show089 boolean, show090 boolean, show091 boolean, show092 boolean, show093 boolean, show094 boolean, show095 boolean, show096 boolean, show097 boolean, show098 boolean, show099 boolean, show100 boolean, show101 boolean, show102 boolean, show103 boolean, show104 boolean, show105 boolean, show106 boolean, show107 boolean, show108 boolean, show109 boolean, show110 boolean, show111 boolean, show112 boolean, show113 boolean, show114 boolean, show115 boolean, show116 boolean, show117 boolean, show118 boolean, show119 boolean, show120 boolean, show121 boolean, show122 boolean, show123 boolean, show124 boolean, show125 boolean, show126 boolean, show127 boolean, show128 boolean, show129 boolean, show130 boolean, show131 boolean, show132 boolean, show133 boolean, show134 boolean, show135 boolean, show136 boolean, show137 boolean, show138 boolean, show139 boolean,\"show140 boolean,\"show141 boolean,show142 boolean,show143 boolean,show144 boolean,show145 boolean,show146 boolean,show147 boolean,show148 boolean,show149 boolean,show150 boolean,show151 boolean,show152 boolean,show153 boolean,show154 boolean,show155 boolean,show156 boolean,show157 boolean,show158 boolean,show159 boolean,show160 boolean,show161 boolean,show162 boolean,show163 boolean,show164 boolean,show165 boolean,show166 boolean,show167 boolean,show168 boolean,show169 boolean,show170 boolean,show171 boolean,show172 boolean,show173 boolean,show174 boolean,show175 boolean,show176 boolean,show177 boolean,show178 boolean,show179 boolean,show180 boolean,show181 boolean,show182 boolean,show183 boolean,show184 boolean,show185 boolean,show186 boolean,show187 boolean,show188 boolean,show189 boolean,show190 boolean,show191 boolean,show192 boolean,show193 boolean,show194 boolean,show195 boolean,show196 boolean,show197 boolean,show198 boolean,show199 boolean, show200 boolean, show201 boolean, show202 boolean, show203 boolean, show204 boolean, show205 boolean, show206 boolean, show207 boolean, show208 boolean, show209 boolean, show210 boolean,\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"seat_b (  \"sid\" integer generated by default as identity, \"location\"  int  not null , \"row\"  varchar(4) not null, \"rowlabel\"  varchar(50), seat001status varchar(1), name001 varchar(50), ticket001 varchar(50), po001 varchar(32), seat002status varchar(1), name002 varchar(50), ticket002 varchar(50), po002 varchar(32), seat003status varchar(1), name003 varchar(50), ticket003 varchar(50), po003 varchar(32), seat004status varchar(1), name004 varchar(50), ticket004 varchar(50), po004 varchar(32), seat005status varchar(1), name005 varchar(50), ticket005 varchar(50), po005 varchar(32), seat006status varchar(1), name006 varchar(50), ticket006 varchar(50), po006 varchar(32), seat007status varchar(1), name007 varchar(50), ticket007 varchar(50), po007 varchar(32), seat008status varchar(1), name008 varchar(50), ticket008 varchar(50), po008 varchar(32), seat009status varchar(1), name009 varchar(50), ticket009 varchar(50), po009 varchar(32), seat010status varchar(1), name010 varchar(50), ticket010 varchar(50), po010 varchar(32), seat011status varchar(1), name011 varchar(50), ticket011 varchar(50), po011 varchar(32), seat012status varchar(1), name012 varchar(50), ticket012 varchar(50), po012 varchar(32), seat013status varchar(1), name013 varchar(50), ticket013 varchar(50), po013 varchar(32), seat014status varchar(1), name014 varchar(50), ticket014 varchar(50), po014 varchar(32), seat015status varchar(1), name015 varchar(50), ticket015 varchar(50), po015 varchar(32), seat016status varchar(1), name016 varchar(50), ticket016 varchar(50), po016 varchar(32), seat017status varchar(1), name017 varchar(50), ticket017 varchar(50), po017 varchar(32), seat018status varchar(1), name018 varchar(50), ticket018 varchar(50), po018 varchar(32), seat019status varchar(1), name019 varchar(50), ticket019 varchar(50), po019 varchar(32), seat020status varchar(1), name020 varchar(50), ticket020 varchar(50), po020 varchar(32), seat021status varchar(1), name021 varchar(50), ticket021 varchar(50), po021 varchar(32), seat022status varchar(1), name022 varchar(50), ticket022 varchar(50), po022 varchar(32), seat023status varchar(1), name023 varchar(50), ticket023 varchar(50), po023 varchar(32), seat024status varchar(1), name024 varchar(50), ticket024 varchar(50), po024 varchar(32), seat025status varchar(1), name025 varchar(50), ticket025 varchar(50), po025 varchar(32), seat026status varchar(1), name026 varchar(50), ticket026 varchar(50), po026 varchar(32), seat027status varchar(1), name027 varchar(50), ticket027 varchar(50), po027 varchar(32), seat028status varchar(1), name028 varchar(50), ticket028 varchar(50), po028 varchar(32), seat029status varchar(1), name029 varchar(50), ticket029 varchar(50), po029 varchar(32), seat030status varchar(1), name030 varchar(50), ticket030 varchar(50), po030 varchar(32), seat031status varchar(1), name031 varchar(50), ticket031 varchar(50), po031 varchar(32), seat032status varchar(1), name032 varchar(50), ticket032 varchar(50), po032 varchar(32), seat033status varchar(1), name033 varchar(50), ticket033 varchar(50), po033 varchar(32), seat034status varchar(1), name034 varchar(50), ticket034 varchar(50), po034 varchar(32), seat035status varchar(1), name035 varchar(50), ticket035 varchar(50), po035 varchar(32), seat036status varchar(1), name036 varchar(50), ticket036 varchar(50), po036 varchar(32), seat037status varchar(1), name037 varchar(50), ticket037 varchar(50), po037 varchar(32), seat038status varchar(1), name038 varchar(50), ticket038 varchar(50), po038 varchar(32), seat039status varchar(1), name039 varchar(50), ticket039 varchar(50), po039 varchar(32), seat040status varchar(1), name040 varchar(50), ticket040 varchar(50), po040 varchar(32),  \"seat041status varchar(1), name041 varchar(50), ticket041 varchar(50), po041 varchar(32), seat042status varchar(1), name042 varchar(50), ticket042 varchar(50), po042 varchar(32), seat043status varchar(1), name043 varchar(50), ticket043 varchar(50), po043 varchar(32), seat044status varchar(1), name044 varchar(50), ticket044 varchar(50), po044 varchar(32), seat045status varchar(1), name045 varchar(50), ticket045 varchar(50), po045 varchar(32), seat046status varchar(1), name046 varchar(50), ticket046 varchar(50), po046 varchar(32), seat047status varchar(1), name047 varchar(50), ticket047 varchar(50), po047 varchar(32), seat048status varchar(1), name048 varchar(50), ticket048 varchar(50), po048 varchar(32), seat049status varchar(1), name049 varchar(50), ticket049 varchar(50), po049 varchar(32), seat050status varchar(1), name050 varchar(50), ticket050 varchar(50), po050 varchar(32),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"), foreign  key  (  \"location\")  references \""+schemaName+"\".\"location\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"itemprofl_b\"  (  \"sid\" integer generated by default as identity, \"itemid\"  int, \"row\" varchar(20), length varchar(255), width varchar(255),  \"height\"  varchar(30),  \"weightunit\"  varchar(30),  \"shipmode\"  varchar(30),  \"colour\"  varchar(30),  \"material\"  boolean,  \"madein\"  boolean,  \"sku\"  boolean,  \"saleschannel\"  varchar(5),  \"compareprice\"  varchar(5),  \"customscode\"  varchar(5),  \"pagetitle\"  varchar(5),  \"metadescription\"  varchar(5),  \"urlhandle\"  varchar(5),  \"rating\"  varchar(30),  \"points\"  varchar(30),  \"pointsunit\"  varchar(30),  \"dtstyle\"  varchar(30),  \"ftstyle\"  varchar(20),  \"defaultr\"  varchar(3),  \"defaultc\"  varchar(3),  \"dbname\"  varchar(20),  \"rootdir\"  varchar(35),  \"keyorder\"  varchar(3),  \"margin\"  numeric(14,2),  \"footer\"  numeric(14,2),  \"listbuildc\"  boolean,  \"listbuildv\"  boolean,  \"listbuilde\"  boolean,  \"listbrownc\"  int,  \"listbrownv\"  int,  \"listbrowne\"  int,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\"), foreign key(itemid) references  \""+schemaName+"\".\"item\"(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      log.info("create tables_b done");
	 return "create tables_b done";
      }catch (Exception e) {
       log.severe("create tables_b Exception for "+schemaName+", error "+e.getMessage());
       return null;
      }

     }


	public String  createTables_c(String dbProductName,String schemaName) {
      if(dbProductName == null || dbProductName.isEmpty()){
       dbProductName="hsql";
      }
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }
     // warning- sqlscript may have multiple creates under one quote mark. do not put line feeds in the middle to look nicer
     //aug18 2021 made separate scripts because hsqldb did not support it.
     if(dbProductName.equals("msql")){
      createTablesMsql_c(schemaName);// uses auto-create for identify
      return null;
     }
      try{
      String sqlscript ="";
      sqlscript="create  table if not exists  \""+schemaName+"\".\"address_c\"  (  \"sid\" integer generated by default as identity, \"addrescode\"  varchar(32) not null,  \"addrl1\"  varchar(159),  \"addrl2\"  varchar(159),  \"addrl3\"  varchar(159),  \"city\"  varchar(20),  \"provnstate\"  varchar(20),  \"country\"  varchar(20),  \"pzcode\"  varchar(20),  \"descript\"  varchar(120),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp, primary  key(\"sid\")  ) ";
      Query q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"options_c\"  (  \"sid\" integer generated by default as identity, \"row\"  varchar(2) not null,  \"options01\"  varchar(159),  \"purpose01\"  varchar(159),  \"value01\"  varchar(159),  \"options02\"  varchar(159),  \"purpose02\"  varchar(159),  \"value02\"  varchar(159),  \"options03\"  varchar(159),  \"purpose03\"  varchar(159),  \"value03\"  varchar(159),  \"options04\"  varchar(159),  \"purpose04\"  varchar(159),  \"value04\"  varchar(159),  \"options05\"  varchar(159),  \"purpose05\"  varchar(159),  \"value05\"  varchar(159),  \"options06\"  varchar(159),  \"purpose06\"  varchar(159),  \"value06\"  varchar(159),  \"options07\"  varchar(159),  \"purpose07\"  varchar(159),  \"value07\"  varchar(159),  \"options08\"  varchar(159),  \"purpose08\"  varchar(159),  \"value08\"  varchar(159),  \"options09\"  varchar(159),  \"purpose09\"  varchar(159),  \"value09\"  varchar(159),  \"options10\"  varchar(159),  \"purpose10\"  varchar(159),  \"value10\"  varchar(159),  \"options11\"  varchar(159),  \"purpose11\"  varchar(159),  \"value11\"  varchar(159),  \"options12\"  varchar(159),  \"purpose12\"  varchar(159),  \"value12\"  varchar(159),  \"options13\"  varchar(159),  \"purpose13\"  varchar(159),  \"value13\"  varchar(159),  \"options14\"  varchar(159),  \"purpose14\"  varchar(159),  \"value14\"  varchar(159),  \"options15\"  varchar(159),  \"purpose15\"  varchar(159),  \"value15\"  varchar(159),  \"options16\"  varchar(159),  \"purpose16\"  varchar(159),  \"value16\"  varchar(159),  \"options17\"  varchar(159),  \"purpose17\"  varchar(159),  \"value17\"  varchar(159),  \"options18\"  varchar(159),  \"purpose18\"  varchar(159),  \"value18\"  varchar(159),  \"options19\"  varchar(159),  \"purpose19\"  varchar(159),  \"value19\"  varchar(159),  \"options20\"  varchar(159),  \"purpose20\"  varchar(159),  \"value20\"  varchar(159),  \"options21\"  varchar(159),  \"purpose21\"  varchar(159),  \"value21\"  varchar(159),  \"options22\"  varchar(159),  \"purpose22\"  varchar(159),  \"value22\"  varchar(159),  \"options23\"  varchar(159),  \"purpose23\"  varchar(159),  \"value23\"  varchar(159),  \"options24\"  varchar(159),  \"purpose24\"  varchar(159),  \"value24\"  varchar(159),  \"options25\"  varchar(159),  \"purpose25\"  varchar(159),  \"value25\"  varchar(159),  \"options26\"  varchar(159),  \"purpose26\"  varchar(159),  \"value26\"  varchar(159),  \"options27\"  varchar(159),  \"purpose27\"  varchar(159),  \"value27\"  varchar(159),  \"options28\"  varchar(159),  \"purpose28\"  varchar(159),  \"value28\"  varchar(159),  \"options29\"  varchar(159),  \"purpose29\"  varchar(159),  \"value29\"  varchar(159),  \"options30\"  varchar(159),  \"purpose30\"  varchar(159),  \"value30\"  varchar(159),  \"options31\"  varchar(159),  \"purpose31\"  varchar(159),  \"value31\"  varchar(159),  \"options32\"  varchar(159),  \"purpose32\"  varchar(159),  \"value32\"  varchar(159),  \"options33\"  varchar(159),  \"purpose33\"  varchar(159),  \"value33\"  varchar(159),  \"options34\"  varchar(159),  \"purpose34\"  varchar(159),  \"value34\"  varchar(159),  \"options35\"  varchar(159),  \"purpose35\"  varchar(159),  \"value35\"  varchar(159),  \"options36\"  varchar(159),  \"purpose36\"  varchar(159),  \"value36\"  varchar(159),  \"options37\"  varchar(159),  \"purpose37\"  varchar(159),  \"value37\"  varchar(159),  \"options38\"  varchar(159),  \"purpose38\"  varchar(159),  \"value38\"  varchar(159),  \"options39\"  varchar(159),  \"purpose39\"  varchar(159),  \"value39\"  varchar(159),  \"options40\"  varchar(159),  \"purpose40\"  varchar(159),  \"value40\"  varchar(159),  \"options41\"  varchar(159),  \"purpose41\"  varchar(159),  \"value41\"  varchar(159),  \"options42\"  varchar(159),  \"purpose42\"  varchar(159),  \"value42\"  varchar(159),  \"options43\"  varchar(159),  \"purpose43\"  varchar(159),  \"value43\"  varchar(159),  \"options44\"  varchar(159),  \"purpose44\"  varchar(159),  \"value44\"  varchar(159),  \"options45\"  varchar(159),  \"purpose45\"  varchar(159),  \"value45\"  varchar(159),  \"options46\"  varchar(159),  \"purpose46\"  varchar(159),  \"value46\"  varchar(159),  \"options47\"  varchar(159),  \"purpose47\"  varchar(159),  \"value47\"  varchar(159),  \"options48\"  varchar(159),  \"purpose48\"  varchar(159),  \"value48\"  varchar(159),  \"options49\"  varchar(159),  \"purpose49\"  varchar(159),  \"value49\"  varchar(159),  \"options50\"  varchar(159),  \"purpose50\"  varchar(159),  \"value50\"  varchar(159),  \"options51\"  varchar(159),  \"purpose51\"  varchar(159),  \"value51\"  varchar(159),  \"options52\"  varchar(159),  \"purpose52\"  varchar(159),  \"value52\"  varchar(159),  \"options53\"  varchar(159),  \"purpose53\"  varchar(159),  \"value53\"  varchar(159),  \"options54\"  varchar(159),  \"purpose54\"  varchar(159),  \"value54\"  varchar(159),  \"options55\"  varchar(159),  \"purpose55\"  varchar(159),  \"value55\"  varchar(159),  \"options56\"  varchar(159),  \"purpose56\"  varchar(159),  \"value56\"  varchar(159),  \"options57\"  varchar(159),  \"purpose57\"  varchar(159),  \"value57\"  varchar(159),  \"options58\"  varchar(159),  \"purpose58\"  varchar(159),  \"value58\"  varchar(159),  \"options59\"  varchar(159),  \"purpose59\"  varchar(159),  \"value59\"  varchar(159),  \"options60\"  varchar(159),  \"purpose60\"  varchar(159),  \"value60\"  varchar(159),  \"options61\"  varchar(159),  \"purpose61\"  varchar(159),  \"value61\"  varchar(159),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\"), unique (\"row\",\"owner2\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"client_c\"  (  \"sid\" integer generated by default as identity, \"clientversion\"  varchar(5) not null,  \"serialnum\"  varchar(15),  \"enterprisecompanyna\"  varchar(35),  \"descript\"  varchar(120),  \"addrl1\"  varchar(35),  \"addrl2\"  varchar(35),  \"addrl3\"  varchar(35),  \"city\"  varchar(20),  \"provnstate\"  varchar(20),  \"countryname\"  varchar(20),  \"pzcode\"  varchar(20),  \"phoneo\"  varchar(30),  \"phoneh\"  varchar(25),  \"phonec\"  varchar(25),  \"phonex\"  varchar(30),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(60),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"enterprisecompcode\"  varchar(40),  \"enterprisecompsize\"  varchar(15),  \"barcsize\"  varchar(12),  \"level\"  boolean,  \"poskipp\"  varchar(10),  \"looseit\"  boolean,  \"jobskip\"  varchar(10),  \"cartonfl\"  boolean,  \"picklist\"  boolean,  \"proddesc\"  varchar(15),  \"prodcode\"  varchar(12),  \"njob\"  varchar(15),  \"nmateria\"  varchar(15),  \"nactivity\"  varchar(15),  \"nbutt\"  varchar(15),  \"ncustome\"  varchar(15),  \"ncontact\"  varchar(15),  \"nvendor\"  varchar(15),  \"nemployee\"  varchar(15),  \"nschedule\"  varchar(15),  \"nreject\"  varchar(15),  \"nreturn\"  varchar(15),  \"ncode\"  varchar(15),  \"manufid\"  varchar(20),  \"bartype\"  varchar(4),  \"cadtype\"  varchar(4),  \"cartype\"  varchar(4),  \"shitype\"  varchar(4),  \"reptype\"  varchar(4),  \"loctype\"  varchar(4),  \"barcol\"  boolean,  \"carcol\"  boolean,  \"cadcol\"  boolean,  \"shicol\"  boolean,  \"repcol\"  boolean,  \"loccol\"  boolean,  \"altseria\"  boolean,  \"countrycode\"  varchar(3),  \"naltseri\"  varchar(12),  \"scrcolor\"  varchar(255),  \"hilcolor\"  varchar(255),  \"textcolor\"  varchar(255),  \"baccolor\"  varchar(255),  \"datetype\"  varchar(7), \"currcode\"  varchar(3),  \"prinbar\"  boolean,  \"barprint\"  varchar(4),  \"carprint\"  varchar(4),  \"cadprint\"  varchar(4),  \"locprint\"  varchar(4),  \"shiprint\"  varchar(4),  \"repprint\"  varchar(4),  \"barprty\"  varchar(4),  \"repprty\"  varchar(4),  \"carprty\"  varchar(4),  \"cadprty\"  varchar(4),  \"shiprty\"  varchar(4),  \"locprty\"  varchar(4),  \"altselen\"  int,  \"custolen\"  int,  \"carcsize\"  varchar(12),  \"cadcsize\"  varchar(12),  \"shicsize\"  varchar(12),  \"repcsize\"  varchar(255),  \"loccsize\"  varchar(12),  \"cs\"  varchar(15),  \"nconftyp\"  varchar(12),  \"nlocatio\"  varchar(12),  \"ndivcode\"  varchar(12),  \"ndepcode\"  varchar(12),  \"naddcode\"  varchar(12),  \"nfloor\"  varchar(12),  \"nroom\"  varchar(12),  \"nrack\"  varchar(12),  \"menutype\"  varchar(3),  \"padtype\"  varchar(4),  \"nrate1ta\"  varchar(12),  \"nrate2ta\"  varchar(12),  \"defconft\" varchar(8)  ,  \"beepsou\"  boolean,  \"confirm\"  boolean,  \"linefeed\"  boolean,  \"refbaradj\"  int,  \"shibaradj\"  int,  \"cusbaradj\"  int,  \"locbaradj\"  int,  \"carbaradj\"  int,  \"ncorder\"  varchar(12),  \"nsperson\"  varchar(12),  \"prompti\"  boolean,  \"customerquotenb\"  varchar(15),  \"customerquoten\"  int,  \"customerquotena\"  varchar(15),  \"customerordernb\"  varchar(15),  \"customerordern\"  int,  \"customerorderna\"  varchar(15),  \"vendorordernb\"  varchar(15),  \"vendorordern\"  int,  \"vendororderna\"  varchar(15),\"jobnb\"  varchar(15),  \"jobn\"  int,  \"jobna\"  varchar(15),  \"customerinvoicenb\"  varchar(15),  \"customerinvoicen\"  int,  \"customerinvoicena\"  varchar(15),  \"vendorinvoicenb\"  varchar(15),  \"vendorinvoicen\"  int,  \"vendorinvoicena\"  varchar(15),  \"customerpicknb\"  varchar(15),  \"customerpickn\"  int,  \"customerpickna\"  varchar(15),  \"vendorquotenb\"  varchar(15),  \"vendorquoten\"  int,  \"vendorquotena\"  varchar(15),  \"customerpaymntnb\"  varchar(15),  \"customerpaymntn\"  int,  \"customerpaymntna\"  varchar(15),  \"vendorpaymntnb\"  varchar(15),  \"vendorpaymntn\"  int,  \"vendorpaymntna\"  varchar(15),  \"vendorchqnb\"  varchar(15),  \"vendorchqn\"  int,  \"vendorchqna\"  varchar(15),  \"tasknb\"  varchar(15),  \"taskn\"  int,  \"taskna\"  varchar(15),  \"arseqb\"  varchar(15),  \"arseq\"  int,  \"arseqa\"  varchar(15),  \"apseqb\"  varchar(15),  \"apseq\"  int,  \"apseqa\"  varchar(15),  \"glseqb\"  varchar(15),  \"glseq\"  int,  \"glseqa\"  varchar(15),  \"paseqb\"  varchar(15),  \"paseq\"  int,  \"paseqa\"  varchar(15),  \"icseqb\"  varchar(15),  \"icseq\"  int,  \"icseqa\"  varchar(15),  \"joseqb\"  varchar(15),  \"joseq\"  int,  \"joseqa\"  varchar(15),  \"sglentry\"  varchar(15),  \"tax1code\"  varchar(25),  \"tax2code\"  varchar(25),  \"tax3code\"  varchar(25),  \"ndecimal\"  int,  \"edipassw\"  varchar(10),  \"intpassw\"  varchar(10),  \"inrpassw\"  varchar(10),  \"imlpassw\"  varchar(10),  \"rmlpassw\"  varchar(10),  \"lmlpassw\"  varchar(10),  \"hospassw\"  varchar(10),  \"lanpassw\"  varchar(10),  \"wanpassw\"  varchar(10),  \"ashostid\"  varchar(35),  \"hdstyle\"  varchar(30),  \"mtstyle\"  varchar(30),  \"ststyle\"  varchar(30),  \"dtstyle\"  varchar(30),  \"ftstyle\"  varchar(30),  \"defaultr\"  varchar(15),  \"defaultc\"  varchar(3),  \"dbname\"  varchar(35),  \"rootdir\"  varchar(60),  \"keyorder\"  varchar(3),  \"currbusdat\"  timestamp,  \"lastbusdat\"  timestamp,  \"currcaldat\"  timestamp,  \"lastcaldat\"  timestamp,  \"preprocess\"  boolean,  \"margin\"  int,  \"footer\"  int,  \"lastuser\"  varchar(10),  \"listbuildc\"  boolean,  \"listbuildv\"  boolean,  \"listbuilde\"  boolean,  \"listbrownc\"  int,  \"listbrownv\"  int,  \"listbrowne\"  int,  \"smtpserver\"  varchar(30),  \"smtpuser\"  varchar(35),  \"smtppass\"  varchar(20),  \"pop3server\"  varchar(30),  \"pop3user\"  varchar(35),  \"pop3pass\"  varchar(20),  \"smatcode\"  varchar(15),  \"fyrend\"  timestamp,  \"fperiods\"  int,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  \"employeeordernb\"  varchar(15),  \"employeeordern\"  int,  \"employeeorderna\"  varchar(15),  \"licensetype\"  varchar(15),\"licensestart\"  timestamp,\"licenseend\"  timestamp, \"apiclientid\"  varchar(255),\"apiclientsecret\"  varchar(12000),  \"currsymb\"  varchar(4),  primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"department_c\"  (  \"sid\" integer generated by default as identity, \"depcode\"  varchar(32) not null,  \"descript\"  varchar(120),  \"glprefix\" varchar(20), \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"company_c\"  (  \"sid\" integer generated by default as identity, \"companycode\"  varchar(32) not null,  \"descript\"  varchar(120),  \"legalname\"  varchar(60),  \"mailtocode\" int , \"glprefix\" varchar(20), \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(\"sid\"),  foreign  key  ( \"mailtocode\"  )  references \""+schemaName+"\".\"address_c\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"control_c\"  (  \"sid\" integer generated by default as identity, \"controlcode\"  varchar(32) not null,  \"descript\"  varchar(120),  \"typeofcontrol\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"division_c\"  (  \"sid\" integer generated by default as identity, \"divcode\"  varchar(32) not null, \"descript\"  varchar(120),  \"glprefix\" varchar(20), \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"location_c\"  (  \"sid\" integer generated by default as identity, \"location\"  varchar(32) not null,  \"descript\"  varchar(120),  \"companycode\"  int  , \"addresscode\"  int  ,  \"floor\"  varchar(25),  \"room\"  varchar(25),  \"rack\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"exclude\"  boolean,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"companycode\"  )  references \""+schemaName+"\".\"company_c\"  (  \"sid\"  ),  foreign  key  (  \"addresscode\"  )  references \""+schemaName+"\".\"address_c\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"residency_c\"  (  \"sid\" integer generated by default as identity, \"residency\"  varchar(32) not null,  \"descript\"  varchar(120),  \"municipality\"  varchar(20),  \"province\"  varchar(20),  \"countryname\"  varchar(20),  \"exclude\"  boolean,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"account_c\"  (  \"sid\" integer generated by default as identity, \"account\"  varchar(20) not null  ,  \"descript\"  varchar(120),  \"category\"  varchar(20),  \"type\"  varchar(12),  \"budget\"  numeric(14,2),  \"actual\"  numeric(14,2),  \"actualn\"  numeric(14,2),  \"prevbudg\"  numeric(14,2),  \"prevact\"  numeric(14,2),  \"sequence\"  int,  \"child\"  varchar(20),  \"parent\"  varchar(20),  \"rollupq\"  int,  \"companycode\"  int  ,  \"depcode\"  int  ,  \"divcode\"  int  ,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"currency\"  varchar(3),  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"p0\"  numeric(14,2),  \"p1\"  numeric(14,2),  \"p2\"  numeric(14,2),  \"p3\"  numeric(14,2),  \"p4\"  numeric(14,2),  \"p5\"  numeric(14,2),  \"p6\"  numeric(14,2),  \"p7\"  numeric(14,2),  \"p8\"  numeric(14,2),  \"p9\"  numeric(14,2),  \"p10\"  numeric(14,2),  \"p11\"  numeric(14,2),  \"p12\"  numeric(14,2),  \"p13\"  numeric(14,2),  \"p14\"  numeric(14,2),  \"p8t\"  numeric(14,2),  \"p9t\"  numeric(14,2),  \"p10t\"  numeric(14,2),  \"p11t\"  numeric(14,2),  primary  key  (  \"sid\"  ),  foreign  key  (  \"companycode\"  )  references \""+schemaName+"\".\"company_c\"  (  \"sid\"  ),  foreign  key  (  \"depcode\"  )  references \""+schemaName+"\".\"department_c\"  (  \"sid\"  ),  foreign  key  (  \"divcode\"  )  references \""+schemaName+"\".\"division_c\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"customer_c\"  (  \"sid\" integer generated by default as identity, \"customer\"  varchar(32) not null,  \"descript\"  varchar(120),  \"title\"  varchar(12),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"customerascompanyname\"  varchar(25),  \"custtotl\"  numeric(14,2),  \"custtqty\"  numeric(14,2), \"companycode\" int,  \"location\"  int  ,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"custtax1\"  varchar(25),  \"custtax2\"  varchar(25),  \"custtax3\"  varchar(25),  \"phoneo\"  varchar(20),  \"phoneh\"  varchar(16),  \"phonec\"  varchar(16),  \"phonex\"  varchar(20),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"dob\" timestamp, \"placeofbirth\" varchar(60), \"sex\" varchar(1), \"age\" int, \"cusrtotl\"  numeric(14,2),  \"cusrtqty\"  numeric(14,2),  \"cusmtotl\"  numeric(14,2),  \"cusdtotl\"  numeric(14,2),  \"lastorder\"  varchar(20),  \"lastinvoic\"  varchar(20),  \"lastpaymnq\"  numeric(14,2),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"shiplabel\"  boolean,  \"type\"  varchar(10),  \"defaultglac\"  int,  \"integrset\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"totlpaid\"  numeric(14,2),  \"contacted\"  timestamp,  \"bywho\"  varchar(20),  \"nxtcontact\"  timestamp,  \"via\"  varchar(11),  \"keywords\"  varchar(30),  \"notes\"  varchar(159),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"  ),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign  key  (  \"companycode\")  references \""+schemaName+"\".\"company_c(  \"sid\"  ),  foreign  key  (  \"location\"  )  references \""+schemaName+"\".\"location_c\"  (  \"sid\" ),  foreign  key  (  \"defaultglac\"  )  references \""+schemaName+"\".\"account_c\"  (  \"sid\" ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address_c\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendor_c\"  (  \"sid\" integer generated by default as identity, \"vendor\"  varchar(32) not null,  \"descript\"  varchar(60),  \"title\"  varchar(20),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"vendorascompanyname\"  varchar(25),  \"vendtotl\"  numeric(14,2),  \"vendtqty\"  numeric(14,2), \"companycode\" int  ,  \"location\"  int  ,  \"mailtocode\"  int  ,  \"phoneo\"  varchar(30),  \"phoneh\"  varchar(25),  \"phonec\"  varchar(25),  \"phonex\"  varchar(30),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"venrtotl\"  numeric(14,2),  \"venrtqty\"  numeric(14,2),  \"venmtotl\"  numeric(14,2),  \"venddtotl\"  numeric(14,2),  \"lastquote\"  varchar(20),  \"lastorder\"  varchar(20),  \"lastinvoic\"  varchar(20),  \"lastpaymq\"  numeric(14,2),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"shiplabel\"  boolean,  \"type\"  varchar(10),  \"shiptocode\"  int  ,  \"defaultglac\"  int,  \"integrset\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"totlpaid\"  numeric(14,2),  \"contacted\"  timestamp,  \"bywho\"  varchar(20),  \"keywords\"  varchar(30),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign  key  (  \"companycode\")  references \""+schemaName+"\".\"company_c(  \"sid\"  ),  foreign  key  (  \"location\"  )  references \""+schemaName+"\".\"location_c\"  (  \"sid\" ),  foreign  key  (  \"defaultglac\"  )  references \""+schemaName+"\".\"account_c\"  (  \"sid\" ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address_c\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"employee_c\"  (  \"sid\" integer generated by default as identity, \"employee\"  varchar(32) not null,  \"descript\"  varchar(120),  \"title\"  varchar(20),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"companycode\"  int  ,  \"empltotl\"  numeric(14,2),  \"empltqty\"  numeric(14,2),  \"divcode\"  int  ,  \"depcode\"  int  ,  \"location\"  int  ,  \"residency\"  int  ,  \"mailtocode\"  int  ,  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"custtax1\"  varchar(25),  \"custtax2\"  varchar(25),  \"custtax3\"  varchar(25),  \"phoneo\"  varchar(30),  \"phoneh\"  varchar(25),  \"phonec\"  varchar(25),  \"phonex\"  varchar(30),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"emprtotl\"  numeric(14,2),  \"emprtqty\"  numeric(14,2),  \"empmtotl\"  numeric(14,2),  \"empdtotl\"  numeric(14,2),  \"lastquote\"  varchar(20),  \"lastorder\"  varchar(20),  \"lastinvoic\"  varchar(20),  \"lastpaymq\"  numeric(14,2),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"shiplabel\"  boolean,  \"shiptocode\"  int  ,  \"type\"  varchar(12),  \"defaultglac\"  int,  \"integrset\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"contacted\"  timestamp,  \"bywho\"  varchar(20),  \"keywords\"  varchar(30),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  (  \"depcode\"  )  references \""+schemaName+"\".\"department_c\"  (  \"sid\"  ),  foreign  key  (  \"divcode\"  )  references \""+schemaName+"\".\"division_c\"  (  \"sid\"  ),  foreign  key  (  \"companycode\"  )  references \""+schemaName+"\".\"company_c\"  (  \"sid\"  ),  foreign  key  ( \"mailtocode\"  )  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign  key  (  \"location\"  )  references \""+schemaName+"\".\"location_c\"  (  \"sid\"  ),  foreign  key  (  \"defaultglac\"  )  references \""+schemaName+"\".\"account_c\"  (  \"sid\" ),  foreign  key  (  \"residency\")  references \""+schemaName+"\".\"residency_c\"  (  \"sid\"  ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address_c\"(  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vcontact_c\"  (  \"sid\" integer generated by default as identity, \"contact\"  varchar(20)  not null ,  \"vendor\"  int,  \"title\"  varchar(20),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"phoneo\"  varchar(25),  \"phoneh\"  varchar(25),  \"phonec\"  varchar(25),  \"phonex\"  varchar(20),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"location\"  int,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"printsta\"  int,  \"shiplabel\"  boolean,  \"type\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"keywords\"  varchar(30),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign  key  (  \"location\")  references \""+schemaName+"\".\"location_c(  \"sid\"  ),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"ccontact_c\"  (  \"sid\" integer generated by default as identity, \"contact\"  varchar(32) not null,  \"customer\"  int,  \"title\"  varchar(20),  \"jobtitle\"  varchar(20),  \"lastname\"  varchar(25),  \"firstname\"  varchar(25),  \"middlenam\"  varchar(20),  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"custtax1\"  varchar(25),  \"custtax2\"  varchar(25),  \"custtax3\"  varchar(25),  \"phoneo\"  varchar(16),  \"phoneh\"  varchar(16),  \"phonec\"  varchar(16),  \"phonex\"  varchar(20),  \"lanaddr\"  varchar(35),  \"wanaddr\"  varchar(35),  \"lmailaddr\"  varchar(35),  \"imailaddr\"  varchar(35),  \"rmailaddr\"  varchar(35),  \"intaddr\"  varchar(35),  \"inraddr\"  varchar(35),  \"location\"  int,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"shiplabel\"  boolean,  \"type\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"keywords\"  varchar(30),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address_c\"(  \"sid\"  )  ,  foreign  key  (  \"location\")  references \""+schemaName+"\".\"location_c(  \"sid\"  )  ,  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"perioddates_c\"  (  \"sid\" integer generated by default as identity, \"period\"  varchar(2) not null,  \"descript\"  varchar(120),  \"startdate\"  timestamp,  \"enddate\"  timestamp,  \"startofweek\" int, \"startofbweek\" int, \"endofbweek\" int, \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"acperiod_c\"  (  \"sid\" integer generated by default as identity, \"rowid\" varchar(2) not null, \"currperiod\"  varchar(2),  \"descript\"  varchar(120),  \"currbusdate\"  timestamp,  \"currcaldate\"  timestamp,  \"currlocaldate\"  timestamp,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary key(\"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"wageearner_c\"  (  \"sid\" integer generated by default as identity, \"wageearnerid\"  varchar(32) not null,  \"employee\"  int  ,  \"sin\"  varchar(20),  \"birthdt\"  timestamp,  \"fedclaim\"  numeric(14,2),  \"provclaim\"  numeric(14,2),  \"payyrfreq\"  int,  \"payperiod\"  int,  \"wcb\"  boolean,  \"wcbytd\"  numeric(14,2),  \"emplinsur\"  boolean,  \"insytd\"  numeric(14,2),  \"vacretain\"  boolean,  \"vacatonyt\"  numeric(14,2),  \"wageunit\"  varchar(20),  \"wagerate\"  numeric(14,2),  \"otimeunit\"  varchar(20),  \"otimerate\"  numeric(14,2),  \"wageunits\"  numeric(14,2),  \"otimunits\"  numeric(14,2),  \"wageout\"  numeric(14,2),  \"ovtimeout\"  numeric(14,2),  \"salaryout\"  numeric(14,2),  \"commission\"  numeric(14,2),  \"benefits\"  numeric(14,2),  \"vacation\"  numeric(14,2),  \"vacpayout\"  numeric(14,2),  \"advance\"  numeric(14,2),  \"pension\"  numeric(14,2),  \"aftertax\"  boolean,  \"uniondues\"  numeric(14,2),  \"medical\"  numeric(14,2),  \"fincometx\"  numeric(14,2),  \"pincometx\"  numeric(14,2),  \"thispaya\"  numeric(14,2),  \"lastpaya\"  numeric(14,2),  \"payytd\"  numeric(14,2),  \"fpensiytd\"  numeric(14,2),  \"ppensiytd\"  numeric(14,2),  \"itaxytd\"  numeric(14,2),  \"ptaxytd\"  numeric(14,2),  \"grpayytd\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"arthatbl_c\"  (  \"sid\" integer generated by default as identity, \"usage\"  varchar(32) not null,  \"wcbpercnt\"  numeric(14,2),  \"insfactor\"  numeric(14,2),  \"vacatonrate\"  numeric(14,2),  \"pensionmax\"  numeric(14,2),  \"wcbmax\"  numeric(14,2),  \"insmax\"  numeric(14,2),  \"itaxlv0rate\"  numeric(14,2),  \"itaxlv1rate\"  numeric(14,2),  \"itaxlv2rate\"  numeric(14,2),  \"itaxlv3rate\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rollupgroup_c\"  (  \"sid\" integer generated by default as identity, \"groupid\"  varchar(32) not null,  \"descript\"  varchar(120),  \"type\"  varchar(10),  \"currpw\"  varchar(20),  \"expiry\"  timestamp,  \"currency\"  varchar(3),  \"period0b\"  numeric(14,2),  \"period0\"  numeric(14,2),  \"periodtotalsb\"  numeric(14,2),  \"periodtotals\" numeric(14,2),  \"period1budget\"  numeric(14,2),  \"period1actual\"  numeric(14,2),  \"period2b\"  numeric(14,2),  \"period2\"   numeric(14,2),  \"period3b\"  numeric(14,2),  \"period3\"  numeric(14,2),  \"period4b\"  numeric(14,2),  \"period4\"  numeric(14,2),  \"period5b\"  numeric(14,2),  \"period5\"  numeric(14,2),  \"period6b\"  numeric(14,2),  \"period6\"  numeric(14,2),  \"period7b\"  numeric(14,2),  \"period7\"  numeric(14,2),  \"period8b\"  numeric(14,2),  \"period8\"  numeric(14,2),  \"period9b\"  numeric(14,2),  \"period9\"  numeric(14,2),  \"period10b\"  numeric(14,2),  \"period10\"  numeric(14,2),  \"period11b\"  numeric(14,2),  \"period11\"  numeric(14,2),  \"period12b\"  numeric(14,2),  \"period12\"  numeric(14,2),  \"periodnb\"  numeric(14,2),  \"periodn\"  numeric(14,2),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"membersgroup_c\"  (  \"sid\" integer generated by default as identity, \"groupid\"  varchar(32) not null,  \"descript\"  varchar(120),  \"quantity\" numeric(14,2),  \"mode\"  boolean,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"arthahist_c\"  (  \"sid\" integer generated by default as identity, \"wageearner\"  varchar(32) not null,  \"sin\"  varchar(12),  \"period\"  int,  \"month\"  int,  \"ccyy\"  int,  \"vacation\"  numeric(14,2),  \"wage\"  numeric(14,2),  \"overtime\"  numeric(14,2),  \"salary\"  numeric(14,2),  \"commission\"  numeric(14,2),  \"benefit\"  numeric(14,2),  \"fincometx\"  numeric(14,2),  \"pincometx\"  numeric(14,2),  \"wcbout\"  numeric(14,2),  \"emplinsur\"  numeric(14,2),  \"vacpayout\"  numeric(14,2),  \"advance\"  numeric(14,2),  \"fpensobtx\"  numeric(14,2),  \"fpensoatx\"  numeric(14,2),  \"uniondues\"  numeric(14,2),  \"medical\"  numeric(14,2),  \"payamt\"  numeric(14,2),  \"notes\"  varchar(60),  \"notes2\"  varchar(120),  \"chqnumber\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"glentries_c\"  (  \"sid\" integer generated by default as identity, \"glentryno\"  varchar(32) not null,  \"descript\"  varchar(120),  \"refcode\"  varchar(20),  \"period\"  int,  \"postdate\"  timestamp,  \"calendardt\"  timestamp,  \"depcode\"  int,  \"divcode\"  int,  \"account\"  int,  \"tdebitamt\"  numeric(14,2),  \"tcreditamt\"  numeric(14,2),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  , foreign  key  ( \"period\")  references \""+schemaName+"\".\"perioddates_c (  \"sid\"),  foreign  key  ( \"account\")  references \""+schemaName+"\".\"account_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"gentriesdetails_c\"  (  \"sid\" integer generated by default as identity, \"glentrysidno\"  int  not null ,  \"line\"  int,  \"depcode\"  int,  \"divcode\"  int,  \"account\"  int,  \"debitamt\"  numeric(14,2),  \"creditamt\"  numeric(14,2),  \"linetotl\"  numeric(14,2), \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(  \"sid\"), foreign  key  (  \"glentrysidno\")  references \""+schemaName+"\".\"glentries_c\"  (  \"sid\") ,  foreign  key  ( \"account\")  references \""+schemaName+"\".\"account_c\"  (  \"sid\")   )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"holiday_c\"  (  \"sid\" integer generated by default as identity, \"sholiday\"  varchar(32) not null,  \"holiday\"  timestamp,  \"descript\"  varchar(120),  \"type\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"employee\"  int  ,  \"residency\"  int  ,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  \"residency\")  references \""+schemaName+"\".\"residency_c\"  (  \"sid\"  ),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"journal_c\"  (  \"sid\" integer generated by default as identity, \"spostdate\"  varchar(25) not null,  \"postdate\"  timestamp,  \"calendardt\"  timestamp,  \"jrnltype\"  varchar(12),  \"jnlseqb\"  varchar(15),  \"jnlseq\"  int,  \"jnlseqs\"  varchar(15),  \"period\"  int,  \"account\"  varchar(20),  \"debit\"  numeric(14,2),  \"credit\"  numeric(14,2),  \"xreference\"  varchar(20),  \"descript\"  varchar(120),  \"statusfl\"  int,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cjournal_c\"  (  \"sid\" integer generated by default as identity, \"spostdate\"  varchar(25) not null,  \"postdate\"  timestamp,  \"calendardt\"  timestamp,  \"jrnltype\"  varchar(12),  \"jnlseqb\"  varchar(15),  \"jnlseq\"  int,  \"jnlseqs\"  varchar(15),  \"period\"  int,  \"control\"  varchar(20),  \"debit\"  numeric(14,2),  \"credit\"  numeric(14,2),  \"xreference\"  varchar(20),  \"descript\"  varchar(120),  \"statusfl\"  int,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"jjournal_c\"  (  \"sid\" integer generated by default as identity, \"spostdate\"  varchar(25) not null,  \"postdate\"  timestamp,  \"calendardt\"  timestamp,  \"jrnltype\"  varchar(12),  \"jnlseqb\"  varchar(15),  \"jnlseq\"  int,  \"jnlseqs\"  varchar(15),  \"period\"  int,  \"job\"  varchar(20),  \"debit\"  numeric(14,2),  \"credit\"  numeric(14,2),  \"xreference\"  varchar(20),  \"descript\"  varchar(120),  \"statusfl\"  int,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"item_c\"  (  \"sid\" integer generated by default as identity, \"matcode\"  varchar(32) not null,  \"quantity\"  numeric(14,2),  \"descript\"  varchar(120),  \"dateadded\"  timestamp,  \" source1\"  varchar(35),  \"source2\"  varchar(35),  \"upccode\"  varchar(25),  \"cost\"  numeric(14,2),  \"replcost\"  numeric(14,2),  \"selprice\"  numeric(14,2),  \"spricold\"  numeric(14,2),  \"spricnew\"  numeric(14,2),  \"spriceffdt\"  timestamp,  \"shipcode\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"misccode1\"  varchar(25),  \"misccode2\"  varchar(25),  \"qtylevel1\"  numeric(14,2),  \"unit\"  varchar(12),  \"caseqty\"  numeric(14,2),  \"type\"  varchar(12),  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"aliascode\"  varchar(25),  \"parentcode\"  int  ,  \"avgprice\"  numeric(14,2),  \"avgcost\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"subcodesn\"  varchar(35),  \"subcodesn2\" varchar(35),  \"subcodesn3\" varchar(35),  \"cuordqty\"  numeric(14,2),  \"venorqty\"  numeric(14,2),  \"cupicqty\"  numeric(14,2),  \"venpiqty\"  numeric(14,2),  \"cuinvqty\"  numeric(14,2),  \"cushiqty\"  numeric(14,2),  \"venshqty\"  numeric(14,2),  \"effdate\"  timestamp,  \"integrset\"  varchar(20),  \"notes\"  varchar(4096000),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"location\"  int  ,  \"barupc\"  varchar(30),  \"dateexpiry\"  timestamp,  \"datetorenew\"  timestamp,  primary  key  (  \"sid\"), foreign  key  (  \"parentcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\")  , foreign  key  (  \"location\"  )  references \""+schemaName+"\".\"location_c\"  (  \"sid\" ) )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"activity_c\"  (  \"sid\" integer generated by default as identity, \"activitycode\"  varchar(32) not null,  \"quantity\"  numeric(14,2),  \"descript\"  varchar(120),  \"date\"  timestamp,  \"source1\"  varchar(35),  \"source2\"  varchar(35),  \"upccode\"  varchar(25),  \"cost\"  numeric(14,2),  \"replcost\"  numeric(14,2),  \"selprice\"  numeric(14,2),  \"spricold\"  numeric(14,2),  \"spricnew\"  numeric(14,2),  \"spriceffdt\"  timestamp,  \"shipcode\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"misccode1\"  varchar(25),  \"misccode2\"  varchar(25),  \"qtylevel1\"  numeric(14,2),  \"unit\"  varchar(12),  \"caseqty\"  numeric(14,2),  \"type\"  varchar(12),  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"aliascode\"  varchar(25),  \"parentcode\"  int  ,  \"avgprice\"  numeric(14,2),  \"avgcost\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"subcodesn\"  varchar(35),  \"subcodesn2\" varchar(35),  \"subcodesn3\" varchar(35),  \"cuordqty\"  numeric(14,2),  \"venorqty\"  numeric(14,2),  \"cupicqty\"  numeric(14,2),  \"venpiqty\"  numeric(14,2),  \"cuinvqty\"  numeric(14,2),  \"cushiqty\"  numeric(14,2),  \"venshqty\"  numeric(14,2),  \"effdate\"  timestamp,  \"integrset\"  varchar(20),  \"notes\"  varchar(60),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barupc\"  varchar(30),  primary  key  (  \"sid\"), foreign  key  (  \"parentcode\")  references \""+schemaName+"\".\"activity_c\"  (  \"sid\")   )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"schedule_c\"  (  \"sid\" integer generated by default as identity, \"todo\"  varchar(35) not null,  \"descript\"  varchar(120),  \"employee\"  int  ,  \"ssdatet\"  varchar(30),  \"activitycode\"  int  ,  \"location\"  int  ,  \"sdatet\"  timestamp,  \"durationh\"  int,  \"durationm\"  int,  \"stimeh\"  int,  \"stimem\"  int,  \"stimeampm\"  boolean,  \"edatet\"  timestamp,  \"priority\"  boolean,  \"percntdone\"  numeric(14,2),  \"vendor\"  int  ,  \"vontact\"  int  ,  \"customer\"  int ,  \"type\"  varchar(20),  \"mailtocode\"  int  ,  \"otheremplo\"  int,  \"repeatf\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"privateind\"  boolean,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90), \"mgroup\" int ,  primary  key  (  \"sid\" ),  foreign  key  (  \"activitycode\")  references \""+schemaName+"\".\"activity_c\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  ),  foreign  key  (  \"mgroup\"  )  references \""+schemaName+"\".\"membersgroup_c\"  (  \"sid\"  ),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\"),  foreign  key  ( \"mailtocode\")  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign key (\"location\")  references \""+schemaName+"\".\"location_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();

      sqlscript="create  table if not exists  \""+schemaName+"\".\"scheduledetails_c\"  (  \"sid\" integer generated by default as identity, \"schedulesidno\"  int  not null ,  \"line\"  int,  \"employee\"  int,  \"vendor\"  int,  \"customer\"  int,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(  \"sid\"), foreign  key  (  \"schedulesidno\")  references \""+schemaName+"\".\"schedule_c\"  (  \"sid\") ,  foreign  key  ( \"employee\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\")   ,  foreign  key  ( \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\")   ,  foreign  key  ( \"customer\")  references \""+schemaName+"\".\"customer_c\"  (  \"sid\")   )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"user_c\"  (  \"sid\" integer generated by default as identity, \"id\"  varchar(60) not null,  \"client\"  int  ,  \"employee\"  int  ,  \"vendor\"  int  ,  \"customer\"  int  ,  \"otherid\"  varchar(60),  \"alevel\"  varchar(12),  \"blevel\"  varchar(12),  \"currpw\"  varchar(40) not null,  \"expiry\"  timestamp,  \"oldpw\"  varchar(40),  \"temporarypassword\"  boolean,  \"passwordhash\"  varbinary(1000000),  \"activationkey\" varchar(60),  \"restrict1\"  varchar(20),  \"restrict2\"  varchar(20),  \"restrict3\"  varchar(20),  \"allow1\"  varchar(20),  \"allow2\"  varchar(20),  \"allow3\"  varchar(20),  \"maxproflrow\" varchar(20), cproflrow varchar(20),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"ucurrcalda\"  timestamp,  \"preprocess\"  boolean,  \"notes\"  varchar(60),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),\"signature\" varchar(1200),  primary  key  (  \"sid\"),  foreign  key  (  \"client\"  )  references \""+schemaName+"\".\"client_c\"  (  \"sid\"  ),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  ),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\")  )";
      if(dbProductName.equals("psql")){
       sqlscript="create  table if not exists  \""+schemaName+"\".\"user_c\"  (  \"sid\" integer generated by default as identity, \"id\"  varchar(60) not null,  \"client\"  int  ,  \"employee\"  int  ,  \"vendor\"  int  ,  \"customer\"  int  ,  \"otherid\"  varchar(60),  \"alevel\"  varchar(12),  \"blevel\"  varchar(12),  \"currpw\"  varchar(40) not null,  \"expiry\"  timestamp,  \"oldpw\"  varchar(40),  \"temporarypassword\"  boolean,  \"passwordhash\"  bytea,  \"activationkey\" varchar(60),  \"restrict1\"  varchar(20),  \"restrict2\"  varchar(20),  \"restrict3\"  varchar(20),  \"allow1\"  varchar(20),  \"allow2\"  varchar(20),  \"allow3\"  varchar(20),  \"maxproflrow\" varchar(20), cproflrow varchar(20),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"ucurrcalda\"  timestamp,  \"preprocess\"  boolean,  \"notes\"  varchar(60),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),\"signature\" varchar(1200),  primary  key  (  \"sid\"),  foreign  key  (  \"client\"  )  references \""+schemaName+"\".\"client_c\"  (  \"sid\"  ),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  ),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\")  )";
      }
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"userprofl_c\"  (  \"sid\" integer generated by default as identity, \"logonid\"  int, \"row\" varchar(20),\"option\" varchar(255), \"selectvalue\" varchar(255),  \"scrcolor\"  varchar(30),  \"hilcolor\"  varchar(30),  \"textcolor\"  varchar(30),  \"baccolor\"  varchar(30),  \"beepsou\"  boolean,  \"confirm\"  boolean,  \"prompti\"  boolean,  \"p1\"  varchar(5),  \"p2\"  varchar(5),  \"p3\"  varchar(5),  \"p4\"  varchar(5),  \"p5\"  varchar(5),  \"p6\"  varchar(5),  \"mtstyle\"  varchar(30),  \"ststyle\"  varchar(30),  \"dtstyle\"  varchar(30),  \"ftstyle\"  varchar(30),  \"defaultr\"  varchar(20),  \"defaultc\"  varchar(3),  \"dbname\"  varchar(20),  \"rootdir\"  varchar(35),  \"keyorder\"  varchar(3),  \"margin\"  numeric(14,2),  \"footer\"  numeric(14,2),  \"listbuildc\"  boolean,  \"listbuildv\"  boolean,  \"listbuilde\"  boolean,  \"listbrownc\"  int,  \"listbrownv\"  int,  \"listbrowne\"  int,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\"), foreign key(\"logonid\") references  \""+schemaName+"\".\"user_c(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"venartha_c\"  (  \"sid\" integer generated by default as identity, \"chqnumber\"  varchar(32) not null,  \"reconciled\"  varchar(12),  \"vendorc\"  int  ,  \"date\"  timestamp,  \"addrescode\"  int,  \"chqamt\"  numeric(14,2),  \"amtverbos\"  varchar(120),  \"notes\"  varchar(60),  \"advisel1\"  varchar(60),  \"advisel2\"  varchar(60),  \"advisel3\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key (\"sid\" ) ,  foreign  key  (  \"vendorc\"  )  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\" )  )" ;
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"acintegr_c\"  (  \"sid\" integer generated by default as identity, \"moduleid\"  varchar(12)  ,  \"usagedescr\"  varchar(35),  \"usagecode\"  varchar(3)  ,  \"setsid\"  varchar(20)  ,  \"account\"  int  ,  \"extraintfield\"  varchar(20),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  ( \"account\")  references \""+schemaName+"\".\"account_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"itemjob_c\"  (  \"sid\" integer generated by default as identity, \"jobno\"  varchar(32) not null,  \"matcode\"  int  ,  \"proddatet\"  timestamp,  \"qtyalloc\"  numeric(14,2),  \"pono\"  varchar(20),  \"qtyostnd\"  numeric(14,2),  \"qtyalstk\"  numeric(14,2),  \"qtyissud\"  numeric(14,2),  \"jobtotl\"  numeric(14,2),  \"statusfl\"  int,  \"customej\"  int  ,  \"vendor\"  int,  \"statusfldt\"  timestamp,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"printmstatj\"  int,  \"prinmtfldtj\"  timestamp,  \"type\"  varchar(12),  \"matcodeout\"  varchar(20),  \"qtyout\"  numeric(14,2),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"customej\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"activityjob_c\"  (  \"sid\" integer generated by default as identity, \"jobno\"  varchar(32) not null,  \"activitycode\"  int  ,  \"proddatet\"  timestamp,  \"qtyalloc\"  numeric(14,2),  \"pono\"  int,  \"qtyostnd\"  numeric(14,2),  \"qtyalstk\"  numeric(14,2),  \"qtyissud\"  numeric(14,2),  \"jobtotl\"  numeric(14,2),  \"statusfl\"  int,  \"customej\"  int  ,  \"vendor\"  int,  \"statusfldt\"  timestamp,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"printmstatj\"  int,  \"prinmtfldtj\"  timestamp,  \"type\"  varchar(12),  \"matcodeout\"  varchar(20),  \"qtyout\"  numeric(14,2),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"),  foreign  key  (  \"activitycode\")  references \""+schemaName+"\".\"activity_c\"  (  \"sid\"),  foreign  key  (  \"customej\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"venquote_c\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"vendor\"  int  ,  \"matcode\"  int  ,  \"replicate\"  int  ,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"statusfl\"  int,  \"cinvoice\"  varchar(20),  \"jobno\"  varchar(20),  \"vpono\"  varchar(20),  \"rfpord\"  varchar(20),  \"statusfldt\"  timestamp,  \"rcpono\"  varchar(20),  \"odatet\"  timestamp,  \"terms\"  varchar(20),  \"priority\"  boolean,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(25),  \"vinvoice\"  varchar(20),  \"attach\"  varchar(20),  \"shipcode\"  varchar(20),  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"startdatet\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key  (  \"sid\"  ),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"replicate\")  references \""+schemaName+"\".\"venquote_c\"  (  \"sid\"),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\")  )";
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendorders_c\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"vendor\"  int  ,  \"matcode\"  int  ,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"statusfl\"  int,  \"jobno\"  varchar(20),  \"vendqno\"  int  ,  \"rfpord\"  varchar(20),  \"statusfldt\"  timestamp,  \"rcpono\"  varchar(20),  \"odatet\"  timestamp,  \"terms\"  varchar(20),  \"priority\"  boolean,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(25),  \"vinvoice\"  varchar(20),  \"attach\"  varchar(20),  \"shipcode\"  varchar(20),  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"startdatet\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key(  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign key ( \"vendqno\" ) references  \""+schemaName+"\".\"venquote_c (  \"sid\" ), foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\")  )";
       sqlscript="create  table if not exists  \""+schemaName+"\".\"vshipmen_c\"  (  \"sid\" integer generated by default as identity, \"shipcode\"  varchar(32) not null,  \"matcode\"  int  ,  \"shipper\"  int,  \"pono\"  int  ,  \"cpono\"  int,  \"invoice\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"carrier\"  varchar(20),  \"type\"  varchar(12),  \"shipdatet\"  timestamp,  \"shipdateta\"  timestamp,  \"tareno\"  varchar(20),  \"packno\"  varchar(20),  \"vendor\"  int  ,  \"customer\"  int  ,  \"billtocode\"  int  ,  \"billtosameasshipto boolean, shiptocode\"  int  ,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"serialno\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"shiptocode\"  )  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign  key  (  \"billtocode\")  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\")  ,  foreign  key  (  \"vendor\"  )  references \""+schemaName+"\".\"vendor_c (  \"sid\"  ), foreign  key  (  \"pono\"  )  references \""+schemaName+"\".\"vendorders_c\"  (  \"sid\"  ),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuquote_c\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"vendor\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"statusfl\"  int,  \"customer\"  int  ,  \"matcode\"  int  ,  \"replicate\"  int  ,  \"cinvoice\"  varchar(20),  \"ordprice\"  numeric(14,2),  \"jobno\"  varchar(20),  \"vpono\"  varchar(20),  \"quoordt\"  varchar(20),  \"statusfldt\"  timestamp,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(12),  \"terms\"  varchar(25),  \"priority\"  boolean,  \"odatet\"  timestamp,  \"shipcode\"  int,  \"activitycode\"  varchar(20),  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"attach\"  varchar(20),  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  ),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"replicate\")  references \""+schemaName+"\".\"cuquote_c\"  (  \"sid\"),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuorders_c\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"customer\"  int  ,  \"matcode\"  int  ,  \"cuquote\" int  , \"cinvoice\"  int,  \"jobno\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"vpono\"  int,  \"rfpord\"  int,  \"rcpono\"  int,  \"odatet\"  timestamp,  \"terms\"  varchar(20),  \"priority\"  boolean,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(25),  \"vinvoice\"  int,  \"attach\"  varchar(90),  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"startdatet\"  timestamp,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  \" shipcodefrompay\"  int,  \"shipcode\"  int, \"barpo\"  varchar(30),  primary  key  (  \"sid\"  ),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  ),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"cuquote\"  )  references \""+schemaName+"\".\"cuquote_c\"  (  \"sid\"  ),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\") ,  foreign  key  (  \"shipcodefrompay\")  references \""+schemaName+"\".\"address\"  (  \"sid\"),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"address\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuinvoice_c\"  (  \"sid\" integer generated by default as identity, \"invoice\"  varchar(32) not null,  \"customer\"  int  ,  \"matcode\"  int  ,  \"invodate\"  timestamp,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"pono\"  int  ,  \"ref1typ\"  varchar(20),  \"ref1code\"  varchar(35),  \"shipdatet\"  timestamp,  \"shiptype\"  varchar(12),  \"shipcode\"  varchar(20),  \"terms\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"termsdat\"  timestamp,  \"discounp\"  numeric(14,2),  \"discoudt\"  timestamp,  \"discouds\"  numeric(14,2),  \"netddat\"  timestamp,  \"netddys\"  numeric(14,2),  \"fob\"  varchar(20),  \"type\"  varchar(12),  \"integrset\"  varchar(20),  \"attach\"  varchar(20),  \"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"agent\"  int  ,  \"notes\"  varchar(60),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  \"barinvoice\"  varchar(30),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  ),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"pono\"  )  references \""+schemaName+"\".\"cuorders_c\"  (  \"sid\"  ),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"shipment_c\"  (  \"sid\" integer generated by default as identity, \"shipcode\"  varchar(32) not null,  \"matcode\"  int  ,  \"shipper\"  int  ,  \"pono\"  int,  \"cpono\"  int  ,  \"invoice\"  int  ,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"carrier\"  int,  \"type\"  varchar(12),  \"shipdatet\"  timestamp,  \"shipdateta\"  timestamp,  \"tareno\"  varchar(20),  \"packno\"  varchar(20),  \"customer\"  int  ,  \"billtocode\"  int  ,  \"billtosameasshipto boolean, shiptocode\"  int  ,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"serialno\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barshipcod\"  varchar(30),  primary  key(  \"sid\"  ),  foreign  key  (  \"shipper\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\"), foreign  key  (  \"carrier\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\"),  foreign  key  (  \"billtocode\")  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\")  references \""+schemaName+"\".\"address_c\"(  \"sid\"  )  ,  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  ),  foreign  key  (  \"invoice\"  )  references \""+schemaName+"\".\"cuinvoice_c\"  (  \"sid\"  ),  foreign  key  (  \"cpono\"  )  references \""+schemaName+"\".\"cuorders_c\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"emplorders_c\"  (  \"sid\" integer generated by default as identity, \"purchsno\"  varchar(32) not null,  \"delvdatet\"  timestamp,  \"employee\"  int  ,  \"matcode\"  int  ,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"statusfl\"  int,  \"jobno\"  int,  \"vpono\"  int,  \"rfpord\"  int,  \"statusfldt\"  timestamp,  \"rcpono\"  int,  \"odatet\"  timestamp,  \"terms\"  varchar(20),  \"priority\"  boolean,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"type\"  varchar(25),  \"vinvoice\"  int,  \"attach\"  varchar(20),  \"shipcode\"  int  ,  \"agent\"  int  ,\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"startdatet\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key(  \"sid\"),  foreign  key  (  \"employee\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"vshipmen_c\"  (  \"sid\"),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\")  )";
      sqlscript="create  table if not exists  \""+schemaName+"\".\"editlog_c\"  (  \"sid\" integer generated by default as identity, \"databasenm\"  varchar(20) not null  ,  \"recordno\"  int,  \"field\"  varchar(20),  \"datet\"  timestamp,  \"username\"  varchar(20),  \"deleted\"  boolean,  \"prevchar\"  varchar(30),  \"prevnum\"  int,  \"prevlog\"  boolean,  \"prevdate\"  timestamp,  \"newchar\"  varchar(30),  \"newnum\"  int,  \"newlog\"  boolean,  \"newdate\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"hlogfile_c\"  (  \"sid\" integer generated by default as identity, \"serialno\"  varchar(25)  not null ,  \"matcode\"  varchar(20),  \"quanrecd\"  int,  \"vendor\"  varchar(20),  \"location\"  varchar(20),  \"recvrpt\"  varchar(25),  \"inflg\"  boolean,  \"phy\"  boolean,  \"datetin\"  timestamp,  \"datetout\"  timestamp,  \"jobno\"  varchar(20),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"pono\"  varchar(20),  \"scandatet\"  timestamp,  \"quanissd\"  int,  \"butt\"  varchar(25),  \"statusfl\"  int,  \"quanrejd\"  numeric(14,2),  \"customer\"  varchar(25),  \"cpono\"  varchar(20),  \"customej\"  varchar(25),  \"orgcost\"  numeric(14,2),  \"orgpono\"  varchar(20),  \"orgjobno\"  varchar(20),  \"altserno\"  varchar(25),  \"selprice\"  numeric(14,2),  \"physqty\"  numeric(14,2),  \"sperson\"  varchar(25),  \"cartonid\"  varchar(25),  \"cartonpr\"  boolean,  \"packcode\"  varchar(20),  \"tarecode\"  varchar(20),  \"shipcode\"  varchar(20),  \"type\"  varchar(12),  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cpayment_c\"  (  \"sid\" integer generated by default as identity, \"payment\"  varchar(32) not null,  \"customer\"  int  ,  \"cinvoice\"  int  ,  \"cheqdate\" timestamp, \"paymentduedate\" timestamp, \"postingperiod\" int, \"matcode\"  int,  \"integrset\"  varchar(20),  \"account\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2), \"amountin\" numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"discount\"  numeric(14,2),  \"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"paytype\"  varchar(4),  \"paybyid\"  varchar(20),  \"paybydate\"  timestamp,  \"currency\"  varchar(12),  \"convrate\"  numeric(14,2),  \"locamountt\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  \"cinvoice\")  references \""+schemaName+"\".\"cuinvoice_c\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  ),  foreign  key  ( \"account\")  references \""+schemaName+"\".\"account_c\"  (  \"sid\")  )";
      sqlscript="create  table if not exists  \""+schemaName+"\".\"serialnumbers_c\"  (  \"sid\" integer generated by default as identity, \"serialno\"  varchar(25) not null  ,  \"matcode\"  varchar(20),  \"quanrecd\"  numeric(14,2),  \"vendor\"  varchar(20),  \"location\"  varchar(20),  \"recvrpt\"  varchar(20),  \"infl\"  boolean,  \"phy\"  boolean,  \"datetin\"  timestamp,  \"datetout\"  timestamp,  \"jobno\"  varchar(20),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"pono\"  varchar(20),  \"scandatet\"  timestamp,  \"quanissd\"  numeric(14,2),  \"butt\"  varchar(20),  \"statusfl\"  int,  \"quanrejd\"  numeric(14,2),  \"customer\"  varchar(20),  \"cpono\"  varchar(20),  \"customej\"  varchar(20),  \"orgcost\"  numeric(14,2),  \"orgpono\"  varchar(20),  \"orgjobno\"  varchar(20),  \"altserno\"  varchar(25),  \"selprice\"  numeric(14,2),  \"physqty\"  numeric(14,2),  \"sperson\"  varchar(20),  \"cartonid\"  varchar(20),  \"cartonpr\"  boolean,  \"packcode\"  varchar(20),  \"tarecode\"  varchar(20),  \"shipcode\"  varchar(20),  \"type\"  varchar(12),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barserial\"  varchar(30), primary  key(\"sid\"))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"machine_c\"  (  \"sid\" integer generated by default as identity, \"machinecode\"  varchar(32) not null,  \"quantity\"  numeric(14,2),  \"descript\"  varchar(120),  \"dateadded\"  timestamp,  \"source1\"  varchar(35),  \"source2\"  varchar(35),  \"upccode\"  varchar(25),  \"cost\"  numeric(14,2),  \"replcost\"  numeric(14,2),  \"selprice\"  numeric(14,2),  \"spricold\"  numeric(14,2),  \"spricnew\"  numeric(14,2),  \"spriceffdt\"  timestamp,  \"shipcode\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"misccode1\"  varchar(25),  \"misccode2\"  varchar(25),  \"qtylevel1\"  numeric(14,2),  \"unit\"  varchar(12),  \"caseqty\"  numeric(14,2),  \"type\"  varchar(12),  \"tax1\"  boolean,  \"tax2\"  boolean,  \"tax3\"  boolean,  \"aliascode\"  varchar(25),  \"parentcode\"  int  ,  \"avgprice\"  numeric(14,2),  \"avgcost\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"subcodesn\"  varchar(35),  \"subcodesn2\" varchar(35),  \"subcodesn3\" varchar(35),  \"cuordqty\"  numeric(14,2),  \"venorqty\"  numeric(14,2),  \"cupicqty\"  numeric(14,2),  \"venpiqty\"  numeric(14,2),  \"cuinvqty\"  numeric(14,2),  \"cushiqty\"  numeric(14,2),  \"venshqty\"  numeric(14,2),  \"effdate\"  timestamp,  \"integrset\"  varchar(20),  \"notes\"  varchar(60),  \"docmnt\"  varchar(90),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barupc\"  varchar(30),  primary  key  (  \"sid\"), foreign  key  (  \"parentcode\")  references \""+schemaName+"\".\"machine_c\"  (  \"sid\")  )";
      sqlscript="create  table if not exists  \""+schemaName+"\".\"groupmembers_c\"  (  \"sid\" integer generated by default as identity, \"groupid\"  int not null,  \"memberid\"  varchar(32) not null,  \"descript\"  varchar(120), \"sourcetype\" varchar(10),  \"memberem\"  int  ,  \"membercu\"  int  ,  \"memberve\"  int  ,  \"memberit\"  int  ,  \"memberac\"  int  ,  \"memberma\"  int  ,  \"type\"  varchar(10),  \"currpw\"  varchar(32) ,  \"expiry\"  timestamp,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  \"groupid\")  references \""+schemaName+"\".\"membersgroup_c (  \"sid\"),  foreign  key  (  \"memberem\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\"),  foreign  key  (  \"membercu\")  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"),  foreign  key  (  \"memberit\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"memberac\")  references \""+schemaName+"\".\"activity_c\"  (  \"sid\"),  foreign  key  (  \"memberma\")  references \""+schemaName+"\".\"machine_c\"  (  \"sid\"),  foreign  key  (  \"memberve\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"jobassignment_c\"  (  \"sid\" integer generated by default as identity, \"jobassign\" varchar(32) not null, \"machine\"  int ,  \"sequence\"  varchar(12) ,  \"location\"  int  ,  \"sdatet\"  timestamp,  \"durationh\"  int,  \"durationm\"  int,  \"stimeh\"  int,  \"stimem\"  int,  \"stimeampm\"  boolean,  \"edatet\"  timestamp,  \"priority\"  boolean,  \"percntdone\"  numeric(14,2),\"repeatf\"  varchar(20),  \" jobno\"  int  ,  \"matcode\"  int  , \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"pono\"  int,  \"vendor\"  int  ,  \"cpono\"  int,  \"customer\"  int  ,  \"statusfl\"  int, \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"notes\"  varchar(60),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  ),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"machine\")  references \""+schemaName+"\".\"machine_c\"  (  \"sid\"),  \"  foreign  key  (  \"jobno\")  references \""+schemaName+"\".\"itemjob_c\"  (  \"sid\"),foreign key (\"location\")  references \""+schemaName+"\".\"location_c\"  (  \"sid\")  )";
      sqlscript="create  table if not exists  \""+schemaName+"\".\"nextserialno_c\"  (  \"sid\" integer generated by default as identity, \"nxtserno\"  varchar(4)  not null ,  \"curserno\"  varchar(4),  \"prevsern\"  varchar(4),  \"is9999\"  boolean,  \"refno\" varchar(14)  , \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rate1f_c\"  (  \"sid\" integer generated by default as identity, \"usertype\"  varchar(12)  not null ,  \"prodtype\"  varchar(12) not null,  \"stepname\"  varchar(25) not null,  \"step\"  int,  \"value\"  numeric(14,2),  \"effdate\"  timestamp,  \"enddate\"  timestamp,  \"incentive\"  varchar(25),  \"ieffdate\"  timestamp,  \"ienddate\"  timestamp, \"statusfl\" int, \"statusfldt\"  timestamp, \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"itembom_c\"  (  \"sid\" integer generated by default as identity, \"bomcode\"  varchar(32) not null,  \"descript\"  varchar(120),  \"quantity\" numeric(14,2),  \"mode\"  boolean,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  \"statusfl\"  int,  \"statusfldt\"  timestamp, primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"itembomdetails_c\"  (  \"sid\" integer generated by default as identity, \"bomcode\"  int not null,  \"matcode\"  int  not null ,  \"mode\"  boolean,  \"subqty\"  numeric(14,2), \"descript\"  varchar(1200), \"seq\"  varchar(4),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"  ),  foreign  key  (  \"bomcode\")  references \""+schemaName+"\".\"itembom_c\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"task_c\"  (  \"sid\" integer generated by default as identity, \"taskid\" varchar(32) not null,  \"descript\"  varchar(120),  \"activitycode\"  int  ,  \"projectteam\"  int  ,  \"resource\" int  , \"mode\"  boolean,  \"eststart\" timestamp, calcstart\"  timestamp,  \"actlstart\"  timestamp,  \"estend\"  timestamp,  \"calcend\"  timestamp,  \"actlend\"  timestamp,  \"subqty\"  numeric(14,2),  \"bomcode\"  int,  \"location\"  int,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(\"sid\") ,  foreign  key  (  projectteam)  references \""+schemaName+"\".\"membersgroup_c (  \"sid\"),  foreign  key  (resource)  references \""+schemaName+"\".\"groupmembers_c\"  (  \"sid\"),  foreign  key  (  \"activitycode\"  )  references \""+schemaName+"\".\"activity_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"jobassignmentdetails_c\"  (  \"sid\" integer generated by default as identity, \"jobassign\" int not null, line\"  int, \"machine\"  int ,  \"sequence\"  varchar(12) ,  \"location\"  int  ,  \"sdatet\"  timestamp,  \"durationh\"  int,  \"durationm\"  int,  \"stimeh\"  int,  \"stimem\"  int,  \"stimeampm\"  boolean,  \"edatet\"  timestamp,  \"priority\"  boolean,  \"percntdone\"  numeric(14,2),\"repeatf\"  varchar(20),  \"jobno\"  int  ,  \"matcode\"  int  ,qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"pono\"  int,  \"vendor\"  int  ,  \"cpono\"  int,  \"customer\"  int  ,  \"statusfl\"  int,  \"linetotl\"  numeric(14,2), \"owner\"  varchar(40),  \"owner2\"  varchar(40), \"jafield1\" varchar(60), \"jafield2\"  varchar(60), \"jafield3\"  varchar(60), \"jafield4\"  varchar(60), \"notes\" varchar(60),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  ),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"machine\")  references \""+schemaName+"\".\"machine_c\"  (  \"sid\"),  \"    foreign  key  (  \"jobno\")  references \""+schemaName+"\".\"itemjob_c\"  (  \"sid\"),foreign key (\"location\")  references \""+schemaName+"\".\"location_c\"  (  \"sid\"), foreign  key  (  \"jobassign\")  references \""+schemaName+"\".\"jobassignment_c\"  (  \"sid\"  ) )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"processdetails_c\"  (  \"sid\" integer generated by default as identity, \"process\" varchar(32) not null, \"cpono\" int , \"matcode\"  int , \"customer\" int,  \"sdatet\"  timestamp,  \"durationh\"  int,  \"durationm\"  int,  \"stimeh\"  int,  \"stimem\"  int,  \"stimeampm\"  boolean,  \"edatet\"  timestamp,  \"priority\"  boolean, \"percntdone\"  numeric(14,2),\"statusfl\"  int, \"statusfldt\"  timestamp,  \"notes\" varchar(60), \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer\"  (  \"sid\"  ), foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item\"  (  \"sid\"), foreign  key  (  \"cpono\")  references \""+schemaName+"\".\"cuorders_c\"  (  \"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"processattributes_c\"  (  \"sid\" integer generated by default as identity, \"pdetails\" int not null, \"name\"  varchar(32) , value varchar(32),  \"type\"  varchar(32),  \"range\"  varchar(32),  \"step\"  int,  \"statusfl\"  int, \"statusfldt\"  timestamp,  \"notes\" varchar(60), \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"pdetails\"  )  references \""+schemaName+"\".\"processdetails_c\"  (  \"sid\"  ))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"project_c (  \"sid\" integer generated by default as identity, \"proj\"  varchar(32) not null,  \"parentcode\"  int  ,  \"descript\"  varchar(120),  \"companycode\" int  , \"divcode\"  int  ,  \"depcode\"  int  ,  \"location\"  int  ,  \"sdatet\"  timestamp,  \"edatet\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(\"sid\"),  foreign  key  (  \"parentcode\"  )  references \""+schemaName+"\".\"project_c\"  (  \"sid\"), foreign  key  (  \"companycode\"  )  references \""+schemaName+"\".\"company_c\"  (  \"sid\"  ),  foreign  key  (  \"depcode\" )  references \""+schemaName+"\".\"department_c\"  (  \"sid\"  ),  foreign  key  (  \"divcode\"  )  references \""+schemaName+"\".\"division_c\"  (  \"sid\"  ))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
       sqlscript="create  table if not exists  \""+schemaName+"\".\"outline_c\"  (  \"sid\" integer generated by default as identity, \"proj\"  int not null,  \"parentcode\"  int  ,  \"userow\"  numeric(14,2),  \"usecol\"  numeric(14,2),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(\"sid\"),  foreign  key  (  \"parentcode\"  )  references \""+schemaName+"\".\"outline_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"scandate_c\"  (  \"sid\" integer generated by default as identity, \"sdsatetimeofscan\"  varchar(25) not null  ,  \"datetimeofscan\"  timestamp,  \"lastdate\"  timestamp,  \"bkupdate\"  timestamp, \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vinvoice_c\"  (  \"sid\" integer generated by default as identity, \"invoice\"  varchar(32) not null,  \"vendor\"  int  ,  \"matcode\"  int  ,  \"integrset\"  varchar(20),  \"invodate\"  timestamp,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"pono\"  int  ,  \"ref1typ\"  varchar(20),  \"ref1code\"  varchar(35),  \"shipdatet\"  timestamp,  \"shiptype\"  varchar(12),  \"shipcode\"  int  ,  \"terms\"  varchar(12),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"termsdat\"  timestamp,  \"discounp\"  numeric(14,2),  \"discoudt\"  timestamp,  \"discouds\"  numeric(14,2),  \"netddat\"  timestamp,  \"netddys\"  int,  \"fob\"  varchar(20),  \"type\"  varchar(12),  \"attach\"  varchar(20),\"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"agent\"  int  ,  \"notes\"  varchar(60),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"docmnt\"  varchar(90),  primary  key(  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"vshipmen_c\"  (  \"sid\"),  foreign  key  (  \"pono\"  )  references \""+schemaName+"\".\"vendorders_c\"  (  \"sid\"  ),  foreign  key  (  \"agent\")  references \""+schemaName+"\".\"employee_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vpayment_c\"  (  \"sid\" integer generated by default as identity, \"payment\"  varchar(32) not null,  \"vendor\"  int  ,  \"vinvoice\"  int  ,  \"cheqdate\" timestamp, \"paymentduedate\" timestamp, \"postingperiod\" int, \"matcode\"  int,  \"integrset\"  varchar(20),  \"account\"  int,  \"amounttotal\"  numeric(14,2),  \"amountostndt\"  numeric(14,2),  \"amountin\" numeric(14,2),  \"qtytotal\"  numeric(14,2),  \"qtyostndt\"  numeric(14,2),  \"baseamountt\"  numeric(14,2),  \"delivchrgt\"  numeric(14,2),  \"miscchrgt\"  numeric(14,2),  \"tax1amtt\"  numeric(14,2),  \"tax2amtt\"  numeric(14,2),  \"tax3amtt\"  numeric(14,2),  \"discount\"  numeric(14,2),  \"paytype\"  varchar(4),  \"paybyid\"  varchar(20),  \"paybydate\"  timestamp,  \"currency\"  varchar(12),  \"convrate\"  numeric(14,2),  \"locamount\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  \"vinvoice\")  references \""+schemaName+"\".\"vinvoice_c\"  (  \"sid\"),  foreign  key  (  \"vendor\"  )  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\")  , foreign  key  ( \"account\")  references \""+schemaName+"\".\"account_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuqdetails_c\"  (  \"sid\" integer generated by default as identity, \"cuqno\"  int   not null,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodate\"  timestamp,  \"idelvdate\"  timestamp, \"shipoption\" varchar(20) ,  \"vendor\"  int  ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\"),  foreign  key  (  \"cuqno\")  references \""+schemaName+"\".\"cuquote_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuodetails_c\"  (  \"sid\" integer generated by default as identity, \"cuono\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodate\"  timestamp,  \"idelvdate\"  timestamp,  \"vendor\"  int  ,\"shipoption\" varchar(20) ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2), \"owner2\"  varchar(40),  \"statusfl\"  int,  \"statusfldt\"  timestamp,\"barpo\" varchar(30),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\"),  foreign  key  (  \"cuono\")  references \""+schemaName+"\".\"cuorders_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cuidetails_c\"  (  \"sid\" integer generated by default as identity, \"cuino\"  int   not null,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodatet\"  timestamp,  \"delvdateit\"  timestamp,  \"vendor\"  int  ,  \"qtyostnd\"  numeric(14,2),  \"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\"),  foreign  key  (  \"cuino\")  references \""+schemaName+"\".\"cuinvoice_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"cupdetails_c\"  (  \"sid\" integer generated by default as identity, \"cupno\"  int  not null ,  \"line\"  int,  \"invoice\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordprice\"  numeric(14,2),  \"paytype\"  varchar(12),  \"paybyid\"  varchar(12), ,\"amountin\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"invoice\")  references \""+schemaName+"\".\"cuinvoice_c\"  (  \"sid\"),  foreign  key  (  cupno)  references \""+schemaName+"\".\"cpayment_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"activityjobdetails_c\"  (  \"sid\" integer generated by default as identity, \"jobno\"  int   not null,  \"line\"  int,  \"activitycode\"  int  ,  \"proddatet\"  timestamp,  \"qtyalloc\"  numeric(14,2),  \"pono\"  int,  \"ordprice\"  numeric(14,2),  \"qtyostnd\"  numeric(14,2),  \"qtyalstk\"  numeric(14,2),  \"qtyissud\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"printmstatj\"  int,  \"prinmtfldtj\"  timestamp,  \"type\"  varchar(12),  \"activitycodeout\"  int,  \"qtyout\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"activitycode\")  references \""+schemaName+"\".\"activity_c\"  (  \"sid\"),  foreign  key  (  \"jobno\")  references \""+schemaName+"\".\"activityjob_c\"  (  \"sid\"  )  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"shipmentdetails_c\"  (  \"sid\" integer generated by default as identity, \"shipcode\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyshipped\"  numeric(14,2),  \"shippingprice\"  numeric(14,2),  \"shipper\"  int,  \"pono\"  int,  \"cpono\"  int,  \"invoice\"  int,  \"amount\"  numeric(14,2),  \"amountostnd\"  numeric(14,2),  \"qty\"  numeric(14,2),  \"qtyostnd\"  numeric(14,2),  \"carrier\"  int,  \"type\"  varchar(12),  \"shipdatet\"  timestamp,  \"shipdateta\"  timestamp,  \"tareno\"  varchar(20),  \"packno\"  varchar(20),  \"customer\"  int  ,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"serialno\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barshipcod\"  varchar(30),  \"linetotl\"  numeric(14,2),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  ( \"mailtocode\"  )  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\"  )  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"shipment_c\"  (  \"sid\")  )";
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendqdetails_c\"  (  \"sid\" integer generated by default as identity, \"vendqno\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodatet\"  timestamp,\"shipoption\" varchar(20) ,  \"customer\"  int  ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  ),  foreign  key  (  \"vendqno\"  )  references \""+schemaName+"\".\"venquote_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendodetails_c\"  (  \"sid\" integer generated by default as identity, \"vendono\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodatet\"  timestamp,  \"customer\"  int  ,\"shipoption\" varchar(20) ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  ),  foreign  key  (  \"vendono\"  )  references \""+schemaName+"\".\"vendorders_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendidetails_c\"  (  \"sid\" integer generated by default as identity, \"vendino\"  int not null  ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodatet\"  timestamp,  \"customer\"  int  ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"customer\"  )  references \""+schemaName+"\".\"customer_c\"  (  \"sid\"  ),  foreign  key  (  \"vendino\"  )  references \""+schemaName+"\".\"vinvoice_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vendpdetails_c\"  (  \"sid\" integer generated by default as identity, \"vendpno\"  int  not null ,  \"line\"  int,  \"invoice\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordprice\"  numeric(14,2),  \"paytype\"  varchar(12),  \"paybyid\"  varchar(12), ,\"amountin\"  numeric(14,2),  \"vendor\"  int  ,  \"vontact\"  int,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"invoice\")  references \""+schemaName+"\".\"vinvoice_c\"  (  \"sid\"),  foreign  key  (  \"vendor\"  )  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\"  ),  foreign  key  (  vendpno  )  references \""+schemaName+"\".\"vpayment_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"vshipmendetails_c\"  (  \"sid\" integer generated by default as identity, \"shipcode\"  int  not null ,  \"line\"  int,  \"matcode\"  int  ,  \"qtyshipped\"  numeric(14,2),  \"shippingprice\"  numeric(14,2),  \"shipper\"  int,  \"pono\"  int,  \"cpono\"  int,  \"invoice\"  int,  \"amount\"  numeric(14,2),  \"amountostnd\"  numeric(14,2),  \"qty\"  numeric(14,2),  \"qtyostnd\"  numeric(14,2),  \"carrier\"  int,  \"type\"  varchar(12),  \"shipdatet\"  timestamp,  \"shipdateta\"  timestamp,  \"tareno\"  varchar(20),  \"packno\"  varchar(20),  \"vendor\"  int,  \"mailtocode\"  int  ,  \"shiptocode\"  int  ,  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"serialno\"  varchar(25),  \"printmstat\"  int,  \"prinmtfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"barshipcod\"  varchar(30),  \"linetotl\"  numeric(14,2),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  ( \"mailtocode\"  )  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign  key  (  \"shiptocode\"  )  references \""+schemaName+"\".\"address_c\"(  \"sid\"  ),  foreign  key  (  \"shipcode\")  references \""+schemaName+"\".\"vshipmen_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"wageearneraux_c\"  (  \"sid\" integer generated by default as identity, \"wageearnerid\"  int not null,  \"line\"  int,  \"sin\"  varchar(12),  \"wcbytdl\"  numeric(14,2),  \"wcbytdn\"  numeric(14,2),  \"insytdl\"  numeric(14,2),  \"insytdn\"  numeric(14,2),  \"vacatonyl\"  numeric(14,2),  \"vacatonyn\"  numeric(14,2),  \"payytdl\"  numeric(14,2),  \"fpensiytl\"  numeric(14,2),  \"ppensiytl\"  numeric(14,2),  \"itaxytdl\"  numeric(14,2),  \"ptaxytdl\"  numeric(14,2),  \"payytdn\"  numeric(14,2),  \"fpensiytn\"  numeric(14,2),  \"ppensiytn\"  numeric(14,2),  \"itaxytdn\"  numeric(14,2),  \"patxytdn\"  numeric(14,2),  \"gpayytdl\"  numeric(14,2),  \"gpayytdn\"  numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  foreign  key  (  wageearnerid)  references \""+schemaName+"\".\"wageearner_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create table if not exists  \""+schemaName+"\".\"rgenapp_c ( \"sid\" integer generated by default as identity, \"appname\" varchar(40) not null, \"descript\"  varchar(120),  \"apptype varchar(20), appwaccounting boolean, appwemail boolean, appwjmsmq boolean, appvendor varchar(20), appversion varchar(20), appplatform varchar(40), appmodelpkg varchar(40), appactionpkg varchar(40), appskin varchar(20), appdeploytype varchar(20), createfidata varchar(4096000), revengdata varchar(4096000), initializefidata varchar(4096000),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary key(\"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rgendb_c ( \"sid\" integer generated by default as identity, \"dbname\" varchar(40) not null, \"descript\"  varchar(120),  \"dbtype varchar(20), dbvendor varchar(20), dbversion varchar(20), dbplatform varchar(20), appcode\"  int  ,  \"sqldriver varchar(40), sqlurl varchar(40), sqluser varchar(20), sqlpassword varchar(20), sqlclasspath varchar(40), sqlcreatedbscript varchar(20), sqldropdbscript varchar(20), sqlcreatetblsscript varchar(20), sqlloadtblsscript varchar(20),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary key(\"sid\"), foreign  key  (  appcode  )  references \""+schemaName+"\".\"rgenapp_c\"  (  \"sid\"  ) )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rgentable_c \"  (  \"sid\" integer generated by default as identity, \"tablename \"  varchar(40)  not null ,  \"dbcode int  , inaddmenu\"  boolean,  \"inlistmenu\"  boolean,  \"intransactionmenu\"  boolean,  \"inreportmenu\"  boolean,  \"ingraphsmenu\"  boolean,  \"inmailingmenu\"  boolean,  \"ingeneratemenu\"  boolean,  \"inadminmenu\"  boolean,  \"inmaintenancemenu\"  boolean,  \"inlabelsmenu\"  boolean,  \"inskipmenu\"  boolean,  \"incustom1menu\"  boolean,  \"menulevel\"  varchar(12),  \"menurole\"  varchar(12),  \"menulabelgroup\"  varchar(20),  \"submenusequence\"  int,  \"usagescope varchar(12),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(  \"sid\"), foreign  key  (  dbcode  )  references \""+schemaName+"\".\"rgendb_c\"  (  \"sid\"  ) )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"rgenfields_c\"  (  \"sid\" integer generated by default as identity, \"dbcode int   , \"tablename\"   int   ,  \"fieldname\"  varchar(60) not null,  \"fieldtype varchar(20), fieldlength varchar(2), ingroup\"  varchar(20),  \"seqwithingroup\"  int,  \"focusseq\"  int,  \"future1\"  varchar(20),  \"initialvalue\"  varchar(12),  \"keyoradditional\"  varchar(12),  \"keyoradditional2\"  varchar(12),  \"keyoradditional3\"  varchar(12),  \"showinmenu\"  varchar(20),  \"showinreport\"  varchar(20),  \"processoption1\"  varchar(20),  \"processoption2\"  varchar(20), fdbcode varchar(40)  ,  \"ftablename \"  varchar(60)  ,  \"ffieldkeyname1\"  varchar(60),  \"ffieldkeyname2\"  varchar(60),  \"ffieldkeyname3\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"), foreign  key  (  \"tablename\"  )  references \""+schemaName+"\".\"rgentable_c \"  (  \"sid\"), foreign  key  (  dbcode )  references \""+schemaName+"\".\"rgendb_c\"  (  \"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"genoptions_c\"  (  \"sid\" integer generated by default as identity, \"row\"  varchar(2) not null,  \"genoptions01\"  varchar(159),  \"genpurpose01\"  varchar(159),  \"genvalue01\"  varchar(159),  \"genoptions02\"  varchar(159),  \"genpurpose02\"  varchar(159),  \"genvalue02\"  varchar(159),  \"genoptions03\"  varchar(159),  \"genpurpose03\"  varchar(159),  \"genvalue03\"  varchar(159),  \"genoptions04\"  varchar(159),  \"genpurpose04\"  varchar(159),  \"genvalue04\"  varchar(159),  \"genoptions05\"  varchar(159),  \"genpurpose05\"  varchar(159),  \"genvalue05\"  varchar(159),  \"genoptions06\"  varchar(159),  \"genpurpose06\"  varchar(159),  \"genvalue06\"  varchar(159),  \"genoptions07\"  varchar(159),  \"genpurpose07\"  varchar(159),  \"genvalue07\"  varchar(159),  \"genoptions08\"  varchar(159),  \"genpurpose08\"  varchar(159),  \"genvalue08\"  varchar(159),  \"genoptions09\"  varchar(159),  \"genpurpose09\"  varchar(159),  \"genvalue09\"  varchar(159),  \"genoptions10\"  varchar(159),  \"genpurpose10\"  varchar(159),  \"genvalue10\"  varchar(159),  \"genoptions11\"  varchar(159),  \"genpurpose11\"  varchar(159),  \"genvalue11\"  varchar(159),  \"genoptions12\"  varchar(159),  \"genpurpose12\"  varchar(159),  \"genvalue12\"  varchar(159),  \"genoptions13\"  varchar(159),  \"genpurpose13\"  varchar(159),  \"genvalue13\"  varchar(159),  \"genoptions14\"  varchar(159),  \"genpurpose14\"  varchar(159),  \"genvalue14\"  varchar(159),  \"genoptions15\"  varchar(159),  \"genpurpose15\"  varchar(159),  \"genvalue15\"  varchar(159),  \"genoptions16\"  varchar(159),  \"genpurpose16\"  varchar(159),  \"genvalue16\"  varchar(159),  \"genoptions17\"  varchar(159),  \"genpurpose17\"  varchar(159),  \"genvalue17\"  varchar(159),  \"genoptions18\"  varchar(159),  \"genpurpose18\"  varchar(159),  \"genvalue18\"  varchar(159),  \"genoptions19\"  varchar(159),  \"genpurpose19\"  varchar(159),  \"genvalue19\"  varchar(159),  \"genoptions20\"  varchar(159),  \"genpurpose20\"  varchar(159),  \"genvalue20\"  varchar(159),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(60),  \"owner\"  varchar(40), \"owner2\"  varchar(40), primary  key(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"blobdata_c\"  (  \"sid\" integer generated by default as identity, \"fromtable\"  varchar(35) not null,  \"fromkey\" varchar(35) not null, qualifier\"  varchar(32) not null,  \"sequence\"  int,  \"type\" varchar(40), \"data\"  varbinary(1000000),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\" ))";
      if(dbProductName.equals("psql")){
       sqlscript="create  table if not exists  \""+schemaName+"\".\"blobdata_c\"  (  \"sid\" integer generated by default as identity, \"fromtable\"  varchar(35) not null,  \"fromkey\" varchar(35) not null, qualifier\"  varchar(32) not null,  \"sequence\"  int,  \"type\" varchar(40), \"data\"  bytea,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\" ))";
      }
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"clobdata_c\"  (  \"sid\" integer generated by default as identity, \"fromtable\"  varchar(35) not null,  \"fromkey\" varchar(35) not null, qualifier\"  varchar(32) not null,  \"sequence\"  int,  \"type\" varchar(40), data\"  varchar(4096000),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"notes\"  varchar(255),  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"controlusagebyperiods_c\"  (  \"sid\" integer generated by default as identity, \"ctlusagetrackerid\"  varchar(32)  not null,  \"descript\"  varchar(120), controlcode \"  int,  \"currency\"  varchar(3),  \"period0label varchar(20), \"period0b\"  numeric(14,2),  \"period0\"  numeric(14,2),  \"periodtotalslabel varchar(20), periodtotalsb\"  numeric(14,2),  \"periodtotals\"  numeric(14,2),  \"period1label varchar(20), \"period1budget\"  numeric(14,2),  \"period1actual\"  numeric(14,2),  \"period2label\" varchar(20), \"period2b\"  numeric(14,2),  \"period2\"   numeric(14,2),  \"period3label varchar(20), period3b\"  numeric(14,2),  \"period3\"  numeric(14,2),  \"period4label varchar(20), period4b\"  numeric(14,2),  \"period4\"  numeric(14,2),  \"period5label\" varchar(20), period5b\"  numeric(14,2),  \"period5\"  numeric(14,2),  \"period6label varchar(20), period6b\"  numeric(14,2),  \"period6\"  numeric(14,2),  \"period7label varchar(20), period7b\"  numeric(14,2),  \"period7\"  numeric(14,2),  \"period8label varchar(20), period8b\"  numeric(14,2),  \"period8\"  numeric(14,2),  \"period9label varchar(20), period9b\"  numeric(14,2),  \"period9\"  numeric(14,2),  \"period10label varchar(20), period10b\"  numeric(14,2),  \"period10\"  numeric(14,2),  \"period11label varchar(20), period11b\"  numeric(14,2),  \"period11\"  numeric(14,2),  \"period12label varchar(20), period12b\"  numeric(14,2),  \"period12\"  numeric(14,2),  \"periodnlabel varchar(20), periodnb\"  numeric(14,2),  \"periodn\"  numeric(14,2),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key  (  \"sid\"),  \" foreign  key  (  controlcode)  references \""+schemaName+"\".\"control_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"resourcedetails_c\"  (  \"sid\" integer generated by default as identity, \"taskno\"  int,  \"resourcenumber\"  int,  \"projectteam\"  int  ,  \"resource\"  int  not null ,  \"usagepercent numeric(14,2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40), \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (projectteam)  references \""+schemaName+"\".\"membersgroup_c\"  (  \"sid\"),  foreign  key  (resource)  references \""+schemaName+"\".\"groupmembers_c\"  (  \"sid\"),  foreign  key  (  taskno)  references \""+schemaName+"\".\"task_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"emplodetails_c\"  (  \"sid\" integer generated by default as identity, \"emplono\"  int  not null ,  \"line\"  int not null,  \"matcode\"  int  ,  \"qtyordrd\"  numeric(14,2),  \"ordunit\"  varchar(12),  \"ordprice\"  numeric(14,2),  \"iodate\"  timestamp,  \"idelvdate\"  timestamp,  \"vendor\"  int  ,  \"qtyostnd\"  numeric(14,2),\"baseamount\"  numeric(14,2),  \"delivchrg\"  numeric(14,2),  \"miscchrg\"  numeric(14,2),  \"tax1amt\"  numeric(14,2),  \"tax2amt\"  numeric(14,2),  \"tax3amt\"  numeric(14,2),  \"linetotl\"  numeric(14,2),  \"owner2\"  varchar(40),  primary  key(  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"),  foreign  key  (  \"vendor\")  references \""+schemaName+"\".\"vendor_c\"  (  \"sid\"),  foreign  key  (  emplono)  references \""+schemaName+"\".\"emplorders_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
       sqlscript="create  table if not exists  \""+schemaName+"\".\"usagebyperiods_c\"  (  \"sid\" integer generated by default as identity, \"usagetrackerid\"  varchar(32) not null,  \"descript\"  varchar(120),  \"matcode int  , \"currency\"  varchar(3),  \"period0label varchar(20), \"period0b\"  numeric(14,2),  \"period0\"  numeric(14,2),  \"period0formulae\"  varchar(159),  \"periodtotalslabel\" varchar(20), \"periodtotalsb\"  numeric(14,2),  \"periodtotals\" numeric(14,2),  \"periodtotalsformulae\"  varchar(159),  \"period1label\" varchar(20), \"period1budget\"  numeric(14,2),  \"period1\"  numeric(14,2),  \"period1formulae\"  varchar(159),  \"period2label\" varchar(20), \"period2b\"  numeric(14,2),  \"period2\"   numeric(14,2),  \"period2formulae\"  varchar(159),  \"period3label varchar(20), period3b\"  numeric(14,2),  \"period3\"  numeric(14,2),  \"period3formulae\"  varchar(159),  \"period4label varchar(20), period4b\"  numeric(14,2),  \"period4\"  numeric(14,2),  \"period4formulae\"  varchar(159),  \"period5label\" varchar(20), period5b\"  numeric(14,2),  \"period5\"  numeric(14,2),  \"period5formulae\"  varchar(159),  \"period6label varchar(20), period6b\"  numeric(14,2),  \"period6\"  numeric(14,2),  \"period6formulae\"  varchar(159),  \"period7label varchar(20), period7b\"  numeric(14,2),  \"period7\"  numeric(14,2),  \"period7formulae\"  varchar(159),  \"period8label varchar(20), period8b\"  numeric(14,2),  \"period8\"  numeric(14,2),  \"period8formulae\"  varchar(159),  \"period9label varchar(20), period9b\"  numeric(14,2),  \"period9\"  numeric(14,2),  \"period9formulae\"  varchar(159),  \"period10label varchar(20), period10b\"  numeric(14,2),  \"period10\"  numeric(14,2),  \"period10formulae\"  varchar(159),  \"period11label varchar(20), period11b\"  numeric(14,2),  \"period11\"  numeric(14,2),  \"period11formulae\"  varchar(159),  \"period12label varchar(20), period12b\"  numeric(14,2),  \"period12\"  numeric(14,2),  \"period12formulae\"  varchar(159),  \"periodnlabel varchar(20), periodnb\"  numeric(14,2),  \"periodn\"  numeric(14,2),  \"periodnformulae\"  varchar(159),  \"notes\"  varchar(60),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  \"groupcode\"  int  ,  primary  key  (  \"sid\"),  foreign  key  (  \"matcode\")  references \""+schemaName+"\".\"item_c\"  (  \"sid\"), foreign  key  (  groupcode)  references \""+schemaName+"\".\"rollupgroup_c\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"resource_cundle_c (  \"sid\" integer generated by default as identity,\"name\" varchar(50),language varchar(2),country varchar(2),variant varchar(2),  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(  \"sid\"))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"resource_c (  \"sid\" integer generated by default as identity, \"_key\"  varchar(50) ,  \"_value\" varchar(2555),  \"resourcebundle\"  int  not null,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"), foreign  key  (  \"resourcebundle\")  references \""+schemaName+"\".\"resourceundle_c\"  (  \"sid\") )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"truefalse_c (  \"sid\" integer generated by default as identity, \"tablename\"  varchar(50) ,  \"qualifier varchar(32), show001 boolean, show002 boolean, show003 boolean, show004 boolean, show005 boolean, show006 boolean, show007 boolean, show008 boolean, show009 boolean, show010 boolean, show011 boolean, show012 boolean, show013 boolean, show014 boolean, show015 boolean, show016 boolean, show017 boolean, show018 boolean, show019 boolean, show020 boolean, show021 boolean, show022 boolean, show023 boolean, show024 boolean, show025 boolean, show026 boolean, show027 boolean, show028 boolean, show029 boolean, show030 boolean, show031 boolean, show032 boolean, show033 boolean, show034 boolean, show035 boolean, show036 boolean, show037 boolean, show038 boolean, show039 boolean, show040 boolean, show041 boolean, show042 boolean, show043 boolean, show044 boolean, show045 boolean, show046 boolean, show047 boolean, show048 boolean, show049 boolean, show050 boolean, show051 boolean, show052 boolean, show053 boolean, show054 boolean, show055 boolean, show056 boolean, show057 boolean, show058 boolean, show059 boolean, show060 boolean, show061 boolean, show062 boolean, show063 boolean, show064 boolean, show065 boolean, show066 boolean, show067 boolean, show068 boolean, show069 boolean, show070 boolean, show071 boolean, show072 boolean, show073 boolean, show074 boolean, show075 boolean, show076 boolean, show077 boolean, show078 boolean, show079 boolean, show080 boolean, show081 boolean, show082 boolean, show083 boolean, show084 boolean , show085 boolean, show086 boolean, show087 boolean, show088 boolean, show089 boolean, show090 boolean, show091 boolean, show092 boolean, show093 boolean, show094 boolean, show095 boolean, show096 boolean, show097 boolean, show098 boolean, show099 boolean, show100 boolean, show101 boolean, show102 boolean, show103 boolean, show104 boolean, show105 boolean, show106 boolean, show107 boolean, show108 boolean, show109 boolean, show110 boolean, show111 boolean, show112 boolean, show113 boolean, show114 boolean, show115 boolean, show116 boolean, show117 boolean, show118 boolean, show119 boolean, show120 boolean, show121 boolean, show122 boolean, show123 boolean, show124 boolean, show125 boolean, show126 boolean, show127 boolean, show128 boolean, show129 boolean, show130 boolean, show131 boolean, show132 boolean, show133 boolean, show134 boolean, show135 boolean, show136 boolean, show137 boolean, show138 boolean, show139 boolean,show140 boolean,show141 boolean,show142 boolean,show143 boolean,show144 boolean,show145 boolean,show146 boolean,show147 boolean,show148 boolean,show149 boolean,show150 boolean,show151 boolean,show152 boolean,show153 boolean,show154 boolean,show155 boolean,show156 boolean,show157 boolean,show158 boolean,show159 boolean,show160 boolean,show161 boolean,show162 boolean,show163 boolean,show164 boolean,show165 boolean,show166 boolean,show167 boolean,show168 boolean,show169 boolean,show170 boolean,show171 boolean,show172 boolean,show173 boolean,show174 boolean,show175 boolean,show176 boolean,show177 boolean,show178 boolean,show179 boolean,show180 boolean,show181 boolean,show182 boolean,show183 boolean,show184 boolean,show185 boolean,show186 boolean,show187 boolean,show188 boolean,show189 boolean,show190 boolean,show191 boolean,show192 boolean,show193 boolean,show194 boolean,show195 boolean,show196 boolean,show197 boolean,show198 boolean,show199 boolean, show200 boolean, show201 boolean, show202 boolean, show203 boolean, show204 boolean, show205 boolean, show206 boolean, show207 boolean, show208 boolean, show209 boolean, show210 boolean,\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"))";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"seat_c (  \"sid\" integer generated by default as identity, \"location\"  int  not null , \"row\"  varchar(4) not null, \"rowlabel\"  varchar(50), seat001status varchar(1), name001 varchar(50), ticket001 varchar(50), po001 varchar(32), seat002status varchar(1), name002 varchar(50), ticket002 varchar(50), po002 varchar(32), seat003status varchar(1), name003 varchar(50), ticket003 varchar(50), po003 varchar(32), seat004status varchar(1), name004 varchar(50), ticket004 varchar(50), po004 varchar(32), seat005status varchar(1), name005 varchar(50), ticket005 varchar(50), po005 varchar(32), seat006status varchar(1), name006 varchar(50), ticket006 varchar(50), po006 varchar(32), seat007status varchar(1), name007 varchar(50), ticket007 varchar(50), po007 varchar(32), seat008status varchar(1), name008 varchar(50), ticket008 varchar(50), po008 varchar(32), seat009status varchar(1), name009 varchar(50), ticket009 varchar(50), po009 varchar(32), seat010status varchar(1), name010 varchar(50), ticket010 varchar(50), po010 varchar(32), seat011status varchar(1), name011 varchar(50), ticket011 varchar(50), po011 varchar(32), seat012status varchar(1), name012 varchar(50), ticket012 varchar(50), po012 varchar(32), seat013status varchar(1), name013 varchar(50), ticket013 varchar(50), po013 varchar(32), seat014status varchar(1), name014 varchar(50), ticket014 varchar(50), po014 varchar(32), seat015status varchar(1), name015 varchar(50), ticket015 varchar(50), po015 varchar(32), seat016status varchar(1), name016 varchar(50), ticket016 varchar(50), po016 varchar(32), seat017status varchar(1), name017 varchar(50), ticket017 varchar(50), po017 varchar(32), seat018status varchar(1), name018 varchar(50), ticket018 varchar(50), po018 varchar(32), seat019status varchar(1), name019 varchar(50), ticket019 varchar(50), po019 varchar(32), seat020status varchar(1), name020 varchar(50), ticket020 varchar(50), po020 varchar(32), seat021status varchar(1), name021 varchar(50), ticket021 varchar(50), po021 varchar(32), seat022status varchar(1), name022 varchar(50), ticket022 varchar(50), po022 varchar(32), seat023status varchar(1), name023 varchar(50), ticket023 varchar(50), po023 varchar(32), seat024status varchar(1), name024 varchar(50), ticket024 varchar(50), po024 varchar(32), seat025status varchar(1), name025 varchar(50), ticket025 varchar(50), po025 varchar(32), seat026status varchar(1), name026 varchar(50), ticket026 varchar(50), po026 varchar(32), seat027status varchar(1), name027 varchar(50), ticket027 varchar(50), po027 varchar(32), seat028status varchar(1), name028 varchar(50), ticket028 varchar(50), po028 varchar(32), seat029status varchar(1), name029 varchar(50), ticket029 varchar(50), po029 varchar(32), seat030status varchar(1), name030 varchar(50), ticket030 varchar(50), po030 varchar(32), seat031status varchar(1), name031 varchar(50), ticket031 varchar(50), po031 varchar(32), seat032status varchar(1), name032 varchar(50), ticket032 varchar(50), po032 varchar(32), seat033status varchar(1), name033 varchar(50), ticket033 varchar(50), po033 varchar(32), seat034status varchar(1), name034 varchar(50), ticket034 varchar(50), po034 varchar(32), seat035status varchar(1), name035 varchar(50), ticket035 varchar(50), po035 varchar(32), seat036status varchar(1), name036 varchar(50), ticket036 varchar(50), po036 varchar(32), seat037status varchar(1), name037 varchar(50), ticket037 varchar(50), po037 varchar(32), seat038status varchar(1), name038 varchar(50), ticket038 varchar(50), po038 varchar(32), seat039status varchar(1), name039 varchar(50), ticket039 varchar(50), po039 varchar(32), seat040status varchar(1), name040 varchar(50), ticket040 varchar(50), po040 varchar(32),  \"seat041status varchar(1), name041 varchar(50), ticket041 varchar(50), po041 varchar(32), seat042status varchar(1), name042 varchar(50), ticket042 varchar(50), po042 varchar(32), seat043status varchar(1), name043 varchar(50), ticket043 varchar(50), po043 varchar(32), seat044status varchar(1), name044 varchar(50), ticket044 varchar(50), po044 varchar(32), seat045status varchar(1), name045 varchar(50), ticket045 varchar(50), po045 varchar(32), seat046status varchar(1), name046 varchar(50), ticket046 varchar(50), po046 varchar(32), seat047status varchar(1), name047 varchar(50), ticket047 varchar(50), po047 varchar(32), seat048status varchar(1), name048 varchar(50), ticket048 varchar(50), po048 varchar(32), seat049status varchar(1), name049 varchar(50), ticket049 varchar(50), po049 varchar(32), seat050status varchar(1), name050 varchar(50), ticket050 varchar(50), po050 varchar(32),\"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40),  primary  key(  \"sid\"), foreign  key  (  \"location\")  references \""+schemaName+"\".\"location\"  (  \"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();
      sqlscript="create  table if not exists  \""+schemaName+"\".\"itemprofl_c\"  (  \"sid\" integer generated by default as identity, \"itemid\"  int, \"row\" varchar(20), length varchar(255), width varchar(255),  \"height\"  varchar(30),  \"weightunit\"  varchar(30),  \"shipmode\"  varchar(30),  \"colour\"  varchar(30),  \"material\"  boolean,  \"madein\"  boolean,  \"sku\"  boolean,  \"saleschannel\"  varchar(5),  \"compareprice\"  varchar(5),  \"customscode\"  varchar(5),  \"pagetitle\"  varchar(5),  \"metadescription\"  varchar(5),  \"urlhandle\"  varchar(5),  \"rating\"  varchar(30),  \"points\"  varchar(30),  \"pointsunit\"  varchar(30),  \"dtstyle\"  varchar(30),  \"ftstyle\"  varchar(20),  \"defaultr\"  varchar(3),  \"defaultc\"  varchar(3),  \"dbname\"  varchar(20),  \"rootdir\"  varchar(35),  \"keyorder\"  varchar(3),  \"margin\"  numeric(14,2),  \"footer\"  numeric(14,2),  \"listbuildc\"  boolean,  \"listbuildv\"  boolean,  \"listbuilde\"  boolean,  \"listbrownc\"  int,  \"listbrownv\"  int,  \"listbrowne\"  int,  \"statusfl\"  int,  \"statusfldt\"  timestamp,  \"owner\"  varchar(40),  \"owner2\"  varchar(40), primary  key(\"sid\"), foreign key(itemid) references  \""+schemaName+"\".\"item\"(\"sid\")  )";
      q = entityManager.createNativeQuery(sqlscript);
      q.executeUpdate();

      log.info("create tables_c done");

	 return "create daily backup tables_c done";
      }catch (Exception e) {
       log.severe("create tables_c Exception for \""+schemaName+"\".\", error "+e.getMessage());
       return null;
      }


	}


	public String  truncateBackupTenants() {
         //aug 04 2018 use truncate with cascade for backup tables only
         // Delete is DML, Truncate is DDL and with cascade we can ignore constrain and ok for corrupted backups
         // why schedule not here?? any other
     String sqlScript ="";
try{
    int deletedCount=0;
    int updatedCount=0;
    int insertedCount=0;
    int countp=0;

     // cascade deletes all foreign fields related tables as well

     // follow insertionOrder.txt produced by schemaSpyGui which is in reverse order of deleteOrder.txt.

      countp=deletedCount;
      sqlScript="truncate \""+schemaName+"\".\"address_b cascade";
      Query q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"department_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"division_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"membersgroup_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"residency_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"client_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"control_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"itembom_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"perioddates_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"rgenapp_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"rollupgroup_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"company_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"rgendb_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"account_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"location_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"vendor_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"customer_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"acperiod_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"blobdata_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"clobdata_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"journal_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"machine_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"options_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"rate1f_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate \""+schemaName+"\".\"resource_b cascade";
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;


      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("backups")+" "+bundle.getString("count")+" "+((deletedCount)),""));


 } catch (Exception e) {
      int len=sqlScript.length();
      len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("truncate")+" "+bundle.getString("backup")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));

 }
       return "truncated";



        }

	public String  validateSitesData() {
        // used to check client productCode, license data
        // tbd check excessive or abnormal record counts, orphan records aug14 2020
        //Note if ratetable has any missing prodcode in incentive then will not create serialnum
        String product ="";
        String site="";
        String prodCode="";
       int countn=0;
       int countu=0;
       int countt=0;
       int countp=0;
       int countpr=0;
        yxxxch522xhhxxhxxxxxclientList.setMaxResultsVal(1200);

                //pass1 no serialnum, so add it to client
		try {
                List<Yxxxch522xhhxxhxxxxxclient> listofStatus=yxxxch522xhhxxhxxxxxclientList.getClientsList() ;
		Iterator<Yxxxch522xhhxxhxxxxxclient> itr = listofStatus.iterator();
		while (itr.hasNext()) {
		  yxxxch522xhhxxhxxxxxclientli = itr.next();
                  countt=countt+1;
                  site=yxxxch522xhhxxhxxxxxclientli.getZzxxu2oxxhxxxxxxxxxxowner2();
                  if(yxxxch522xhhxxhxxxxxclientli.getA0xxukxxbvxxxxxxxxxxclientversion().equals("01")
                   && (yxxxch522xhhxxhxxxxxclientli.getB1xxuisxlvxxxxxxxxxxserialnum() ==null
                    || yxxxch522xhhxxhxxxxxclientli.getB1xxuisxlvxxxxxxxxxxserialnum().isEmpty())){
                   prodCode=yxxxch522xhhxxhxxxxxclientli.getG2xxuxpclvxxxxxxxxxxprodcode();//eege or ee
                   if(prodCode !=null && !prodCode.isEmpty() && prodCode.length() >=2){
                    if(yxxxuq591xwwqqhxxxxxrate1fList.getRaaspiIncentiveToEntity("PC",prodCode.substring(0,2)) !=null){
                     product =yxxxuq591xwwqqhxxxxxrate1fList.getRaaspiIncentiveToEntity("PC",prodCode.substring(0,2)).getB2xxuxxrbv51xxxxxxxxstepname();//item sidS
                     if(product !=null && !product.isEmpty()){
		      yxxxch522xhhxxhxxxxxclientli.setB1xxuisxlvxxxxxxxxxxserialnum(product);//sidS
                      yxxxch522xhhxxhxxxxxclientHome.clearInstance();
                      yxxxch522xhhxxhxxxxxclientHome.setInstance(yxxxch522xhhxxhxxxxxclientli);
                      yxxxch522xhhxxhxxxxxclientHome.allowUpdate();
                      countn=countn+1;
                      product="";
                      continue;
                     }else{
                      countp=countp+1;
                      product="";
                      continue;
                     }
                    }else{
                      countp=countp+1;
                      product="";
                      continue;
                    }
                   }else{
                     countpr=countpr+1;//skip if invalid prodcode
                     product="";
                   }
                  }
		}//while loop
                FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("validateSitesData")+" "+bundle.getString("pass1")+" "+bundle.getString("done")+ ", "+bundle.getString("Total")+" "+countt+": "+bundle.getString("added")+" "+countn+" "+bundle.getString("client-noprodcode")+" "+countpr+" "+bundle.getString("rate-no-prodcode-match")+" "+countp,""));
		} catch (Exception e) {
		 log.severe("validateSitesData error " + e.getMessage());
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("validateSitesData")+" "+bundle.getString("pass1")+ " "+bundle.getString("error")+"- "+site+" "+e.getMessage(),""));
		}

         //pass2 exising but needs change
         countn=0;
         countu=0;
         countt=0;
         countp=0;
         countpr=0;

		try {
                List<Yxxxch522xhhxxhxxxxxclient> listofStatus=yxxxch522xhhxxhxxxxxclientList.getClientsList() ;
		Iterator<Yxxxch522xhhxxhxxxxxclient> itr = listofStatus.iterator();
		while (itr.hasNext()) {
		  yxxxch522xhhxxhxxxxxclientli = itr.next();
                  countt=countt+1;
                  site=yxxxch522xhhxxhxxxxxclientli.getZzxxu2oxxhxxxxxxxxxxowner2();
                  if(yxxxch522xhhxxhxxxxxclientli.getA0xxukxxbvxxxxxxxxxxclientversion().equals("01")
                   && (yxxxch522xhhxxhxxxxxclientli.getB1xxuisxlvxxxxxxxxxxserialnum() !=null
                    && !yxxxch522xhhxxhxxxxxclientli.getB1xxuisxlvxxxxxxxxxxserialnum().isEmpty())){
                    //maynot be null but rate table was updated or was wrong . So assume assume prodcode correct,recheck and update
                   prodCode=yxxxch522xhhxxhxxxxxclientli.getG2xxuxpclvxxxxxxxxxxprodcode();
                   if(prodCode !=null && !prodCode.isEmpty() && prodCode.length() >=2){//oage or oa
                    if(yxxxuq591xwwqqhxxxxxrate1fList.getRaaspiIncentiveToEntity("PC",prodCode.substring(0,2)) !=null){
                     product =yxxxuq591xwwqqhxxxxxrate1fList.getRaaspiIncentiveToEntity("PC",prodCode.substring(0,2)).getB2xxuxxrbv51xxxxxxxxstepname();
                     if(product !=null && !product.isEmpty()){
                      if(!yxxxch522xhhxxhxxxxxclientli.getB1xxuisxlvxxxxxxxxxxserialnum().equals(product)){
		       yxxxch522xhhxxhxxxxxclientli.setB1xxuisxlvxxxxxxxxxxserialnum(product);
                       yxxxch522xhhxxhxxxxxclientHome.clearInstance();
                       yxxxch522xhhxxhxxxxxclientHome.setInstance(yxxxch522xhhxxhxxxxxclientli);
                       yxxxch522xhhxxhxxxxxclientHome.allowUpdate();
                       product="";
                       countu=countu+1;
                       continue;
                      }
                     }else{
                       countp=countp+1;
                       product="";
                       continue;
                     }
                    }else{
                       countp=countp+1;
                       product="";
                       continue;
                    }
                   }else{
                     countpr=countpr+1;
                     product="";
                   }
                  }
		}//while loop
                FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("validateSitesData")+" "+bundle.getString("pass2")+ " "+bundle.getString("done")+ ", "+bundle.getString("Total")+" "+countt+": "+bundle.getString("client-noprodcode")+" "+countpr+" "+bundle.getString("replaced")+" "+countu+" "+bundle.getString("no-prodcode-match")+" "+countp,""));
		} catch (Exception e) {
		 log.severe("validateSitesData error " + e.getMessage());
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("validateSitesData")+" "+bundle.getString("pass2")+ " "+bundle.getString("error")+"- "+site+" "+e.getMessage(),""));
		}
         return null;


        }


	public String  fullBackupAll() {
      // to be used after backup truncate ie empty all backups
      // 1-insert into backup if rows in main
     String sqlScript ="";
try{
    int deletedCount=0;
    int updatedCount=0;
    int insertedCount=0;
    int countp=0;
     // insert into backup if new rows in main
     // follow insertionOrder.txt produced by schemaSpyGui which is in reverse order of deleteOrder.txt.

      sqlScript="insert into \""+schemaName+"\".\"address_b select * from \""+schemaName+"\".\"address a where  not exists (select \"sid\" from \""+schemaName+"\".\"address_b b where b.sid = a.sid\")";
      Query q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"department_b select * from \""+schemaName+"\".\"department a where  not exists (select \"sid\" from \""+schemaName+"\".\"department_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"division_b select * from \""+schemaName+"\".\"division a where  not exists (select \"sid\" from \""+schemaName+"\".\"division_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"membersgroup_b select * from \""+schemaName+"\".\"membersgroup\" a where  not exists (select \"sid\" from \""+schemaName+"\".\"membersgroup_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"residency_b select * from \""+schemaName+"\".\"residency a where  not exists (select \"sid\" from \""+schemaName+"\".\"residency_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"client_b select * from \""+schemaName+"\".\"client a where  not exists (select \"sid\" from \""+schemaName+"\".\"client_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"control_b select * from \""+schemaName+"\".\"control a where  not exists (select \"sid\" from \""+schemaName+"\".\"control_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itembom_b select * from \""+schemaName+"\".\"itembom a where  not exists (select \"sid\" from \""+schemaName+"\".\"itembom_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();
//bundle
      sqlScript="insert into \""+schemaName+"\".\"resource_bundle_b select * from \""+schemaName+"\".\"resource_bundle a where  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();
      /* prev one covers it
      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"resource_bundle_b select * from \""+schemaName+"\".\"resource_bundle a where  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", "SYSTEM");
      insertedCount=insertedCount+q.executeUpdate();
      }
      */
      sqlScript="insert into \""+schemaName+"\".\"perioddates_b select * from \""+schemaName+"\".\"perioddates a where  not exists (select \"sid\" from \""+schemaName+"\".\"perioddates_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rgenapp_b select * from \""+schemaName+"\".\"rgenapp\" a where  not exists (select \"sid\" from \""+schemaName+"\".\"rgenapp_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rollupgroup_b select * from \""+schemaName+"\".\"rollupgroup a where  not exists (select \"sid\" from \""+schemaName+"\".\"rollupgroup_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"company_b select * from \""+schemaName+"\".\"company a where  not exists (select \"sid\" from \""+schemaName+"\".\"company_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rgendb_b select * from \""+schemaName+"\".\"rgendb\" a where  not exists (select \"sid\" from \""+schemaName+"\".\"rgendb_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"account_b select * from \""+schemaName+"\".\"account a where  not exists (select \"sid\" from \""+schemaName+"\".\"account_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"location_b select * from \""+schemaName+"\".\"location a where  not exists (select \"sid\" from \""+schemaName+"\".\"location_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vendor_b select * from \""+schemaName+"\".\"vendor a where  not exists (select \"sid\" from \""+schemaName+"\".\"vendor_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"customer_b select * from \""+schemaName+"\".\"customer a where  not exists (select \"sid\" from \""+schemaName+"\".\"customer_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"employee_b select * from \""+schemaName+"\".\"employee a where  not exists (select \"sid\" from \""+schemaName+"\".\"employee_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"item_b select * from \""+schemaName+"\".\"item a where  not exists (select \"sid\" from \""+schemaName+"\".\"item_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"activity_b select * from \""+schemaName+"\".\"activity a where  not exists (select \"sid\" from \""+schemaName+"\".\"activity_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"machine_b select * from \""+schemaName+"\".\"machine a where  not exists (select \"sid\" from \""+schemaName+"\".\"machine_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuquote_b select * from \""+schemaName+"\".\"cuquote\" a where  not exists (select \"sid\" from \""+schemaName+"\".\"cuquote_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"venquote_b select * from \""+schemaName+"\".\"venquote a where  not exists (select \"sid\" from \""+schemaName+"\".\"venquote_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"outline_b select * from \""+schemaName+"\".\"outline a where  not exists (select \"sid\" from \""+schemaName+"\".\"outline_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"project_b select * from \""+schemaName+"\".\"projectt\" a where  not exists (select \"sid\" from \""+schemaName+"\".\"project_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuorders_b select * from \""+schemaName+"\".\"cuorders a where  not exists (select \"sid\" from \""+schemaName+"\".\"cuorders_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vendorders_b select * from \""+schemaName+"\".\"vendorders a where  not exists (select \"sid\" from \""+schemaName+"\".\"vendorders_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vshipmen_b select * from \""+schemaName+"\".\"vshipmen a where  not exists (select \"sid\" from \""+schemaName+"\".\"vshipmen_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuinvoice_b select * from \""+schemaName+"\".\"cuinvoice a where  not exists (select \"sid\" from \""+schemaName+"\".\"cuinvoice_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"shipment_b select * from \""+schemaName+"\".\"shipment a where  not exists (select \"sid\" from \""+schemaName+"\".\"shipment_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vinvoice_b select * from \""+schemaName+"\".\"vinvoice a where  not exists (select \"sid\" from \""+schemaName+"\".\"vinvoice_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"groupmembers_b select * from \""+schemaName+"\".\"groupmembers a where  not exists (select \"sid\" from \""+schemaName+"\".\"groupmembers_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"processdetails_b select * from \""+schemaName+"\".\"processdetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"processdetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itemjob_b select * from \""+schemaName+"\".\"itemjob a where  not exists (select \"sid\" from \""+schemaName+"\".\"itemjob_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"rgentable_b select * from \""+schemaName+"\".\"rgentable a where  not exists (select \"sid\" from \""+schemaName+"\".\"rgentable_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"wageearner_b select * from \""+schemaName+"\".\"wageearner a where  not exists (select \"sid\" from \""+schemaName+"\".\"wageearner_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"activityjob_b select * from \""+schemaName+"\".\"activityjob a where  not exists (select \"sid\" from \""+schemaName+"\".\"activityjob_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"glentries_b select * from \""+schemaName+"\".\"glentries a where  not exists (select \"sid\" from \""+schemaName+"\".\"glentries_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cpayment_b select * from \""+schemaName+"\".\"cpayment a where  not exists (select \"sid\" from \""+schemaName+"\".\"cpayment_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"task_b select * from \""+schemaName+"\".\"task a where  not exists (select \"sid\" from \""+schemaName+"\".\"task_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vpayment_b select * from \""+schemaName+"\".\"vpayment a where  not exists (select \"sid\" from \""+schemaName+"\".\"vpayment_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"emplorders_b select * from \""+schemaName+"\".\"emplorders a where  not exists (select \"sid\" from \""+schemaName+"\".\"emplorders_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"user_b select * from \""+schemaName+"\".\"user a where  not exists (select \"sid\" from \""+schemaName+"\".\"user_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"acintegr_b select * from \""+schemaName+"\".\"acintegr a where  not exists (select \"sid\" from \""+schemaName+"\".\"acintegr_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"controlusagebyperiods_b select * from \""+schemaName+"\".\"controlusagebyperiods a where  not exists (select \"sid\" from \""+schemaName+"\".\"controlusagebyperiods_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"processattributes_b select * from \""+schemaName+"\".\"processattributes a where  not exists (select \"sid\" from \""+schemaName+"\".\"processattributes_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"resource_b select * from \""+schemaName+"\".\"resource\" a where  not exists (select \"sid\" from \""+schemaName+"\".\"resource_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();
      /* prev one covers this
      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"resource_b select * from \""+schemaName+"\".\"resource\" a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }
      */
      sqlScript="insert into \""+schemaName+"\".\"userprofl_b select * from \""+schemaName+"\".\"userprofl a where  not exists (select \"sid\" from \""+schemaName+"\".\"userprofl_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"venartha_b select * from \""+schemaName+"\".\"venartha a where  not exists (select \"sid\" from \""+schemaName+"\".\"venartha_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"wageearneraux_b select * from \""+schemaName+"\".\"wageearneraux a where  not exists (select \"sid\" from \""+schemaName+"\".\"wageearneraux_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"activityjobdetails_b select * from \""+schemaName+"\".\"activityjobdetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"activityjobdetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cupdetails_b select * from \""+schemaName+"\".\"cupdetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"cupdetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"gentriesdetails_b select * from \""+schemaName+"\".\"gentriesdetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"gentriesdetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"holiday_b select * from \""+schemaName+"\".\"holiday a where  not exists (select \"sid\" from \""+schemaName+"\".\"holiday_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itembomdetails_b select * from \""+schemaName+"\".\"itembomdetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"itembomdetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();




      sqlScript="insert into \""+schemaName+"\".\"rgenfields_b select * from \""+schemaName+"\".\"rgenfields a where  not exists (select \"sid\" from \""+schemaName+"\".\"rgenfields_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"usagebyperiods_b select * from \""+schemaName+"\".\"usagebyperiods a where  not exists (select \"sid\" from \""+schemaName+"\".\"usagebyperiods_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuidetails_b select * from \""+schemaName+"\".\"cuidetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"cuidetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuodetails_b select * from \""+schemaName+"\".\"cuodetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"cuodetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuqdetails_b select * from \""+schemaName+"\".\"cuqdetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"cuqdetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"emplodetails_b select * from \""+schemaName+"\".\"emplodetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"emplodetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"resourcedetails_b select * from \""+schemaName+"\".\"resourcedetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"resourcedetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendidetails_b select * from \""+schemaName+"\".\"vendidetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"vendidetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendodetails_b select * from \""+schemaName+"\".\"vendodetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"vendodetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendpdetails_b select * from \""+schemaName+"\".\"vendpdetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"vendpdetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendqdetails_b select * from \""+schemaName+"\".\"vendqdetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"vendqdetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"ccontact_b select * from \""+schemaName+"\".\"ccontact a where  not exists (select \"sid\" from \""+schemaName+"\".\"ccontact_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"shipmentdetails_b select * from \""+schemaName+"\".\"shipmentdetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"shipmentdetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vcontact_b select * from \""+schemaName+"\".\"vcontact a where  not exists (select \"sid\" from \""+schemaName+"\".\"vcontact_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vshipmendetails_b select * from \""+schemaName+"\".\"vshipmendetails a where  not exists (select \"sid\" from \""+schemaName+"\".\"vshipmendetails_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"schedule_b select * from \""+schemaName+"\".\"schedule a where  not exists (select \"sid\" from \""+schemaName+"\".\"schedule_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="insert into \""+schemaName+"\".\"jobassignment_b select * from \""+schemaName+"\".\"jobassignment a where  not exists (select \"sid\" from \""+schemaName+"\".\"jobassignment_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"acperiod_b select * from \""+schemaName+"\".\"acperiod a where  not exists (select \"sid\" from \""+schemaName+"\".\"acperiod_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"arthahist_b select * from \""+schemaName+"\".\"arthahist a where  not exists (select \"sid\" from \""+schemaName+"\".\"arthahist_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"arthatbl_b select * from \""+schemaName+"\".\"arthatbl a where  not exists (select \"sid\" from \""+schemaName+"\".\"arthatbl_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"holiday_b select * from \""+schemaName+"\".\"holiday a where  not exists (select \"sid\" from \""+schemaName+"\".\"holiday_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"blobdata_b select * from \""+schemaName+"\".\"blobdata a where  not exists (select \"sid\" from \""+schemaName+"\".\"blobdata_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();
      /*
      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"blobdata_b select * from \""+schemaName+"\".\"blobdata a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"blobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }
      */
      sqlScript="insert into \""+schemaName+"\".\"cjournal_b select * from \""+schemaName+"\".\"cjournal a where  not exists (select \"sid\" from \""+schemaName+"\".\"cjournal_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"clobdata_b select * from \""+schemaName+"\".\"clobdata a where  not exists (select \"sid\" from \""+schemaName+"\".\"clobdata_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      /* raaspi only*/
      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"clobdata_b select * from \""+schemaName+"\".\"clobdata a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"clobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"editlog_b select * from \""+schemaName+"\".\"editlog a where  not exists (select \"sid\" from \""+schemaName+"\".\"editlog_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"genoptions_b select * from \""+schemaName+"\".\"genoptions a where  not exists (select \"sid\" from \""+schemaName+"\".\"genoptions_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"hlogfile_b select * from \""+schemaName+"\".\"hlogfile a where  not exists (select \"sid\" from \""+schemaName+"\".\"hlogfile_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"jjournal_b select * from \""+schemaName+"\".\"jjournal a where  not exists (select \"sid\" from \""+schemaName+"\".\"jjournal_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"journal_b select * from \""+schemaName+"\".\"journal a where  not exists (select \"sid\" from \""+schemaName+"\".\"journal_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"nextserialno_b select * from \""+schemaName+"\".\"nextserialno a where  not exists (select \"sid\" from \""+schemaName+"\".\"nextserialno_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"options_b select * from \""+schemaName+"\".\"options a where  not exists (select \"sid\" from \""+schemaName+"\".\"options_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"rate1f_b select * from \""+schemaName+"\".\"rate1f a where  not exists (select \"sid\" from \""+schemaName+"\".\"rate1f_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"scandate_b select * from \""+schemaName+"\".\"scandate a where  not exists (select \"sid\" from \""+schemaName+"\".\"scandate_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"serialnumbers_b select * from \""+schemaName+"\".\"serialnumbers a where  not exists (select \"sid\" from \""+schemaName+"\".\"serialnumbers_b b where b.sid = a.sid\")";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();



      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("removed")+": "+deletedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));


     /* need to change the logic as it affects all owner2, may be a xxx-c will be used for system backups
     // update client record field carcsize to show last backupdate as a varchar
     sqlScript="update \""+schemaName+"\".\"client set carcsize=:backupdts where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2Code", owner2Code).setParameter("backupdts", sdf.format(calendar.getTime()));
      q.executeUpdate();
      */
 } catch (Exception e) {
      int len=sqlScript.length();
      len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("full")+" "+bundle.getString("backup")+" "+bundle.getString("All")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));

 }
	 return "backUp All done";

}




	public String  fullBackupTenant() {
      // to be used when incremental backup fails for any reason like corrupted data or record relations
      // 1-remove all rows from backup
      // 2-insert into backup if rows in main
     String sqlScript ="";
     int errorCount=0;
     String errMsg="";
    int deletedCount=0;
    int updatedCount=0;
    int insertedCount=0;
    int countp=0;
try{

     // follow deleteOrder.txt produced by schemaSpyGui which is in reverse order of insertionOrder.txt.

     countp=deletedCount;
     sqlScript="delete from \""+schemaName+"\".\"serialnumbers_b a where  a.owner2=:owner2"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("serialnumbers_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
     countp=deletedCount;
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}
try{
     sqlScript="delete from \""+schemaName+"\".\"scandate_b a where  a.owner2=:owner2";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("scandate_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}
try{
     sqlScript="delete from \""+schemaName+"\".\"rate1f_b a where  a.owner2=:owner2";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("scandate_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));

     countp=deletedCount;
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}


try{
     sqlScript="delete from \""+schemaName+"\".\"options_b a where  a.owner2=:owner2";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("scandate_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));

     countp=deletedCount;
     sqlScript="delete from \""+schemaName+"\".\"nextserialno_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"journal_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jjournal_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"hlogfile_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"genoptions_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"editlog_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"clobdata_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cjournal_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"blobdata_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthatbl_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthahist_b a where   a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acperiod_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jobassignment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"scheduledetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmendetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vcontact_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipmentdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"ccontact_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendqdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendpdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendodetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendidetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resourcedetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resourcedetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"processdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"emplodetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuqdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuodetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuidetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"usagebyperiods_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgenfields_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itembomdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"holiday_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"gentriesdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cupdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjobdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearneraux_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venartha_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"userprofl_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resource_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     if(owner2Code.equals("raaspi")){
     sqlScript="delete from \""+schemaName+"\".\"resource_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", "SYSTEM");
     deletedCount = deletedCount +q.executeUpdate();
     }

     sqlScript="delete from \""+schemaName+"\".\"processattributes_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acintegr_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"user_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplorders_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vpayment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"task_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cpayment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"glentries_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjob_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearner_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgentable_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itemjob_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("itemjob_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"schedule_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("schedule_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"groupmembers_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vinvoice_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmen_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();



     sqlScript="delete from \""+schemaName+"\".\"vendorders_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuinvoice_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuorders_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"project_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"outline_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venquote_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuquote_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"machine_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activity_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"item_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"employee_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"customer_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendor_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"location_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"account_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgendb_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"company_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rollupgroup_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rgenapp_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"resource_bundle_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     if(owner2Code.equals("raaspi")){
     sqlScript="delete from \""+schemaName+"\".\"resource_bundle_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", "SYSTEM");
     deletedCount = deletedCount +q.executeUpdate();
     }
     sqlScript="delete from \""+schemaName+"\".\"perioddates_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"itembom_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"control_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"client_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"residency_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"membersgroup_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"division_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"department_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"address_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     // insert into backup if new rows in main
     // follow insertionOrder.txt produced by schemaSpyGui which is in reverse order of deleteOrder.txt.

      sqlScript="insert into \""+schemaName+"\".\"address_b select * from \""+schemaName+"\".\"address a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"address_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"department_b select * from \""+schemaName+"\".\"department a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"department_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"division_b select * from \""+schemaName+"\".\"division a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"division_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"membersgroup_b select * from \""+schemaName+"\".\"membersgroup\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"membersgroup_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"residency_b select * from \""+schemaName+"\".\"residency a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"residency_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"client_b select * from \""+schemaName+"\".\"client a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"client_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"control_b select * from \""+schemaName+"\".\"control a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"control_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itembom_b select * from \""+schemaName+"\".\"itembom a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"itembom_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();
//bundle
      sqlScript="insert into \""+schemaName+"\".\"resource_bundle_b select * from \""+schemaName+"\".\"resource_bundle a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"resource_bundle_b select * from \""+schemaName+"\".\"resource_bundle a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", "SYSTEM");
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"perioddates_b select * from \""+schemaName+"\".\"perioddates a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"perioddates_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rgenapp_b select * from \""+schemaName+"\".\"rgenapp\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgenapp_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rollupgroup_b select * from \""+schemaName+"\".\"rollupgroup a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rollupgroup_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"company_b select * from \""+schemaName+"\".\"company a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"company_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rgendb_b select * from \""+schemaName+"\".\"rgendb\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgendb_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"account_b select * from \""+schemaName+"\".\"account a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"account_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"location_b select * from \""+schemaName+"\".\"location a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"location_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vendor_b select * from \""+schemaName+"\".\"vendor a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendor_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"customer_b select * from \""+schemaName+"\".\"customer a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"customer_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"employee_b select * from \""+schemaName+"\".\"employee a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"employee_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"item_b select * from \""+schemaName+"\".\"item a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"item_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"activity_b select * from \""+schemaName+"\".\"activity a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"activity_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"machine_b select * from \""+schemaName+"\".\"machine a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"machine_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuquote_b select * from \""+schemaName+"\".\"cuquote\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuquote_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"venquote_b select * from \""+schemaName+"\".\"venquote a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"venquote_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"outline_b select * from \""+schemaName+"\".\"outline a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"outline_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"project_b select * from \""+schemaName+"\".\"projectt\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"project_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuorders_b select * from \""+schemaName+"\".\"cuorders a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vendorders_b select * from \""+schemaName+"\".\"vendorders a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vshipmen_b select * from \""+schemaName+"\".\"vshipmen a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vshipmen_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuinvoice_b select * from \""+schemaName+"\".\"cuinvoice a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuinvoice_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"shipment_b select * from \""+schemaName+"\".\"shipment a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"shipment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vinvoice_b select * from \""+schemaName+"\".\"vinvoice a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vinvoice_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"groupmembers_b select * from \""+schemaName+"\".\"groupmembers a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"groupmembers_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"processdetails_b select * from \""+schemaName+"\".\"processdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"processdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itemjob_b select * from \""+schemaName+"\".\"itemjob a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"itemjob_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"rgentable_b select * from \""+schemaName+"\".\"rgentable a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgentable_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"wageearner_b select * from \""+schemaName+"\".\"wageearner a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"wageearner_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"activityjob_b select * from \""+schemaName+"\".\"activityjob a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"activityjob_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"glentries_b select * from \""+schemaName+"\".\"glentries a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"glentries_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cpayment_b select * from \""+schemaName+"\".\"cpayment a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cpayment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"task_b select * from \""+schemaName+"\".\"task a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"task_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vpayment_b select * from \""+schemaName+"\".\"vpayment a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vpayment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"emplorders_b select * from \""+schemaName+"\".\"emplorders a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"emplorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"user_b select * from \""+schemaName+"\".\"user a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"user_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"acintegr_b select * from \""+schemaName+"\".\"acintegr a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"acintegr_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"controlusagebyperiods_b select * from \""+schemaName+"\".\"controlusagebyperiods a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"controlusagebyperiods_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"processattributes_b select * from \""+schemaName+"\".\"processattributes a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"processattributes_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"resource_b select * from \""+schemaName+"\".\"resource\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"resource_b select * from \""+schemaName+"\".\"resource\" a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"userprofl_b select * from \""+schemaName+"\".\"userprofl a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"userprofl_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"venartha_b select * from \""+schemaName+"\".\"venartha a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"venartha_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"wageearneraux_b select * from \""+schemaName+"\".\"wageearneraux a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"wageearneraux_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"activityjobdetails_b select * from \""+schemaName+"\".\"activityjobdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"activityjobdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cupdetails_b select * from \""+schemaName+"\".\"cupdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cupdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"gentriesdetails_b select * from \""+schemaName+"\".\"gentriesdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"gentriesdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"holiday_b select * from \""+schemaName+"\".\"holiday a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"holiday_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itembomdetails_b select * from \""+schemaName+"\".\"itembomdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"itembomdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();




      sqlScript="insert into \""+schemaName+"\".\"rgenfields_b select * from \""+schemaName+"\".\"rgenfields a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgenfields_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"usagebyperiods_b select * from \""+schemaName+"\".\"usagebyperiods a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"usagebyperiods_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuidetails_b select * from \""+schemaName+"\".\"cuidetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuidetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuodetails_b select * from \""+schemaName+"\".\"cuodetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuqdetails_b select * from \""+schemaName+"\".\"cuqdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuqdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"emplodetails_b select * from \""+schemaName+"\".\"emplodetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"emplodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"resourcedetails_b select * from \""+schemaName+"\".\"resourcedetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resourcedetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendidetails_b select * from \""+schemaName+"\".\"vendidetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendidetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendodetails_b select * from \""+schemaName+"\".\"vendodetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendpdetails_b select * from \""+schemaName+"\".\"vendpdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendpdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendqdetails_b select * from \""+schemaName+"\".\"vendqdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendqdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"ccontact_b select * from \""+schemaName+"\".\"ccontact a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"ccontact_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"shipmentdetails_b select * from \""+schemaName+"\".\"shipmentdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"shipmentdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vcontact_b select * from \""+schemaName+"\".\"vcontact a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vcontact_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vshipmendetails_b select * from \""+schemaName+"\".\"vshipmendetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vshipmendetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"schedule_b select * from \""+schemaName+"\".\"schedule a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"schedule_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="insert into \""+schemaName+"\".\"jobassignment_b select * from \""+schemaName+"\".\"jobassignment a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"jobassignment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"acperiod_b select * from \""+schemaName+"\".\"acperiod a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"acperiod_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"arthahist_b select * from \""+schemaName+"\".\"arthahist a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"arthahist_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"arthatbl_b select * from \""+schemaName+"\".\"arthatbl a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"arthatbl_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"holiday_b select * from \""+schemaName+"\".\"holiday a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"holiday_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"blobdata_b select * from \""+schemaName+"\".\"blobdata a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"blobdata_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"blobdata_b select * from \""+schemaName+"\".\"blobdata a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"blobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"cjournal_b select * from \""+schemaName+"\".\"cjournal a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cjournal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"clobdata_b select * from \""+schemaName+"\".\"clobdata a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"clobdata_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      /* raaspi only*/
      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"clobdata_b select * from \""+schemaName+"\".\"clobdata a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"clobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"editlog_b select * from \""+schemaName+"\".\"editlog a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"editlog_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"genoptions_b select * from \""+schemaName+"\".\"genoptions a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"genoptions_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"hlogfile_b select * from \""+schemaName+"\".\"hlogfile a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"hlogfile_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"jjournal_b select * from \""+schemaName+"\".\"jjournal a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"jjournal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"journal_b select * from \""+schemaName+"\".\"journal a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"journal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"nextserialno_b select * from \""+schemaName+"\".\"nextserialno a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"nextserialno_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"options_b select * from \""+schemaName+"\".\"options a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"options_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"rate1f_b select * from \""+schemaName+"\".\"rate1f a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rate1f_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"scandate_b select * from \""+schemaName+"\".\"scandate a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"scandate_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"serialnumbers_b select * from \""+schemaName+"\".\"serialnumbers a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"serialnumbers_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();



      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("removed")+": "+deletedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));

     // update client record field carcsize to show last backupdate as a varchar
     sqlScript="update \""+schemaName+"\".\"client set carcsize=:backupdts where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2Code", owner2Code).setParameter("backupdts", sdf.format(calendar.getTime()));
      q.executeUpdate();
 } catch (Exception e) {
      int len=sqlScript.length();
      len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("full")+" "+bundle.getString("backup")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));

 }
	 return "backUp done";

}




	public String  backupTenant() {
      // C:\schemaspygui\postgres_postgre_ has tables relation and dependency info like deletionOrder.txt
      // add a lock ??
      // to file not used since in cloud pl/sql does not seem to have access to files
      // this backUp is on demand and done by tenant
      // there is daily backup to tables for all tenants while app is up and also a separate sbnapshot daily backup when app is stopped
      // snapshot is on file and meant for disaster situation
      //
      // 1-remove rows from backup if not in main ie any old (ie not used) rows in backup will be removed
      // 2-insert into backup if new rows in main
      // 3-update backup if \"row\" in main has different change time  (relies on statusfldate change)
      // follow the deletion order list produced by schemaspygui C:\schemaspygui\postgres_postgre_\deletionOrder.txt ( future use the list as input to automate )
      // insertionOrder.txt for insert, for update order does not matter because we are not dropping or adding any relation but will follow
      // insertionOrder.txt
      // resource_bundle,resource,clob and blob have SYSTEM records which need extra logic
      // SYSTEM records should not be deleted from main or backup table but should be copied into backup if needed ??? revisit
      // SELECT * FROM information_schema.columns WHERE table_schema = 'genapp'  AND table_name   = 'client'
     String sqlScript ="";
try{
    int deletedCount=0;
    int updatedCount=0;
    int insertedCount=0;
    int countp=0;

     sqlScript="delete from \""+schemaName+"\".\"serialnumbers_b b where   b.owner2=:owner2 and not exists  (select \"sid\" from \""+schemaName+"\".\"serialnumbers a where  a.sid = b.sid and a.owner2=:owner2)";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("serialnumbers_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"scandate_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"scandate a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("scandate_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"rate1f_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rate1f a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("rate1f_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"options_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"options a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("options_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"nextserialno_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"nextserialno a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("nextserialno_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"journal_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"journal a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("journal_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"jjournal_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"jjournal a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"hlogfile_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"hlogfile a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"genoptions_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"genoptions a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"editlog_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"editlog a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"clobdata_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"clobdata a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cjournal_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cjournal a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"blobdata_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"blobdata a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthatbl_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"arthatbl a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthahist_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"arthahist a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acperiod_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"acperiod a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jobassignment_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"jobassignment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     //feb 15 2019
     sqlScript="delete from \""+schemaName+"\".\"scheduledetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"schedule a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmendetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vshipmendetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vcontact_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vcontact a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipmentdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"shipmentdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"ccontact_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"ccontact a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendqdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendqdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendpdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendpdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendodetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendodetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendidetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendidetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resourcedetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"resourcedetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"processdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"processdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplodetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"emplodetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuqdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuqdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuodetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuodetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuidetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuidetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"usagebyperiods_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"usagebyperiods a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgenfields_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rgenfields a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"itembomdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"itembomdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"holiday_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"holiday a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"gentriesdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"gentriesdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cupdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cupdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjobdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"activityjobdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearneraux_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"wageearneraux a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venartha_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"venartha a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"userprofl_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"userprofl a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resource_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"resource\" a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"processattributes_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"processattributes a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"controlusagebyperiods a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acintegr_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"acintegr a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"user_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"user a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplorders_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"emplorders a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vpayment_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vpayment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"task_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"task a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cpayment_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cpayment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"glentries_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"glentries a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"controlusagebyperiods a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjob_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"activityjob a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearner_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"wageearner a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgentable_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rgentable a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itemjob_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"itemjob a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmen_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vshipmen a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"schedule_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"schedule a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"groupmembers_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"groupmembers a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vinvoice_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vinvoice a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipment_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"shipment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendorders_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendorders a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuinvoice_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuinvoice a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuorders_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuorders a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"project_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"projectt\" a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"outline_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"outline a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venquote_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"venquote a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuquote_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuquote\" a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"machine_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"machine a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activity_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"activity a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"item_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"item a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"employee_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"employee a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"customer_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"customer a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendor_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendor a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"location_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"location a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("location_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;
     sqlScript="delete from \""+schemaName+"\".\"account_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"account a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("account_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"rgendb_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rgendb\" a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"company_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"company a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rollupgroup_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rollupgroup a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rgenapp_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rgenapp\" a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"resource_bundle_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"resource_bundle a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"perioddates_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"perioddates a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"itembom_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"itembom a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"resource_bundle_b select * from \""+schemaName+"\".\"resource_bundle a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"resource_bundle_b select * from \""+schemaName+"\".\"resource_bundle a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

     sqlScript="delete from \""+schemaName+"\".\"control_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"control a where  a.sid = b.sid and a.owner2=:owner2 )";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"client_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"residency_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"residency a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"membersgroup_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"membersgroup\" a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"division_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"division a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"department_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"department a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"address_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"address a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();





     // insert into backup if new rows in main
     // follow insertionOrder.txt produced by schemaSpyGui which is in reverse order of deleteOrder.txt.

      sqlScript="insert into \""+schemaName+"\".\"address_b select * from \""+schemaName+"\".\"address a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"address_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"department_b select * from \""+schemaName+"\".\"department a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"department_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"division_b select * from \""+schemaName+"\".\"division a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"division_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"membersgroup_b select * from \""+schemaName+"\".\"membersgroup\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"membersgroup_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"residency_b select * from \""+schemaName+"\".\"residency a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"residency_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"client_b select * from \""+schemaName+"\".\"client a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"client_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"control_b select * from \""+schemaName+"\".\"control a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"control_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itembom_b select * from \""+schemaName+"\".\"itembom a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"itembom_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"resource_bundle_b select * from \""+schemaName+"\".\"resource_bundle a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"resource_bundle_b select * from \""+schemaName+"\".\"resource_bundle a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", "SYSTEM");
      insertedCount=insertedCount+q.executeUpdate();
      }


      sqlScript="insert into \""+schemaName+"\".\"perioddates_b select * from \""+schemaName+"\".\"perioddates a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"perioddates_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rgenapp_b select * from \""+schemaName+"\".\"rgenapp\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgenapp_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rollupgroup_b select * from \""+schemaName+"\".\"rollupgroup a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rollupgroup_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"company_b select * from \""+schemaName+"\".\"company a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"company_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rgendb_b select * from \""+schemaName+"\".\"rgendb\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgendb_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("insert")+" "+bundle.getString("rgendb_b")+" "+bundle.getString("count")+" "+(insertedCount-countp),""));
      countp=insertedCount;

      sqlScript="insert into \""+schemaName+"\".\"account_b select * from \""+schemaName+"\".\"account a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"account_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("insert")+" "+bundle.getString("account_b")+" "+bundle.getString("count")+" "+(insertedCount-countp),""));
      countp=insertedCount;

      sqlScript="insert into \""+schemaName+"\".\"location_b select * from \""+schemaName+"\".\"location a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"location_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vendor_b select * from \""+schemaName+"\".\"vendor a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendor_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"customer_b select * from \""+schemaName+"\".\"customer a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"customer_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"employee_b select * from \""+schemaName+"\".\"employee a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"employee_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"item_b select * from \""+schemaName+"\".\"item a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"item_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"activity_b select * from \""+schemaName+"\".\"activity a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"activity_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"machine_b select * from \""+schemaName+"\".\"machine a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"machine_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuquote_b select * from \""+schemaName+"\".\"cuquote\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuquote_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"venquote_b select * from \""+schemaName+"\".\"venquote a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"venquote_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"outline_b select * from \""+schemaName+"\".\"outline a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"outline_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"project_b select * from \""+schemaName+"\".\"projectt\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"project_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuorders_b select * from \""+schemaName+"\".\"cuorders a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vendorders_b select * from \""+schemaName+"\".\"vendorders a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vshipmen_b select * from \""+schemaName+"\".\"vshipmen a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vshipmen_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuinvoice_b select * from \""+schemaName+"\".\"cuinvoice a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuinvoice_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"shipment_b select * from \""+schemaName+"\".\"shipment a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"shipment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vinvoice_b select * from \""+schemaName+"\".\"vinvoice a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vinvoice_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"groupmembers_b select * from \""+schemaName+"\".\"groupmembers a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"groupmembers_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"processdetails_b select * from \""+schemaName+"\".\"processdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"processdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itemjob_b select * from \""+schemaName+"\".\"itemjob a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"itemjob_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"rgentable_b select * from \""+schemaName+"\".\"rgentable a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgentable_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"wageearner_b select * from \""+schemaName+"\".\"wageearner a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"wageearner_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"activityjob_b select * from \""+schemaName+"\".\"activityjob a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"activityjob_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"glentries_b select * from \""+schemaName+"\".\"glentries a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"glentries_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cpayment_b select * from \""+schemaName+"\".\"cpayment a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cpayment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"task_b select * from \""+schemaName+"\".\"task a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"task_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vpayment_b select * from \""+schemaName+"\".\"vpayment a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vpayment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"emplorders_b select * from \""+schemaName+"\".\"emplorders a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"emplorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"user_b select * from \""+schemaName+"\".\"user a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"user_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"acintegr_b select * from \""+schemaName+"\".\"acintegr a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"acintegr_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"controlusagebyperiods_b select * from \""+schemaName+"\".\"controlusagebyperiods a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"controlusagebyperiods_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"processattributes_b select * from \""+schemaName+"\".\"processattributes a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"processattributes_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"resource_b select * from \""+schemaName+"\".\"resource\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"resource_b select * from \""+schemaName+"\".\"resource\" a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"userprofl_b select * from \""+schemaName+"\".\"userprofl a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"userprofl_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"venartha_b select * from \""+schemaName+"\".\"venartha a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"venartha_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"wageearneraux_b select * from \""+schemaName+"\".\"wageearneraux a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"wageearneraux_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"activityjobdetails_b select * from \""+schemaName+"\".\"activityjobdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"activityjobdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cupdetails_b select * from \""+schemaName+"\".\"cupdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cupdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"gentriesdetails_b select * from \""+schemaName+"\".\"gentriesdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"gentriesdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"holiday_b select * from \""+schemaName+"\".\"holiday a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"holiday_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itembomdetails_b select * from \""+schemaName+"\".\"itembomdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"itembomdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();




      sqlScript="insert into \""+schemaName+"\".\"rgenfields_b select * from \""+schemaName+"\".\"rgenfields a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgenfields_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"usagebyperiods_b select * from \""+schemaName+"\".\"usagebyperiods a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"usagebyperiods_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuidetails_b select * from \""+schemaName+"\".\"cuidetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuidetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuodetails_b select * from \""+schemaName+"\".\"cuodetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuqdetails_b select * from \""+schemaName+"\".\"cuqdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuqdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"emplodetails_b select * from \""+schemaName+"\".\"emplodetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"emplodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"resourcedetails_b select * from \""+schemaName+"\".\"resourcedetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resourcedetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendidetails_b select * from \""+schemaName+"\".\"vendidetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendidetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendodetails_b select * from \""+schemaName+"\".\"vendodetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendpdetails_b select * from \""+schemaName+"\".\"vendpdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendpdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendqdetails_b select * from \""+schemaName+"\".\"vendqdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendqdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"ccontact_b select * from \""+schemaName+"\".\"ccontact a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"ccontact_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"shipmentdetails_b select * from \""+schemaName+"\".\"shipmentdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"shipmentdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vcontact_b select * from \""+schemaName+"\".\"vcontact a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vcontact_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vshipmendetails_b select * from \""+schemaName+"\".\"vshipmendetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vshipmendetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"schedule_b select * from \""+schemaName+"\".\"schedule a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"schedule_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"jobassignment_b select * from \""+schemaName+"\".\"jobassignment a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"jobassignment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"acperiod_b select * from \""+schemaName+"\".\"acperiod a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"acperiod_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"arthahist_b select * from \""+schemaName+"\".\"arthahist a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"arthahist_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"arthatbl_b select * from \""+schemaName+"\".\"arthatbl a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"arthatbl_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"holiday_b select * from \""+schemaName+"\".\"holiday a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"holiday_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"blobdata_b select * from \""+schemaName+"\".\"blobdata a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"blobdata_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"blobdata_b select * from \""+schemaName+"\".\"blobdata a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"blobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"cjournal_b select * from \""+schemaName+"\".\"cjournal a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cjournal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"clobdata_b select * from \""+schemaName+"\".\"clobdata a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"clobdata_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"clobdata_b select * from \""+schemaName+"\".\"clobdata a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"clobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"editlog_b select * from \""+schemaName+"\".\"editlog a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"editlog_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"genoptions_b select * from \""+schemaName+"\".\"genoptions a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"genoptions_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"hlogfile_b select * from \""+schemaName+"\".\"hlogfile a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"hlogfile_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"jjournal_b select * from \""+schemaName+"\".\"jjournal a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"jjournal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"journal_b select * from \""+schemaName+"\".\"journal a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"journal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"nextserialno_b select * from \""+schemaName+"\".\"nextserialno a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"nextserialno_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"options_b select * from \""+schemaName+"\".\"options a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"options_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"rate1f_b select * from \""+schemaName+"\".\"rate1f a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rate1f_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"scandate_b select * from \""+schemaName+"\".\"scandate a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"scandate_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"serialnumbers_b select * from \""+schemaName+"\".\"serialnumbers a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"serialnumbers_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();





      // update backup if \"row\" in main has changed (relies on statusfldate change)
      // jay whats about those not having statusfldt? either add field or rely on parent status fld
      // and group the updates together oct06 2018 posting date used for journal,glentries
      // order should not matter because all the foreign keys should exist but will follow insert order
      /**
      SELECT 'sqlScript="UPDATE \""+schemaName+"\".\"account_b b SET (' || ARRAY_TO_STRING(ARRAY(SELECT COLUMN_NAME::VARCHAR(50)
	 FROM INFORMATION_SCHEMA.COLUMNS
	 WHERE TABLE_NAME='account'
	 ORDER bY ORDINAL_POSITION
       ),',')
       || ') = ('
       ||ARRAY_TO_STRING(ARRAY(SELECT 'a.'||COLUMN_NAME::VARCHAR(50)
	 FROM INFORMATION_SCHEMA.COLUMNS
	 WHERE TABLE_NAME='account'
	 ORDER bY ORDINAL_POSITION
       ),',')
       || ')'
       || ' FROM \""+schemaName+"\".\"account a where ((b.sid=a.sid\") AND ((b.STATUSFLDT <>  a.STATUSFLDT)) and a.owner2=:owner2)";'
      */
//?? update now done jay except for rate1f which now has statusfldt done now aug 05 2018 but check others which manually changed
//oct06 2018 included journal using postingdate and gl, gldetails using statusfldt.

sqlScript="UPDATE \""+schemaName+"\".\"JOURNAL_b b SET(SID,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,STATUSFL,OWNER,OWNER2)=(a.SID,a.spostdate,a.postdate,a.calendardt,a.jrnltype,a.jnlseqb,a.jnlseq,a.jnlseqs,a.period,a.account,a.debit,a.credit,a.xreference,a.descript,a.STATUSFL,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"journal a where((a.sid=b.sid\") AND (a.postdate<>b.postdate) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"gentriesdetails_b b SET(SID,glentrysidno,line,depcode,divcode,account,debitamt,creditamt,linetotl,notes,STATUSFL,statusfldt,OWNER,OWNER2)=(a.SID,a.glentrysidno,a.line,a.depcode,a.divcode,a.account,a.debitamt,a.creditamt,a.linetotl,a.notes,a.STATUSFL,a.statusfldt,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"gentriesdetails a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"glentries_b b SET(SID,glentryno,descript,refcode,period,postdate,calendardt,depcode,divcode,account,tdebitamt,tcreditamt,notes,STATUSFL,statusfldt,OWNER,OWNER2)=(a.SID,a.glentryno,a.descript,a.refcode,a.period,a.postdate,a.calendardt,a.depcode,a.divcode,a.account,a.tdebitamt,a.tcreditamt,a.notes,a.STATUSFL,a.statusfldt,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"glentries a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"ADDRESS_b b SET(SID,ADDRESCODE,ADDRL1,ADDRL2,ADDRL3,CITY,PROVNSTATE,COUNTRY,PZCODE,DESCRIPT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,PRINTMSTAT,PRINMTFLDT)=(a.SID,a.ADDRESCODE,a.ADDRL1,a.ADDRL2,a.ADDRL3,a.CITY,a.PROVNSTATE,a.COUNTRY,a.PZCODE,a.DESCRIPT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.PRINTMSTAT,a.PRINMTFLDT)FROM \""+schemaName+"\".\"address a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"OPTIONS_b b SET(SID,ROW,OPTIONS01,PURPOSE01,VALUE01,OPTIONS02,PURPOSE02,VALUE02,OPTIONS03,PURPOSE03,VALUE03,OPTIONS04,PURPOSE04,VALUE04,OPTIONS05,PURPOSE05,VALUE05,OPTIONS06,PURPOSE06,VALUE06,OPTIONS07,PURPOSE07,VALUE07,OPTIONS08,PURPOSE08,VALUE08,OPTIONS09,PURPOSE09,VALUE09,OPTIONS10,PURPOSE10,VALUE10,OPTIONS11,PURPOSE11,VALUE11,OPTIONS12,PURPOSE12,VALUE12,OPTIONS13,PURPOSE13,VALUE13,OPTIONS14,PURPOSE14,VALUE14,OPTIONS15,PURPOSE15,VALUE15,OPTIONS16,PURPOSE16,VALUE16,OPTIONS17,PURPOSE17,VALUE17,OPTIONS18,PURPOSE18,VALUE18,OPTIONS19,PURPOSE19,VALUE19,OPTIONS20,PURPOSE20,VALUE20,OPTIONS21,PURPOSE21,VALUE21,OPTIONS22,PURPOSE22,VALUE22,OPTIONS23,PURPOSE23,VALUE23,OPTIONS24,PURPOSE24,VALUE24,OPTIONS25,PURPOSE25,VALUE25,OPTIONS26,PURPOSE26,VALUE26,OPTIONS27,PURPOSE27,VALUE27,OPTIONS28,PURPOSE28,VALUE28,OPTIONS29,PURPOSE29,VALUE29,OPTIONS30,PURPOSE30,VALUE30,OPTIONS31,PURPOSE31,VALUE31,OPTIONS32,PURPOSE32,VALUE32,OPTIONS33,PURPOSE33,VALUE33,OPTIONS34,PURPOSE34,VALUE34,OPTIONS35,PURPOSE35,VALUE35,OPTIONS36,PURPOSE36,VALUE36,OPTIONS37,PURPOSE37,VALUE37,OPTIONS38,PURPOSE38,VALUE38,OPTIONS39,PURPOSE39,VALUE39,OPTIONS40,PURPOSE40,VALUE40,OPTIONS41,PURPOSE41,VALUE41,OPTIONS42,PURPOSE42,VALUE42,OPTIONS43,PURPOSE43,VALUE43,OPTIONS44,PURPOSE44,VALUE44,OPTIONS45,PURPOSE45,VALUE45,OPTIONS46,PURPOSE46,VALUE46,OPTIONS47,PURPOSE47,VALUE47,OPTIONS48,PURPOSE48,VALUE48,OPTIONS49,PURPOSE49,VALUE49,OPTIONS50,PURPOSE50,VALUE50,OPTIONS51,PURPOSE51,VALUE51,OPTIONS52,PURPOSE52,VALUE52,OPTIONS53,PURPOSE53,VALUE53,OPTIONS54,PURPOSE54,VALUE54,OPTIONS55,PURPOSE55,VALUE55,OPTIONS56,PURPOSE56,VALUE56,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.ROW,a.OPTIONS01,a.PURPOSE01,a.VALUE01,a.OPTIONS02,a.PURPOSE02,a.VALUE02,a.OPTIONS03,a.PURPOSE03,a.VALUE03,a.OPTIONS04,a.PURPOSE04,a.VALUE04,a.OPTIONS05,a.PURPOSE05,a.VALUE05,a.OPTIONS06,a.PURPOSE06,a.VALUE06,a.OPTIONS07,a.PURPOSE07,a.VALUE07,a.OPTIONS08,a.PURPOSE08,a.VALUE08,a.OPTIONS09,a.PURPOSE09,a.VALUE09,a.OPTIONS10,a.PURPOSE10,a.VALUE10,a.OPTIONS11,a.PURPOSE11,a.VALUE11,a.OPTIONS12,a.PURPOSE12,a.VALUE12,a.OPTIONS13,a.PURPOSE13,a.VALUE13,a.OPTIONS14,a.PURPOSE14,a.VALUE14,a.OPTIONS15,a.PURPOSE15,a.VALUE15,a.OPTIONS16,a.PURPOSE16,a.VALUE16,a.OPTIONS17,a.PURPOSE17,a.VALUE17,a.OPTIONS18,a.PURPOSE18,a.VALUE18,a.OPTIONS19,a.PURPOSE19,a.VALUE19,a.OPTIONS20,a.PURPOSE20,a.VALUE20,a.OPTIONS21,a.PURPOSE21,a.VALUE21,a.OPTIONS22,a.PURPOSE22,a.VALUE22,a.OPTIONS23,a.PURPOSE23,a.VALUE23,a.OPTIONS24,a.PURPOSE24,a.VALUE24,a.OPTIONS25,a.PURPOSE25,a.VALUE25,a.OPTIONS26,a.PURPOSE26,a.VALUE26,a.OPTIONS27,a.PURPOSE27,a.VALUE27,a.OPTIONS28,a.PURPOSE28,a.VALUE28,a.OPTIONS29,a.PURPOSE29,a.VALUE29,a.OPTIONS30,a.PURPOSE30,a.VALUE30,a.OPTIONS31,a.PURPOSE31,a.VALUE31,a.OPTIONS32,a.PURPOSE32,a.VALUE32,a.OPTIONS33,a.PURPOSE33,a.VALUE33,a.OPTIONS34,a.PURPOSE34,a.VALUE34,a.OPTIONS35,a.PURPOSE35,a.VALUE35,a.OPTIONS36,a.PURPOSE36,a.VALUE36,a.OPTIONS37,a.PURPOSE37,a.VALUE37,a.OPTIONS38,a.PURPOSE38,a.VALUE38,a.OPTIONS39,a.PURPOSE39,a.VALUE39,a.OPTIONS40,a.PURPOSE40,a.VALUE40,a.OPTIONS41,a.PURPOSE41,a.VALUE41,a.OPTIONS42,a.PURPOSE42,a.VALUE42,a.OPTIONS43,a.PURPOSE43,a.VALUE43,a.OPTIONS44,a.PURPOSE44,a.VALUE44,a.OPTIONS45,a.PURPOSE45,a.VALUE45,a.OPTIONS46,a.PURPOSE46,a.VALUE46,a.OPTIONS47,a.PURPOSE47,a.VALUE47,a.OPTIONS48,a.PURPOSE48,a.VALUE48,a.OPTIONS49,a.PURPOSE49,a.VALUE49,a.OPTIONS50,a.PURPOSE50,a.VALUE50,a.OPTIONS51,a.PURPOSE51,a.VALUE51,a.OPTIONS52,a.PURPOSE52,a.VALUE52,a.OPTIONS53,a.PURPOSE53,a.VALUE53,a.OPTIONS54,a.PURPOSE54,a.VALUE54,a.OPTIONS55,a.PURPOSE55,a.VALUE55,a.OPTIONS56,a.PURPOSE56,a.VALUE56,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"OPTIONS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

String line1="UPDATE \""+schemaName+"\".\"CLIENT_b b SET(SID,CLIENTVERSION,SERIALNUM,ENTERPRISECOMPANYNA,DESCRIPT,ADDRL1,ADDRL2,ADDRL3,CITY,PROVNSTATE,COUNTRYNAME,PZCODE,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,ENTERPRISECOMPCODE,ENTERPRISECOMPSIZE,BARCSIZE,LEVEL,POSKIPP,LOOSEIT,JOBSKIP,CARTONFL,PICKLIST,PRODDESC,PRODCODE,NJOB,NMATERIA,NACTIVITY,NBUTT,NCUSTOME,NCONTACT,NVENDOR,NEMPLOYEE,NSCHEDULE,NREJECT,NRETURN,NCODE,MANUFID,BARTYPE,CADTYPE,CARTYPE,SHITYPE,REPTYPE,LOCTYPE,BARCOL,CARCOL,CADCOL,SHICOL,REPCOL,LOCCOL,ALTSERIA,COUNTRYCODE,NALTSERI,SCRCOLOR,HILCOLOR,TEXTCOLOR,BACCOLOR,DATETYPE,CURRSYMB,CURRCODE,PRINBAR,BARPRINT,CARPRINT,CADPRINT,LOCPRINT,SHIPRINT,REPPRINT,BARPRTY,REPPRTY,CARPRTY,CADPRTY,SHIPRTY,LOCPRTY,ALTSELEN,CUSTOLEN,CARCSIZE,CADCSIZE,SHICSIZE,REPCSIZE,LOCCSIZE,CS,NCONFTYP,NLOCATIO,NDIVCODE,NDEPCODE,NADDCODE,NFLOOR,NROOM,NRACK,MENUTYPE,PADTYPE,NRATE1TA,NRATE2TA,DEFCONFT,BEEPSOU,CONFIRM,LINEFEED,REFBARADJ,SHIBARADJ,CUSBARADJ,LOCBARADJ,CARBARADJ,NCORDER,NSPERSON,PROMPTI,CUSTOMERQUOTENB,CUSTOMERQUOTEN,CUSTOMERQUOTENA,CUSTOMERORDERNB,CUSTOMERORDERN,CUSTOMERORDERNA,VENDORORDERNB,VENDORORDERN,VENDORORDERNA,EMPLOYEEORDERNB,EMPLOYEEORDERN,EMPLOYEEORDERNA,JOBNB,JOBN,JOBNA,CUSTOMERINVOICENB,CUSTOMERINVOICEN,CUSTOMERINVOICENA,VENDORINVOICENB,VENDORINVOICEN,VENDORINVOICENA,CUSTOMERPICKNB,CUSTOMERPICKN,CUSTOMERPICKNA,VENDORQUOTENB,VENDORQUOTEN,VENDORQUOTENA,CUSTOMERPAYMNTNB,CUSTOMERPAYMNTN,CUSTOMERPAYMNTNA,VENDORPAYMNTNB,VENDORPAYMNTN,VENDORPAYMNTNA,VENDORCHQNB,VENDORCHQN,VENDORCHQNA,TASKNB,TASKN,TASKNA,ARSEQB,ARSEQ,ARSEQA,APSEQB,APSEQ,APSEQA,GLSEQB,GLSEQ,GLSEQA,PASEQB,PASEQ,PASEQA,ICSEQB,ICSEQ,ICSEQA,JOSEQB,JOSEQ,JOSEQA,SGLENTRY,TAX1CODE,TAX2CODE,TAX3CODE,NDECIMAL,EDIPASSW,INTPASSW,INRPASSW,IMLPASSW,RMLPASSW,LMLPASSW,HOSPASSW,LANPASSW,WANPASSW,ASHOSTID,HDSTYLE,MTSTYLE,STSTYLE,DTSTYLE,FTSTYLE,DEFAULTR,DEFAULTC,DBNAME,ROOTDIR,KEYORDER,CURRBUSDAT,LASTBUSDAT,CURRCALDAT,LASTCALDAT,PREPROCESS,MARGIN,FOOTER,LASTUSER,LISTBUILDC,LISTBUILDV,LISTBUILDE,LISTBROWNC,LISTBROWNV,LISTBROWNE,SMTPSERVER,SMTPUSER,SMTPPASS,POP3SERVER,POP3USER,POP3PASS,SMATCODE,FYREND,FPERIODS,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,licensetype,licensestart,licenseend)=(a.sid,a.CLIENTVERSION,a.SERIALNUM,a.ENTERPRISECOMPANYNA,a.DESCRIPT,a.ADDRL1,a.ADDRL2,a.ADDRL3,a.CITY,a.PROVNSTATE,a.COUNTRYNAME,a.PZCODE,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.ENTERPRISECOMPCODE,a.ENTERPRISECOMPSIZE,a.BARCSIZE,a.LEVEL,a.POSKIPP,a.LOOSEIT,a.JOBSKIP,a.CARTONFL,a.PICKLIST,a.PRODDESC,a.PRODCODE,a.NJOB,a.NMATERIA,a.NACTIVITY,a.NBUTT,a.NCUSTOME,a.NCONTACT,a.NVENDOR,a.NEMPLOYEE,a.NSCHEDULE,a.NREJECT,a.NRETURN,a.NCODE,a.MANUFID,a.BARTYPE,a.CADTYPE,a.CARTYPE,a.SHITYPE,a.REPTYPE,a.LOCTYPE,a.BARCOL,a.CARCOL,a.CADCOL,a.SHICOL,a.REPCOL,a.LOCCOL,a.ALTSERIA,a.COUNTRYCODE,a.NALTSERI,a.SCRCOLOR,a.HILCOLOR,";
sqlScript=line1+"a.TEXTCOLOR,a.BACCOLOR,a.DATETYPE,a.CURRSYMB,a.CURRCODE,a.PRINBAR,a.BARPRINT,a.CARPRINT,a.CADPRINT,a.LOCPRINT,a.SHIPRINT,a.REPPRINT,a.BARPRTY,a.REPPRTY,a.CARPRTY,a.CADPRTY,a.SHIPRTY,a.LOCPRTY,a.ALTSELEN,a.CUSTOLEN,a.CARCSIZE,a.CADCSIZE,a.SHICSIZE,a.REPCSIZE,a.LOCCSIZE,a.CS,a.NCONFTYP,a.NLOCATIO,a.NDIVCODE,a.NDEPCODE,a.NADDCODE,a.NFLOOR,a.NROOM,a.NRACK,a.MENUTYPE,a.PADTYPE,a.NRATE1TA,a.NRATE2TA,a.DEFCONFT,a.BEEPSOU,a.CONFIRM,a.LINEFEED,a.REFBARADJ,a.SHIBARADJ,a.CUSBARADJ,a.LOCBARADJ,a.CARBARADJ,a.NCORDER,a.NSPERSON,a.PROMPTI,a.CUSTOMERQUOTENB,a.CUSTOMERQUOTEN,a.CUSTOMERQUOTENA,a.CUSTOMERORDERNB,a.CUSTOMERORDERN,a.CUSTOMERORDERNA,a.VENDORORDERNB,a.VENDORORDERN,a.VENDORORDERNA,a.EMPLOYEEORDERNB,a.EMPLOYEEORDERN,a.EMPLOYEEORDERNA,a.JOBNB,a.JOBN,a.JOBNA,a.CUSTOMERINVOICENB,a.CUSTOMERINVOICEN,a.CUSTOMERINVOICENA,a.VENDORINVOICENB,a.VENDORINVOICEN,a.VENDORINVOICENA,a.CUSTOMERPICKNB,a.CUSTOMERPICKN,a.CUSTOMERPICKNA,a.VENDORQUOTENB,a.VENDORQUOTEN,a.VENDORQUOTENA,a.CUSTOMERPAYMNTNB,a.CUSTOMERPAYMNTN,a.CUSTOMERPAYMNTNA,a.VENDORPAYMNTNB,a.VENDORPAYMNTN,a.VENDORPAYMNTNA,a.VENDORCHQNB,a.VENDORCHQN,a.VENDORCHQNA,a.TASKNB,a.TASKN,a.TASKNA,a.ARSEQB,a.ARSEQ,a.ARSEQA,a.APSEQB,a.APSEQ,a.APSEQA,a.GLSEQB,a.GLSEQ,a.GLSEQA,a.PASEQB,a.PASEQ,a.PASEQA,a.ICSEQB,a.ICSEQ,a.ICSEQA,a.JOSEQB,a.JOSEQ,a.JOSEQA,a.SGLENTRY,a.TAX1CODE,a.TAX2CODE,a.TAX3CODE,a.NDECIMAL,a.EDIPASSW,a.INTPASSW,a.INRPASSW,a.IMLPASSW,a.RMLPASSW,a.LMLPASSW,a.HOSPASSW,a.LANPASSW,a.WANPASSW,a.ASHOSTID,a.HDSTYLE,a.MTSTYLE,a.STSTYLE,a.DTSTYLE,a.FTSTYLE,a.DEFAULTR,a.DEFAULTC,a.DBNAME,a.ROOTDIR,a.KEYORDER,a.CURRBUSDAT,a.LASTBUSDAT,a.CURRCALDAT,a.LASTCALDAT,a.PREPROCESS,a.MARGIN,a.FOOTER,a.LASTUSER,a.LISTBUILDC,a.LISTBUILDV,a.LISTBUILDE,a.LISTBROWNC,a.LISTBROWNV,a.LISTBROWNE,a.SMTPSERVER,a.SMTPUSER,a.SMTPPASS,a.POP3SERVER,a.POP3USER,a.POP3PASS,a.SMATCODE,a.FYREND,a.FPERIODS,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.licensetype,a.licensestart,a.licenseend)FROM \""+schemaName+"\".\"CLIENT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"DEPARTMENT_b b SET(SID,DEPCODE,DESCRIPT,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.DEPCODE,a.DESCRIPT,a.GLPREFIX,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"DEPARTMENT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"COMPANY_b b SET(SID,COMPANYCODE,DESCRIPT,LEGALNAME,MAILTOCODE,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.COMPANYCODE,a.DESCRIPT,a.LEGALNAME,a.MAILTOCODE,a.GLPREFIX,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"COMPANY a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"CONTROL_b b SET(SID,CONTROLCODE,DESCRIPT,TYPEOFCONTROL,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.CONTROLCODE,a.DESCRIPT,a.TYPEOFCONTROL,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"CONTROL a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"DIVISION_b b SET(SID,DIVCODE,DESCRIPT,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.DIVCODE,a.DESCRIPT,a.GLPREFIX,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"DIVISION a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"LOCATION_b b SET(SID,LOCATION,DESCRIPT,COMPANYCODE,ADDRESSCODE,FLOOR,ROOM,RACK,PRINTMSTAT,PRINMTFLDT,EXCLUDE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.LOCATION,a.DESCRIPT,a.COMPANYCODE,a.ADDRESSCODE,a.FLOOR,a.ROOM,a.RACK,a.PRINTMSTAT,a.PRINMTFLDT,a.EXCLUDE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"LOCATION a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"RESIDENCY_b b SET(SID,RESIDENCY,DESCRIPT,MUNICIPALITY,PROVINCE,COUNTRYNAME,EXCLUDE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.RESIDENCY,a.DESCRIPT,a.MUNICIPALITY,a.PROVINCE,a.COUNTRYNAME,a.EXCLUDE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"RESIDENCY a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("update")+" "+bundle.getString("residency_b")+" "+bundle.getString("count")+" "+(updatedCount-countp),""));
countp=updatedCount;

sqlScript="UPDATE \""+schemaName+"\".\"ACCOUNT_b b SET(SID,ACCOUNT,DESCRIPT,CATEGORY,TYPE,BUDGET,ACTUAL,ACTUALN,PREVBUDG,PREVACT,SEQUENCE,CHILD,PARENT,ROLLUPQ,COMPANYCODE,DEPCODE,DIVCODE,STATUSFL,STATUSFLDT,CURRENCY,NOTES,OWNER,OWNER2,P0,P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P8T,P9T,P10T,P11T)=(a.SID,a.ACCOUNT,a.DESCRIPT,a.CATEGORY,a.TYPE,a.BUDGET,a.ACTUAL,a.ACTUALN,a.PREVBUDG,a.PREVACT,a.SEQUENCE,a.CHILD,a.PARENT,a.ROLLUPQ,a.COMPANYCODE,a.DEPCODE,a.DIVCODE,a.STATUSFL,a.STATUSFLDT,a.CURRENCY,a.NOTES,a.OWNER,a.OWNER2,a.P0,a.P1,a.P2,a.P3,a.P4,a.P5,a.P6,a.P7,a.P8,a.P9,a.P10,a.P11,a.P12,a.P13,a.P14,a.P8T,a.P9T,a.P10T,a.P11T)FROM \""+schemaName+"\".\"ACCOUNT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("update")+" "+bundle.getString("account_b")+" "+bundle.getString("count")+" "+(updatedCount-countp),""));
countp=updatedCount;

sqlScript="UPDATE \""+schemaName+"\".\"CUSTOMER_b b SET(SID,CUSTOMER,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,CUSTOMERASCOMPANYNAME,CUSTTOTL,CUSTTQTY,COMPANYCODE,LOCATION,MAILTOCODE,SHIPTOCODE,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,DOB,PLACEOFBIRTH,SEX,AGE,CUSRTOTL,CUSRTQTY,CUSMTOTL,CUSDTOTL,LASTORDER,LASTINVOIC,LASTPAYMNQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,TOTLPAID,CONTACTED,BYWHO,NXTCONTACT,VIA,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.CUSTOMER,a.DESCRIPT,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.CUSTOMERASCOMPANYNAME,a.CUSTTOTL,a.CUSTTQTY,a.COMPANYCODE,a.LOCATION,a.MAILTOCODE,a.SHIPTOCODE,a.TAX1,a.TAX2,a.TAX3,a.CUSTTAX1,a.CUSTTAX2,a.CUSTTAX3,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.DOB,a.PLACEOFBIRTH,a.SEX,a.AGE,a.CUSRTOTL,a.CUSRTQTY,a.CUSMTOTL,a.CUSDTOTL,a.LASTORDER,a.LASTINVOIC,a.LASTPAYMNQ,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.TYPE,a.DEFAULTGLAC,a.INTEGRSET,a.STATUSFL,a.STATUSFLDT,a.TOTLPAID,a.CONTACTED,a.BYWHO,a.NXTCONTACT,a.VIA,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"CUSTOMER a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"VENDOR_b b SET(SID,VENDOR,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,VENDORASCOMPANYNAME,VENDTOTL,VENDTQTY,COMPANYCODE,LOCATION,MAILTOCODE,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,VENRTOTL,VENRTQTY,VENMTOTL,VENDDTOTL,LASTQUOTE,LASTORDER,LASTINVOIC,LASTPAYMQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,SHIPTOCODE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,TOTLPAID,CONTACTED,BYWHO,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.VENDOR,a.DESCRIPT,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.VENDORASCOMPANYNAME,a.VENDTOTL,a.VENDTQTY,a.COMPANYCODE,a.LOCATION,a.MAILTOCODE,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.VENRTOTL,a.VENRTQTY,a.VENMTOTL,a.VENDDTOTL,a.LASTQUOTE,a.LASTORDER,a.LASTINVOIC,a.LASTPAYMQ,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.TYPE,a.SHIPTOCODE,a.DEFAULTGLAC,a.INTEGRSET,a.STATUSFL,a.STATUSFLDT,a.TOTLPAID,a.CONTACTED,a.BYWHO,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"VENDOR a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"EMPLOYEE_b b SET(SID,EMPLOYEE,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,COMPANYCODE,EMPLTOTL,EMPLTQTY,DIVCODE,DEPCODE,LOCATION,RESIDENCY,MAILTOCODE,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,EMPRTOTL,EMPRTQTY,EMPMTOTL,EMPDTOTL,LASTQUOTE,LASTORDER,LASTINVOIC,LASTPAYMQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,SHIPTOCODE,TYPE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,CONTACTED,BYWHO,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.EMPLOYEE,a.DESCRIPT,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.COMPANYCODE,a.EMPLTOTL,a.EMPLTQTY,a.DIVCODE,a.DEPCODE,a.LOCATION,a.RESIDENCY,a.MAILTOCODE,a.TAX1,a.TAX2,a.TAX3,a.CUSTTAX1,a.CUSTTAX2,a.CUSTTAX3,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.EMPRTOTL,a.EMPRTQTY,a.EMPMTOTL,a.EMPDTOTL,a.LASTQUOTE,a.LASTORDER,a.LASTINVOIC,a.LASTPAYMQ,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.SHIPTOCODE,a.TYPE,a.DEFAULTGLAC,a.INTEGRSET,a.STATUSFL,a.STATUSFLDT,a.CONTACTED,a.BYWHO,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"EMPLOYEE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"VCONTACT_b b SET(SID,CONTACT,VENDOR,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,LOCATION,MAILTOCODE,SHIPTOCODE,PRINTSTA,SHIPLABEL,TYPE,STATUSFL,STATUSFLDT,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.CONTACT,a.VENDOR,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.LOCATION,a.MAILTOCODE,a.SHIPTOCODE,a.PRINTSTA,a.SHIPLABEL,a.TYPE,a.STATUSFL,a.STATUSFLDT,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"VCONTACT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"CCONTACT_b b SET(SID,CONTACT,CUSTOMER,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,LOCATION,MAILTOCODE,SHIPTOCODE,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,STATUSFL,STATUSFLDT,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.CONTACT,a.CUSTOMER,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.TAX1,a.TAX2,a.TAX3,a.CUSTTAX1,a.CUSTTAX2,a.CUSTTAX3,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.LOCATION,a.MAILTOCODE,a.SHIPTOCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.TYPE,a.STATUSFL,a.STATUSFLDT,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"CCONTACT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"PERIODDATES_b b SET(SID,PERIOD,DESCRIPT,STARTDATE,ENDDATE,STARTOFWEEK,STARTOFBWEEK,ENDOFBWEEK,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PERIOD,a.DESCRIPT,a.STARTDATE,a.ENDDATE,a.STARTOFWEEK,a.STARTOFBWEEK,a.ENDOFBWEEK,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"PERIODDATES a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"ACPERIOD_b b SET(SID,ROWID,CURRPERIOD,DESCRIPT,CURRBUSDATE,CURRCALDATE,CURRLOCALDATE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.ROWID,a.CURRPERIOD,a.DESCRIPT,a.CURRBUSDATE,a.CURRCALDATE,a.CURRLOCALDATE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ACPERIOD a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"WAGEEARNER_b b SET(SID,WAGEEARNERID,EMPLOYEE,SIN,BIRTHDT,FEDCLAIM,PROVCLAIM,PAYYRFREQ,PAYPERIOD,WCB,WCBYTD,EMPLINSUR,INSYTD,VACRETAIN,VACATONYT,WAGEUNIT,WAGERATE,OTIMEUNIT,OTIMERATE,WAGEUNITS,OTIMUNITS,WAGEOUT,OVTIMEOUT,SALARYOUT,COMMISSION,BENEFITS,VACATION,VACPAYOUT,ADVANCE,PENSION,AFTERTAX,UNIONDUES,MEDICAL,FINCOMETX,PINCOMETX,THISPAYA,LASTPAYA,PAYYTD,FPENSIYTD,PPENSIYTD,ITAXYTD,PTAXYTD,GRPAYYTD,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.WAGEEARNERID,a.EMPLOYEE,a.SIN,a.BIRTHDT,a.FEDCLAIM,a.PROVCLAIM,a.PAYYRFREQ,a.PAYPERIOD,a.WCB,a.WCBYTD,a.EMPLINSUR,a.INSYTD,a.VACRETAIN,a.VACATONYT,a.WAGEUNIT,a.WAGERATE,a.OTIMEUNIT,a.OTIMERATE,a.WAGEUNITS,a.OTIMUNITS,a.WAGEOUT,a.OVTIMEOUT,a.SALARYOUT,a.COMMISSION,a.BENEFITS,a.VACATION,a.VACPAYOUT,a.ADVANCE,a.PENSION,a.AFTERTAX,a.UNIONDUES,a.MEDICAL,a.FINCOMETX,a.PINCOMETX,a.THISPAYA,a.LASTPAYA,a.PAYYTD,a.FPENSIYTD,a.PPENSIYTD,a.ITAXYTD,a.PTAXYTD,a.GRPAYYTD,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"WAGEEARNER a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ARTHATBL_b b SET(SID,USAGE,WCBPERCNT,INSFACTOR,VACATONRATE,PENSIONMAX,WCBMAX,INSMAX,ITAXLV0RATE,ITAXLV1RATE,ITAXLV2RATE,ITAXLV3RATE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.USAGE,a.WCBPERCNT,a.INSFACTOR,a.VACATONRATE,a.PENSIONMAX,a.WCBMAX,a.INSMAX,a.ITAXLV0RATE,a.ITAXLV1RATE,a.ITAXLV2RATE,a.ITAXLV3RATE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ARTHATBL a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"ROLLUPGROUP_b b SET(SID,GROUPID,DESCRIPT,TYPE,CURRPW,EXPIRY,CURRENCY,PERIOD0B,PERIOD0,PERIODTOTALSB,PERIODTOTALS,PERIOD1BUDGET,PERIOD1ACTUAL,PERIOD2B,PERIOD2,PERIOD3B,PERIOD3,PERIOD4B,PERIOD4,PERIOD5B,PERIOD5,PERIOD6B,PERIOD6,PERIOD7B,PERIOD7,PERIOD8B,PERIOD8,PERIOD9B,PERIOD9,PERIOD10B,PERIOD10,PERIOD11B,PERIOD11,PERIOD12B,PERIOD12,PERIODNB,PERIODN,NOTES,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.GROUPID,a.DESCRIPT,a.TYPE,a.CURRPW,a.EXPIRY,a.CURRENCY,a.PERIOD0B,a.PERIOD0,a.PERIODTOTALSB,a.PERIODTOTALS,a.PERIOD1BUDGET,a.PERIOD1ACTUAL,a.PERIOD2B,a.PERIOD2,a.PERIOD3B,a.PERIOD3,a.PERIOD4B,a.PERIOD4,a.PERIOD5B,a.PERIOD5,a.PERIOD6B,a.PERIOD6,a.PERIOD7B,a.PERIOD7,a.PERIOD8B,a.PERIOD8,a.PERIOD9B,a.PERIOD9,a.PERIOD10B,a.PERIOD10,a.PERIOD11B,a.PERIOD11,a.PERIOD12B,a.PERIOD12,a.PERIODNB,a.PERIODN,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ROLLUPGROUP a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"MEMBERSGROUP_b b SET(SID,GROUPID,DESCRIPT,QUANTITY,MODE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.GROUPID,a.DESCRIPT,a.QUANTITY,a.MODE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"membersgroup\" a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ARTHAHIST_b b SET(SID,WAGEEARNER,SIN,PERIOD,MONTH,CCYY,VACATION,WAGE,OVERTIME,SALARY,COMMISSION,BENEFIT,FINCOMETX,PINCOMETX,WCBOUT,EMPLINSUR,VACPAYOUT,ADVANCE,FPENSOBTX,FPENSOATX,UNIONDUES,MEDICAL,PAYAMT,NOTES,NOTES2,CHQNUMBER,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.WAGEEARNER,a.SIN,a.PERIOD,a.MONTH,a.CCYY,a.VACATION,a.WAGE,a.OVERTIME,a.SALARY,a.COMMISSION,a.BENEFIT,a.FINCOMETX,a.PINCOMETX,a.WCBOUT,a.EMPLINSUR,a.VACPAYOUT,a.ADVANCE,a.FPENSOBTX,a.FPENSOATX,a.UNIONDUES,a.MEDICAL,a.PAYAMT,a.NOTES,a.NOTES2,a.CHQNUMBER,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ARTHAHIST a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"HOLIDAY_b b SET(SID,SHOLIDAY,HOLIDAY,DESCRIPT,TYPE,STATUSFL,STATUSFLDT,EMPLOYEE,RESIDENCY,OWNER,OWNER2)=(a.SID,a.SHOLIDAY,a.HOLIDAY,a.DESCRIPT,a.TYPE,a.STATUSFL,a.STATUSFLDT,a.EMPLOYEE,a.RESIDENCY,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"HOLIDAY a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"ITEM_b b SET(SID,MATCODE,QUANTITY,DESCRIPT,DATEADDED,DATEEXPIRY,DATETORENEW,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,LOCATION,BARUPC)=(a.SID,a.MATCODE,a.QUANTITY,a.DESCRIPT,a.DATEADDED,a.DATEEXPIRY,a.DATETORENEW,a.SOURCE1,a.SOURCE2,a.UPCCODE,a.COST,a.REPLCOST,a.SELPRICE,a.SPRICOLD,a.SPRICNEW,a.SPRICEFFDT,a.SHIPCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.MISCCODE1,a.MISCCODE2,a.QTYLEVEL1,a.UNIT,a.CASEQTY,a.TYPE,a.TAX1,a.TAX2,a.TAX3,a.ALIASCODE,a.PARENTCODE,a.AVGPRICE,a.AVGCOST,a.STATUSFL,a.STATUSFLDT,a.SUBCODESN,a.SUBCODESN2,a.SUBCODESN3,a.CUORDQTY,a.VENORQTY,a.CUPICQTY,a.VENPIQTY,a.CUINVQTY,a.CUSHIQTY,a.VENSHQTY,a.EFFDATE,a.INTEGRSET,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2,a.LOCATION,a.BARUPC)FROM \""+schemaName+"\".\"ITEM a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ACTIVITY_b b SET(SID,ACTIVITYCODE,QUANTITY,DESCRIPT,DATE,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,BARUPC)=(a.SID,a.ACTIVITYCODE,a.QUANTITY,a.DESCRIPT,a.DATE,a.SOURCE1,a.SOURCE2,a.UPCCODE,a.COST,a.REPLCOST,a.SELPRICE,a.SPRICOLD,a.SPRICNEW,a.SPRICEFFDT,a.SHIPCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.MISCCODE1,a.MISCCODE2,a.QTYLEVEL1,a.UNIT,a.CASEQTY,a.TYPE,a.TAX1,a.TAX2,a.TAX3,a.ALIASCODE,a.PARENTCODE,a.AVGPRICE,a.AVGCOST,a.STATUSFL,a.STATUSFLDT,a.SUBCODESN,a.SUBCODESN2,a.SUBCODESN3,a.CUORDQTY,a.VENORQTY,a.CUPICQTY,a.VENPIQTY,a.CUINVQTY,a.CUSHIQTY,a.VENSHQTY,a.EFFDATE,a.INTEGRSET,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2,a.BARUPC)FROM \""+schemaName+"\".\"ACTIVITY a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"SCHEDULE_b b SET(SID,TODO,DESCRIPT,EMPLOYEE,SSDATET,ACTIVITYCODE,LOCATION,SDATET,DURATIONH,DURATIONM,STIMEH,STIMEM,STIMEAMPM,EDATET,PRIORITY,PERCNTDONE,VENDOR,VONTACT,CUSTOMER,TYPE,MAILTOCODE,OTHEREMPLO,REPEATF,STATUSFL,STATUSFLDT,PRIVATEIND,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.TODO,a.DESCRIPT,a.EMPLOYEE,a.SSDATET,a.ACTIVITYCODE,a.LOCATION,a.SDATET,a.DURATIONH,a.DURATIONM,a.STIMEH,a.STIMEM,a.STIMEAMPM,a.EDATET,a.PRIORITY,a.PERCNTDONE,a.VENDOR,a.VONTACT,a.CUSTOMER,a.TYPE,a.MAILTOCODE,a.OTHEREMPLO,a.REPEATF,a.STATUSFL,a.STATUSFLDT,a.PRIVATEIND,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"SCHEDULE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"USERPROFL_b b SET(SID,LOGONID,ROW,OPTION,SELECTVALUE,SCRCOLOR,HILCOLOR,TEXTCOLOR,BACCOLOR,BEEPSOU,CONFIRM,PROMPTI,P1,P2,P3,P4,P5,P6,MTSTYLE,STSTYLE,DTSTYLE,FTSTYLE,DEFAULTR,DEFAULTC,DBNAME,ROOTDIR,KEYORDER,MARGIN,FOOTER,LISTBUILDC,LISTBUILDV,LISTBUILDE,LISTBROWNC,LISTBROWNV,LISTBROWNE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.LOGONID,a.ROW,a.OPTION,a.SELECTVALUE,a.SCRCOLOR,a.HILCOLOR,a.TEXTCOLOR,a.BACCOLOR,a.BEEPSOU,a.CONFIRM,a.PROMPTI,a.P1,a.P2,a.P3,a.P4,a.P5,a.P6,a.MTSTYLE,a.STSTYLE,a.DTSTYLE,a.FTSTYLE,a.DEFAULTR,a.DEFAULTC,a.DBNAME,a.ROOTDIR,a.KEYORDER,a.MARGIN,a.FOOTER,a.LISTBUILDC,a.LISTBUILDV,a.LISTBUILDE,a.LISTBROWNC,a.LISTBROWNV,a.LISTBROWNE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"USERPROFL a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"USER_b b SET(SID,ID,CLIENT,EMPLOYEE,VENDOR,CUSTOMER,OTHERID,ALEVEL,BLEVEL,CURRPW,EXPIRY,OLDPW,TEMPORARYPASSWORD,PASSWORDHASH,ACTIVATIONKEY,RESTRICT1,RESTRICT2,RESTRICT3,ALLOW1,ALLOW2,ALLOW3,MAXPROFLROW,CPROFLROW,STATUSFL,STATUSFLDT,UCURRCALDA,PREPROCESS,NOTES,DOCMNT,OWNER,OWNER2)=(a.SID,a.ID,a.CLIENT,a.EMPLOYEE,a.VENDOR,a.CUSTOMER,a.OTHERID,a.ALEVEL,a.BLEVEL,a.CURRPW,a.EXPIRY,a.OLDPW,a.TEMPORARYPASSWORD,a.PASSWORDHASH,a.ACTIVATIONKEY,a.RESTRICT1,a.RESTRICT2,a.RESTRICT3,a.ALLOW1,a.ALLOW2,a.ALLOW3,a.MAXPROFLROW,a.CPROFLROW,a.STATUSFL,a.STATUSFLDT,a.UCURRCALDA,a.PREPROCESS,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"user a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"VENARTHA_b b SET(SID,CHQNUMBER,RECONCILED,VENDORC,DATE,ADDRESCODE,CHQAMT,AMTVERBOS,NOTES,ADVISEL1,ADVISEL2,ADVISEL3,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.CHQNUMBER,a.RECONCILED,a.VENDORC,a.DATE,a.ADDRESCODE,a.CHQAMT,a.AMTVERBOS,a.NOTES,a.ADVISEL1,a.ADVISEL2,a.ADVISEL3,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"VENARTHA a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"ACINTEGR_b b SET(SID,MODULEID,USAGEDESCR,USAGECODE,SETSID,ACCOUNT,EXTRAINTFIELD,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.MODULEID,a.USAGEDESCR,a.USAGECODE,a.SETSID,a.ACCOUNT,a.EXTRAINTFIELD,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ACINTEGR a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"ITEMJOB_b b SET(SID,JOBNO,MATCODE,PRODDATET,QTYALLOC,PONO,QTYOSTND,QTYALSTK,QTYISSUD,JOBTOTL,STATUSFL,CUSTOMEJ,VENDOR,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,PRINTMSTATJ,PRINMTFLDTJ,TYPE,MATCODEOUT,QTYOUT,NOTES,OWNER,OWNER2)=(a.SID,a.JOBNO,a.MATCODE,a.PRODDATET,a.QTYALLOC,a.PONO,a.QTYOSTND,a.QTYALSTK,a.QTYISSUD,a.JOBTOTL,a.STATUSFL,a.CUSTOMEJ,a.VENDOR,a.STATUSFLDT,a.PRINTMSTAT,a.PRINMTFLDT,a.PRINTMSTATJ,a.PRINMTFLDTJ,a.TYPE,a.MATCODEOUT,a.QTYOUT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ITEMJOB a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"ACTIVITYJOB_b b SET(SID,JOBNO,ACTIVITYCODE,PRODDATET,QTYALLOC,PONO,QTYOSTND,QTYALSTK,QTYISSUD,JOBTOTL,STATUSFL,CUSTOMEJ,VENDOR,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,PRINTMSTATJ,PRINMTFLDTJ,TYPE,MATCODEOUT,QTYOUT,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.JOBNO,a.ACTIVITYCODE,a.PRODDATET,a.QTYALLOC,a.PONO,a.QTYOSTND,a.QTYALSTK,a.QTYISSUD,a.JOBTOTL,a.STATUSFL,a.CUSTOMEJ,a.VENDOR,a.STATUSFLDT,a.PRINTMSTAT,a.PRINMTFLDT,a.PRINTMSTATJ,a.PRINMTFLDTJ,a.TYPE,a.MATCODEOUT,a.QTYOUT,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"ACTIVITYJOB a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"PROCESSATTRIBUTES_b b SET(SID,PDETAILS,NAME,VALUE,TYPE,RANGE,STEP,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PDETAILS,a.NAME,a.VALUE,a.TYPE,a.RANGE,a.STEP,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"PROCESSATTRIBUTES a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"PROCESSDETAILS_b b SET(SID,PROCESS,CPONO,MATCODE,CUSTOMER,SDATET,DURATIONH,DURATIONM,STIMEH,STIMEM,STIMEAMPM,EDATET,PRIORITY,PERCNTDONE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PROCESS,a.CPONO,a.MATCODE,a.CUSTOMER,a.SDATET,a.DURATIONH,a.DURATIONM,a.STIMEH,a.STIMEM,a.STIMEAMPM,a.EDATET,a.PRIORITY,a.PERCNTDONE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"PROCESSDETAILS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"VENQUOTE_b b SET(SID,PURCHSNO,DELVDATET,VENDOR,MATCODE,REPLICATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,CINVOICE,JOBNO,VPONO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.VENDOR,a.MATCODE,a.REPLICATE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.CINVOICE,a.JOBNO,a.VPONO,a.RFPORD,a.STATUSFLDT,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.SHIPCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"VENQUOTE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"VENDORDERS_b b SET(SID,PURCHSNO,DELVDATET,VENDOR,MATCODE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,JOBNO,VENDQNO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.VENDOR,a.MATCODE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.JOBNO,a.VENDQNO,a.RFPORD,a.STATUSFLDT,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.SHIPCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"VENDORDERS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"VSHIPMEN_b b SET(SID,SHIPCODE,MATCODE,SHIPPER,PONO,CPONO,INVOICE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,CARRIER,TYPE,SHIPDATET,SHIPDATETA,TARENO,PACKNO,VENDOR,CUSTOMER,BILLTOCODE,BILLTOSAMEASSHIPTO,SHIPTOCODE,NOTES,STATUSFL,STATUSFLDT,SERIALNO,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2)=(a.SID,a.SHIPCODE,a.MATCODE,a.SHIPPER,a.PONO,a.CPONO,a.INVOICE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.CARRIER,a.TYPE,a.SHIPDATET,a.SHIPDATETA,a.TARENO,a.PACKNO,a.VENDOR,a.CUSTOMER,a.BILLTOCODE,a.BILLTOSAMEASSHIPTO,a.SHIPTOCODE,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.SERIALNO,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"VSHIPMEN a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"CUQUOTE_b b SET(SID,PURCHSNO,DELVDATET,VENDOR,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,CUSTOMER,MATCODE,REPLICATE,CINVOICE,ORDPRICE,JOBNO,VPONO,QUOORDT,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,TYPE,TERMS,PRIORITY,ODATET,SHIPCODE,ACTIVITYCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,ATTACH,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.VENDOR,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.CUSTOMER,a.MATCODE,a.REPLICATE,a.CINVOICE,a.ORDPRICE,a.JOBNO,a.VPONO,a.QUOORDT,a.STATUSFLDT,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.TERMS,a.PRIORITY,a.ODATET,a.SHIPCODE,a.ACTIVITYCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.ATTACH,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"cuquote\" a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"CUORDERS_b b SET(SID,PURCHSNO,DELVDATET,CUSTOMER,MATCODE,CUQUOTE,CINVOICE,JOBNO,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,VPONO,RFPORD,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,DOCMNT,SHIPCODEFROMPAY,SHIPCODE,BARPO)=(a.SID,a.PURCHSNO,a.DELVDATET,a.CUSTOMER,a.MATCODE,a.CUQUOTE,a.CINVOICE,a.JOBNO,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.VPONO,a.RFPORD,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT,a.SHIPCODEFROMPAY,a.SHIPCODE,a.BARPO)FROM \""+schemaName+"\".\"CUORDERS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"CUINVOICE_b b SET(SID,INVOICE,CUSTOMER,MATCODE,INVODATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,PONO,REF1TYP,REF1CODE,SHIPDATET,SHIPTYPE,SHIPCODE,TERMS,STATUSFL,STATUSFLDT,TERMSDAT,DISCOUNP,DISCOUDT,DISCOUDS,NETDDAT,NETDDYS,FOB,TYPE,INTEGRSET,ATTACH,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,AGENT,NOTES,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,DOCMNT,BARINVOICE)=(a.SID,a.INVOICE,a.CUSTOMER,a.MATCODE,a.INVODATE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.PONO,a.REF1TYP,a.REF1CODE,a.SHIPDATET,a.SHIPTYPE,a.SHIPCODE,a.TERMS,a.STATUSFL,a.STATUSFLDT,a.TERMSDAT,a.DISCOUNP,a.DISCOUDT,a.DISCOUDS,a.NETDDAT,a.NETDDYS,a.FOB,a.TYPE,a.INTEGRSET,a.ATTACH,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.AGENT,a.NOTES,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2,a.DOCMNT,a.BARINVOICE)FROM \""+schemaName+"\".\"CUINVOICE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"SHIPMENT_b b SET(SID,SHIPCODE,MATCODE,SHIPPER,PONO,CPONO,INVOICE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,CARRIER,TYPE,SHIPDATET,SHIPDATETA,TARENO,PACKNO,CUSTOMER,BILLTOCODE,BILLTOSAMEASSHIPTO,SHIPTOCODE,NOTES,STATUSFL,STATUSFLDT,SERIALNO,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,BARSHIPCOD)=(a.SID,a.SHIPCODE,a.MATCODE,a.SHIPPER,a.PONO,a.CPONO,a.INVOICE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.CARRIER,a.TYPE,a.SHIPDATET,a.SHIPDATETA,a.TARENO,a.PACKNO,a.CUSTOMER,a.BILLTOCODE,a.BILLTOSAMEASSHIPTO,a.SHIPTOCODE,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.SERIALNO,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2,a.BARSHIPCOD)FROM \""+schemaName+"\".\"SHIPMENT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"EMPLORDERS_b b SET(SID,PURCHSNO,DELVDATET,EMPLOYEE,MATCODE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,JOBNO,VPONO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.EMPLOYEE,a.MATCODE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.JOBNO,a.VPONO,a.RFPORD,a.STATUSFLDT,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.SHIPCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"EMPLORDERS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"HLOGFILE_b b SET(SID,SERIALNO,MATCODE,QUANRECD,VENDOR,LOCATION,RECVRPT,INFLG,PHY,DATETIN,DATETOUT,JOBNO,PRINTMSTAT,PRINMTFLDT,PONO,SCANDATET,QUANISSD,BUTT,STATUSFL,QUANREJD,CUSTOMER,CPONO,CUSTOMEJ,ORGCOST,ORGPONO,ORGJOBNO,ALTSERNO,SELPRICE,PHYSQTY,SPERSON,CARTONID,CARTONPR,PACKCODE,TARECODE,SHIPCODE,TYPE,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.SERIALNO,a.MATCODE,a.QUANRECD,a.VENDOR,a.LOCATION,a.RECVRPT,a.INFLG,a.PHY,a.DATETIN,a.DATETOUT,a.JOBNO,a.PRINTMSTAT,a.PRINMTFLDT,a.PONO,a.SCANDATET,a.QUANISSD,a.BUTT,a.STATUSFL,a.QUANREJD,a.CUSTOMER,a.CPONO,a.CUSTOMEJ,a.ORGCOST,a.ORGPONO,a.ORGJOBNO,a.ALTSERNO,a.SELPRICE,a.PHYSQTY,a.SPERSON,a.CARTONID,a.CARTONPR,a.PACKCODE,a.TARECODE,a.SHIPCODE,a.TYPE,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"HLOGFILE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"CPAYMENT_b b SET(SID,PAYMENT,CUSTOMER,CINVOICE,CHEQDATE,PAYMENTDUEDATE,POSTINGPERIOD,MATCODE,INTEGRSET,ACCOUNT,AMOUNTTOTAL,AMOUNTOSTNDT,AMOUNTIN,QTYTOTAL,QTYOSTNDT,DISCOUNT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,PAYTYPE,PAYBYID,PAYBYDATE,CURRENCY,CONVRATE,LOCAMOUNTT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PAYMENT,a.CUSTOMER,a.CINVOICE,a.CHEQDATE,a.PAYMENTDUEDATE,a.POSTINGPERIOD,a.MATCODE,a.INTEGRSET,a.ACCOUNT,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.AMOUNTIN,a.QTYTOTAL,a.QTYOSTNDT,a.DISCOUNT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.PAYTYPE,a.PAYBYID,a.PAYBYDATE,a.CURRENCY,a.CONVRATE,a.LOCAMOUNTT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"CPAYMENT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"MACHINE_b b SET(SID,MACHINECODE,QUANTITY,DESCRIPT,DATEADDED,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,BARUPC)=(a.SID,a.MACHINECODE,a.QUANTITY,a.DESCRIPT,a.DATEADDED,a.SOURCE1,a.SOURCE2,a.UPCCODE,a.COST,a.REPLCOST,a.SELPRICE,a.SPRICOLD,a.SPRICNEW,a.SPRICEFFDT,a.SHIPCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.MISCCODE1,a.MISCCODE2,a.QTYLEVEL1,a.UNIT,a.CASEQTY,a.TYPE,a.TAX1,a.TAX2,a.TAX3,a.ALIASCODE,a.PARENTCODE,a.AVGPRICE,a.AVGCOST,a.STATUSFL,a.STATUSFLDT,a.SUBCODESN,a.SUBCODESN2,a.SUBCODESN3,a.CUORDQTY,a.VENORQTY,a.CUPICQTY,a.VENPIQTY,a.CUINVQTY,a.CUSHIQTY,a.VENSHQTY,a.EFFDATE,a.INTEGRSET,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2,a.BARUPC)FROM \""+schemaName+"\".\"MACHINE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"GROUPMEMBERS_b b SET(SID,GROUPID,MEMBERID,DESCRIPT,SOURCETYPE,MEMBEREM,MEMBERCU,MEMBERVE,MEMBERIT,MEMBERAC,MEMBERMA,TYPE,CURRPW,EXPIRY,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.GROUPID,a.MEMBERID,a.DESCRIPT,a.SOURCETYPE,a.MEMBEREM,a.MEMBERCU,a.MEMBERVE,a.MEMBERIT,a.MEMBERAC,a.MEMBERMA,a.TYPE,a.CURRPW,a.EXPIRY,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"GROUPMEMBERS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ITEMBOM_b b SET(SID,BOMCODE,DESCRIPT,QUANTITY,MODE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.BOMCODE,a.DESCRIPT,a.QUANTITY,a.MODE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ITEMBOM a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"ITEMBOMDETAILS_b b SET(SID,BOMCODE,MATCODE,MODE,SUBQTY,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.BOMCODE,a.MATCODE,a.MODE,a.SUBQTY,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ITEMBOMDETAILS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"TASK_b b SET(SID,TASKID,DESCRIPT,ACTIVITYCODE,PROJECTTEAM,RESOURCE,MODE,ESTSTART,CALCSTART,ACTLSTART,ESTEND,CALCEND,ACTLEND,SUBQTY,BOMCODE,LOCATION,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.TASKID,a.DESCRIPT,a.ACTIVITYCODE,a.PROJECTTEAM,a.RESOURCE,a.MODE,a.ESTSTART,a.CALCSTART,a.ACTLSTART,a.ESTEND,a.CALCEND,a.ACTLEND,a.SUBQTY,a.BOMCODE,a.LOCATION,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"TASK a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"VINVOICE_b b SET(SID,INVOICE,VENDOR,MATCODE,INTEGRSET,INVODATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,PONO,REF1TYP,REF1CODE,SHIPDATET,SHIPTYPE,SHIPCODE,TERMS,STATUSFL,STATUSFLDT,TERMSDAT,DISCOUNP,DISCOUDT,DISCOUDS,NETDDAT,NETDDYS,FOB,TYPE,ATTACH,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,AGENT,NOTES,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,DOCMNT)=(a.SID,a.INVOICE,a.VENDOR,a.MATCODE,a.INTEGRSET,a.INVODATE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.PONO,a.REF1TYP,a.REF1CODE,a.SHIPDATET,a.SHIPTYPE,a.SHIPCODE,a.TERMS,a.STATUSFL,a.STATUSFLDT,a.TERMSDAT,a.DISCOUNP,a.DISCOUDT,a.DISCOUDS,a.NETDDAT,a.NETDDYS,a.FOB,a.TYPE,a.ATTACH,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.AGENT,a.NOTES,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"VINVOICE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"VPAYMENT_b b SET(SID,PAYMENT,VENDOR,VINVOICE,CHEQDATE,PAYMENTDUEDATE,POSTINGPERIOD,MATCODE,INTEGRSET,ACCOUNT,AMOUNTTOTAL,AMOUNTOSTNDT,AMOUNTIN,QTYTOTAL,QTYOSTNDT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,DISCOUNT,PAYTYPE,PAYBYID,PAYBYDATE,CURRENCY,CONVRATE,LOCAMOUNT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PAYMENT,a.VENDOR,a.VINVOICE,a.CHEQDATE,a.PAYMENTDUEDATE,a.POSTINGPERIOD,a.MATCODE,a.INTEGRSET,a.ACCOUNT,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.AMOUNTIN,a.QTYTOTAL,a.QTYOSTNDT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.DISCOUNT,a.PAYTYPE,a.PAYBYID,a.PAYBYDATE,a.CURRENCY,a.CONVRATE,a.LOCAMOUNT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"VPAYMENT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"WAGEEARNERAUX_b b SET(SID,WAGEEARNERID,LINE,SIN,WCBYTDL,WCBYTDN,INSYTDL,INSYTDN,VACATONYL,VACATONYN,PAYYTDL,FPENSIYTL,PPENSIYTL,ITAXYTDL,PTAXYTDL,PAYYTDN,FPENSIYTN,PPENSIYTN,ITAXYTDN,PATXYTDN,GPAYYTDL,GPAYYTDN,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.WAGEEARNERID,a.LINE,a.SIN,a.WCBYTDL,a.WCBYTDN,a.INSYTDL,a.INSYTDN,a.VACATONYL,a.VACATONYN,a.PAYYTDL,a.FPENSIYTL,a.PPENSIYTL,a.ITAXYTDL,a.PTAXYTDL,a.PAYYTDN,a.FPENSIYTN,a.PPENSIYTN,a.ITAXYTDN,a.PATXYTDN,a.GPAYYTDL,a.GPAYYTDN,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"WAGEEARNERAUX a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"Rgenapp_b b SET(SID,APPNAME,DESCRIPT,APPTYPE,APPWACCOUNTING,APPWEMAIL,APPWJMSMQ,APPVENDOR,APPVERSION,APPPLATFORM,APPMODELPKG,APPACTIONPKG,APPSKIN,APPDEPLOYTYPE,CREATEFIDATA,REVENGDATA,INITIALIZEFIDATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.APPNAME,a.DESCRIPT,a.APPTYPE,a.APPWACCOUNTING,a.APPWEMAIL,a.APPWJMSMQ,a.APPVENDOR,a.APPVERSION,a.APPPLATFORM,a.APPMODELPKG,a.APPACTIONPKG,a.APPSKIN,a.APPDEPLOYTYPE,a.CREATEFIDATA,a.REVENGDATA,a.INITIALIZEFIDATA,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"rgenapp\" a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"RGENDB_b b SET(SID,DBNAME,DESCRIPT,DBTYPE,DBVENDOR,DBVERSION,DBPLATFORM,APPCODE,SQLDRIVER,SQLURL,SQLUSER,SQLPASSWORD,SQLCLASSPATH,SQLCREATEDBSCRIPT,SQLDROPDBSCRIPT,SQLCREATETBLSSCRIPT,SQLLOADTBLSSCRIPT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.DBNAME,a.DESCRIPT,a.DBTYPE,a.DBVENDOR,a.DBVERSION,a.DBPLATFORM,a.APPCODE,a.SQLDRIVER,a.SQLURL,a.SQLUSER,a.SQLPASSWORD,a.SQLCLASSPATH,a.SQLCREATEDBSCRIPT,a.SQLDROPDBSCRIPT,a.SQLCREATETBLSSCRIPT,a.SQLLOADTBLSSCRIPT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"rgendb\" a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"RGENTABLE_b b SET(SID,TABLENAME,DBCODE,INADDMENU,INLISTMENU,INTRANSACTIONMENU,INREPORTMENU,INGRAPHSMENU,INMAILINGMENU,INGENERATEMENU,INADMINMENU,INMAINTENANCEMENU,INLABELSMENU,INSKIPMENU,INCUSTOM1MENU,MENULEVEL,MENUROLE,MENULABELGROUP,SUBMENUSEQUENCE,USAGESCOPE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.TABLENAME,a.DBCODE,a.INADDMENU,a.INLISTMENU,a.INTRANSACTIONMENU,a.INREPORTMENU,a.INGRAPHSMENU,a.INMAILINGMENU,a.INGENERATEMENU,a.INADMINMENU,a.INMAINTENANCEMENU,a.INLABELSMENU,a.INSKIPMENU,a.INCUSTOM1MENU,a.MENULEVEL,a.MENUROLE,a.MENULABELGROUP,a.SUBMENUSEQUENCE,a.USAGESCOPE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"RGENTABLE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"RGENFIELDS_b b SET(SID,DBCODE,TABLENAME,FIELDNAME,FIELDTYPE,FIELDLENGTH,INGROUP,SEQWITHINGROUP,FOCUSSEQ,FUTURE1,INITIALVALUE,KEYORADDITIONAL,KEYORADDITIONAL2,KEYORADDITIONAL3,SHOWINMENU,SHOWINREPORT,PROCESSOPTION1,PROCESSOPTION2,FDBCODE,FTABLENAME,FFIELDKEYNAME1,FFIELDKEYNAME2,FFIELDKEYNAME3,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.DBCODE,a.TABLENAME,a.FIELDNAME,a.FIELDTYPE,a.FIELDLENGTH,a.INGROUP,a.SEQWITHINGROUP,a.FOCUSSEQ,a.FUTURE1,a.INITIALVALUE,a.KEYORADDITIONAL,a.KEYORADDITIONAL2,a.KEYORADDITIONAL3,a.SHOWINMENU,a.SHOWINREPORT,a.PROCESSOPTION1,a.PROCESSOPTION2,a.FDBCODE,a.FTABLENAME,a.FFIELDKEYNAME1,a.FFIELDKEYNAME2,a.FFIELDKEYNAME3,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"RGENFIELDS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"GENOPTIONS_b b SET(SID,ROW,GENOPTIONS01,GENPURPOSE01,GENVALUE01,GENOPTIONS02,GENPURPOSE02,GENVALUE02,GENOPTIONS03,GENPURPOSE03,GENVALUE03,GENOPTIONS04,GENPURPOSE04,GENVALUE04,GENOPTIONS05,GENPURPOSE05,GENVALUE05,GENOPTIONS06,GENPURPOSE06,GENVALUE06,GENOPTIONS07,GENPURPOSE07,GENVALUE07,GENOPTIONS08,GENPURPOSE08,GENVALUE08,GENOPTIONS09,GENPURPOSE09,GENVALUE09,GENOPTIONS10,GENPURPOSE10,GENVALUE10,GENOPTIONS11,GENPURPOSE11,GENVALUE11,GENOPTIONS12,GENPURPOSE12,GENVALUE12,GENOPTIONS13,GENPURPOSE13,GENVALUE13,GENOPTIONS14,GENPURPOSE14,GENVALUE14,GENOPTIONS15,GENPURPOSE15,GENVALUE15,GENOPTIONS16,GENPURPOSE16,GENVALUE16,GENOPTIONS17,GENPURPOSE17,GENVALUE17,GENOPTIONS18,GENPURPOSE18,GENVALUE18,GENOPTIONS19,GENPURPOSE19,GENVALUE19,GENOPTIONS20,GENPURPOSE20,GENVALUE20,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.ROW,a.GENOPTIONS01,a.GENPURPOSE01,a.GENVALUE01,a.GENOPTIONS02,a.GENPURPOSE02,a.GENVALUE02,a.GENOPTIONS03,a.GENPURPOSE03,a.GENVALUE03,a.GENOPTIONS04,a.GENPURPOSE04,a.GENVALUE04,a.GENOPTIONS05,a.GENPURPOSE05,a.GENVALUE05,a.GENOPTIONS06,a.GENPURPOSE06,a.GENVALUE06,a.GENOPTIONS07,a.GENPURPOSE07,a.GENVALUE07,a.GENOPTIONS08,a.GENPURPOSE08,a.GENVALUE08,a.GENOPTIONS09,a.GENPURPOSE09,a.GENVALUE09,a.GENOPTIONS10,a.GENPURPOSE10,a.GENVALUE10,a.GENOPTIONS11,a.GENPURPOSE11,a.GENVALUE11,a.GENOPTIONS12,a.GENPURPOSE12,a.GENVALUE12,a.GENOPTIONS13,a.GENPURPOSE13,a.GENVALUE13,a.GENOPTIONS14,a.GENPURPOSE14,a.GENVALUE14,a.GENOPTIONS15,a.GENPURPOSE15,a.GENVALUE15,a.GENOPTIONS16,a.GENPURPOSE16,a.GENVALUE16,a.GENOPTIONS17,a.GENPURPOSE17,a.GENVALUE17,a.GENOPTIONS18,a.GENPURPOSE18,a.GENVALUE18,a.GENOPTIONS19,a.GENPURPOSE19,a.GENVALUE19,a.GENOPTIONS20,a.GENPURPOSE20,a.GENVALUE20,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"GENOPTIONS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"BLOBDATA_b b SET(SID,FROMTABLE,FROMKEY,QUALIFIER,SEQUENCE,TYPE,DATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.FROMTABLE,a.FROMKEY,a.QUALIFIER,a.SEQUENCE,a.TYPE,a.DATA,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"BLOBDATA a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"CLOBDATA_b b SET(SID,FROMTABLE,FROMKEY,QUALIFIER,SEQUENCE,TYPE,DATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.FROMTABLE,a.FROMKEY,a.QUALIFIER,a.SEQUENCE,a.TYPE,a.DATA,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"CLOBDATA a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"CONTROLUSAGEBYPERIODS_b b SET(SID,CTLUSAGETRACKERID,DESCRIPT,CONTROLCODE,CURRENCY,PERIOD0LABEL,PERIOD0B,PERIOD0,PERIODTOTALSLABEL,PERIODTOTALSB,PERIODTOTALS,PERIOD1LABEL,PERIOD1BUDGET,PERIOD1ACTUAL,PERIOD2LABEL,PERIOD2B,PERIOD2,PERIOD3LABEL,PERIOD3B,PERIOD3,PERIOD4LABEL,PERIOD4B,PERIOD4,PERIOD5LABEL,PERIOD5B,PERIOD5,PERIOD6LABEL,PERIOD6B,PERIOD6,PERIOD7LABEL,PERIOD7B,PERIOD7,PERIOD8LABEL,PERIOD8B,PERIOD8,PERIOD9LABEL,PERIOD9B,PERIOD9,PERIOD10LABEL,PERIOD10B,PERIOD10,PERIOD11LABEL,PERIOD11B,PERIOD11,PERIOD12LABEL,PERIOD12B,PERIOD12,PERIODNLABEL,PERIODNB,PERIODN,NOTES,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.CTLUSAGETRACKERID,a.DESCRIPT,a.CONTROLCODE,a.CURRENCY,a.PERIOD0LABEL,a.PERIOD0B,a.PERIOD0,a.PERIODTOTALSLABEL,a.PERIODTOTALSB,a.PERIODTOTALS,a.PERIOD1LABEL,a.PERIOD1BUDGET,a.PERIOD1ACTUAL,a.PERIOD2LABEL,a.PERIOD2B,a.PERIOD2,a.PERIOD3LABEL,a.PERIOD3B,a.PERIOD3,a.PERIOD4LABEL,a.PERIOD4B,a.PERIOD4,a.PERIOD5LABEL,a.PERIOD5B,a.PERIOD5,a.PERIOD6LABEL,a.PERIOD6B,a.PERIOD6,a.PERIOD7LABEL,a.PERIOD7B,a.PERIOD7,a.PERIOD8LABEL,a.PERIOD8B,a.PERIOD8,a.PERIOD9LABEL,a.PERIOD9B,a.PERIOD9,a.PERIOD10LABEL,a.PERIOD10B,a.PERIOD10,a.PERIOD11LABEL,a.PERIOD11B,a.PERIOD11,a.PERIOD12LABEL,a.PERIOD12B,a.PERIOD12,a.PERIODNLABEL,a.PERIODNB,a.PERIODN,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"CONTROLUSAGEBYPERIODS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"RESOURCE_BUNDLE_b b SET(SID,NAME,LANGUAGE,COUNTRY,VARIANT,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.NAME,a.LANGUAGE,a.COUNTRY,a.VARIANT,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"RESOURCE_BUNDLE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"RESOURCE_b b SET(SID,_KEY,_VALUE,RESOURCEBUNDLE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a._KEY,a._VALUE,a.RESOURCEBUNDLE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"resource\" a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"TRUEFALSE_b b SET(SID,TABLENAME,QUALIFIER,SHOW001,SHOW002,SHOW003,SHOW004,SHOW005,SHOW006,SHOW007,SHOW008,SHOW009,SHOW010,SHOW011,SHOW012,SHOW013,SHOW014,SHOW015,SHOW016,SHOW017,SHOW018,SHOW019,SHOW020,SHOW021,SHOW022,SHOW023,SHOW024,SHOW025,SHOW026,SHOW027,SHOW028,SHOW029,SHOW030,SHOW031,SHOW032,SHOW033,SHOW034,SHOW035,SHOW036,SHOW037,SHOW038,SHOW039,SHOW040,SHOW041,SHOW042,SHOW043,SHOW044,SHOW045,SHOW046,SHOW047,SHOW048,SHOW049,SHOW050,SHOW051,SHOW052,SHOW053,SHOW054,SHOW055,SHOW056,SHOW057,SHOW058,SHOW059,SHOW060,SHOW061,SHOW062,SHOW063,SHOW064,SHOW065,SHOW066,SHOW067,SHOW068,SHOW069,SHOW070,SHOW071,SHOW072,SHOW073,SHOW074,SHOW075,SHOW076,SHOW077,SHOW078,SHOW079,SHOW080,SHOW081,SHOW082,SHOW083,SHOW084,SHOW085,SHOW086,SHOW087,SHOW088,SHOW089,SHOW090,SHOW091,SHOW092,SHOW093,SHOW094,SHOW095,SHOW096,SHOW097,SHOW098,SHOW099,SHOW100,SHOW101,SHOW102,SHOW103,SHOW104,SHOW105,SHOW106,SHOW107,SHOW108,SHOW109,SHOW110,SHOW111,SHOW112,SHOW113,SHOW114,SHOW115,SHOW116,SHOW117,SHOW118,SHOW119,SHOW120,SHOW121,SHOW122,SHOW123,SHOW124,SHOW125,SHOW126,SHOW127,SHOW128,SHOW129,SHOW130,SHOW131,SHOW132,SHOW133,SHOW134,SHOW135,SHOW136,SHOW137,SHOW138,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.TABLENAME,a.QUALIFIER,a.SHOW001,a.SHOW002,a.SHOW003,a.SHOW004,a.SHOW005,a.SHOW006,a.SHOW007,a.SHOW008,a.SHOW009,a.SHOW010,a.SHOW011,a.SHOW012,a.SHOW013,a.SHOW014,a.SHOW015,a.SHOW016,a.SHOW017,a.SHOW018,a.SHOW019,a.SHOW020,a.SHOW021,a.SHOW022,a.SHOW023,a.SHOW024,a.SHOW025,a.SHOW026,a.SHOW027,a.SHOW028,a.SHOW029,a.SHOW030,a.SHOW031,a.SHOW032,a.SHOW033,a.SHOW034,a.SHOW035,a.SHOW036,a.SHOW037,a.SHOW038,a.SHOW039,a.SHOW040,a.SHOW041,a.SHOW042,a.SHOW043,a.SHOW044,a.SHOW045,a.SHOW046,a.SHOW047,a.SHOW048,a.SHOW049,a.SHOW050,a.SHOW051,a.SHOW052,a.SHOW053,a.SHOW054,a.SHOW055,a.SHOW056,a.SHOW057,a.SHOW058,a.SHOW059,a.SHOW060,a.SHOW061,a.SHOW062,a.SHOW063,a.SHOW064,a.SHOW065,a.SHOW066,a.SHOW067,a.SHOW068,a.SHOW069,a.SHOW070,a.SHOW071,a.SHOW072,a.SHOW073,a.SHOW074,a.SHOW075,a.SHOW076,a.SHOW077,a.SHOW078,a.SHOW079,a.SHOW080,a.SHOW081,a.SHOW082,a.SHOW083,a.SHOW084,a.SHOW085,a.SHOW086,a.SHOW087,a.SHOW088,a.SHOW089,a.SHOW090,a.SHOW091,a.SHOW092,a.SHOW093,a.SHOW094,a.SHOW095,a.SHOW096,a.SHOW097,a.SHOW098,a.SHOW099,a.SHOW100,a.SHOW101,a.SHOW102,a.SHOW103,a.SHOW104,a.SHOW105,a.SHOW106,a.SHOW107,a.SHOW108,a.SHOW109,a.SHOW110,a.SHOW111,a.SHOW112,a.SHOW113,a.SHOW114,a.SHOW115,a.SHOW116,a.SHOW117,a.SHOW118,a.SHOW119,a.SHOW120,a.SHOW121,a.SHOW122,a.SHOW123,a.SHOW124,a.SHOW125,a.SHOW126,a.SHOW127,a.SHOW128,a.SHOW129,a.SHOW130,a.SHOW131,a.SHOW132,a.SHOW133,a.SHOW134,a.SHOW135,a.SHOW136,a.SHOW137,a.SHOW138,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"TRUEFALSE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
//dec18 2018 column value was missing
sqlScript="UPDATE \""+schemaName+"\".\"RATE1F_b b SET(SID,USERTYPE,PRODTYPE,STEPNAME,STEP,VALUE,EFFDATE,ENDDATE,INCENTIVE,IEFFDATE,IENDDATE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.USERTYPE,a.PRODTYPE,a.STEPNAME,a.STEP,a.VALUE,a.EFFDATE,a.ENDDATE,a.INCENTIVE,a.IEFFDATE,a.IENDDATE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"RATE1F a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("removed")+": "+deletedCount+" "+ bundle.getString("updated")+": "+updatedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));



// update client record field carcsize to show last backupdate as a varchar
     sqlScript="update \""+schemaName+"\".\"client set carcsize=:backupdts where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2Code", owner2Code).setParameter("backupdts", sdf.format(calendar.getTime()));
      q.executeUpdate();
} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));

}



	 return "backUp done";
}

	public String  restoreTenant() {

     String sqlScript ="";
    int deletedCount=0;
    int updatedCount=0;
    int insertedCount=0;
     int errorCount=0;
     String errMsg="";
     // 1-remove rows from main if not in backup ie any new rows in main will be removed
     // 2-insert into main if old rows in backUp
     // 3-update main if \"row\" in backup has different change time  (relies on statusfldate change)
      // follow the deletion order list produced by schemaspygui C:\schemaspygui\postgres_postgre_\deletionOrder.txt ( future use the list as input to automate )
      // insertionOrder.txt for insert, for update order does not matter because we are not dropping or adding any relation but will follow
      // insertionOrder.txt

     // remove rows from main if not in backup ie any new rows in main will be removed
      // resource_bundle,resource,clob and blob have SYSTEM records which need extra logic
      // SYSTEM records should not be deleted from main or backup table but should be copied into backup if needed ?? revisit
      // give warning before restore that any new users/passwords since last back up will be lost. We cannot exclude user table
      // because other tables are related to user
      // jay add logic to exit if backup count is below ? for resource, clobdata , client etc
      // prevent running after truncate

try{
     sqlScript="select count(*) from \""+schemaName+"\".\"client_b a where  a.owner2=:owner2 ";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     ((BigInteger) q.getSingleResult()).intValue();
     deletedCount = deletedCount +((BigInteger) q.getSingleResult()).intValue();
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}

try{
     sqlScript="select count(*) from \""+schemaName+"\".\"blobdata_b a where  a.owner2=:owner2 ";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +((BigInteger) q.getSingleResult()).intValue();

     if(deletedCount == 0){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("backup")+" "+bundle.getString("empty"),""));
      return "";
     }
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
     deletedCount=0;
}
try{
     sqlScript="delete from \""+schemaName+"\".\"serialnumbers a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"serialnumbers_b b where a.sid = b.sid and b.owner2=:owner2)";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}
try{
     sqlScript="delete from \""+schemaName+"\".\"scandate a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"scandate_b b where a.sid = b.sid and b.owner2=:owner2)";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}
try{
     sqlScript="delete from \""+schemaName+"\".\"rate1f a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rate1f_b b where a.sid = b.sid and b.owner2=:owner2)";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}


try{
     sqlScript="delete from \""+schemaName+"\".\"options a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"options_b b where a.sid = b.sid and b.owner2=:owner2)";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"nextserialno a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"nextserialno_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"journal a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"journal_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jjournal a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"jjournal_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"hlogfile a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"hlogfile_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"genoptions a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"genoptions_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"editlog a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"editlog_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"clobdata a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"clobdata_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     if(owner2Code.equals("raaspi")){
     sqlScript="delete from \""+schemaName+"\".\"clobdata a where  a.owner2='SYSTEM'  and  not exists  (select \"sid\" from \""+schemaName+"\".\"clobdata_b b where a.sid = b.sid and b.owner2='SYSTEM')";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     }
     sqlScript="delete from \""+schemaName+"\".\"cjournal a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cjournal_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"blobdata a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"blobdata_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     if(owner2Code.equals("raaspi")){
     sqlScript="delete from \""+schemaName+"\".\"blobdata a where  a.owner2='SYSTEM'  and  not exists  (select \"sid\" from \""+schemaName+"\".\"blobdata_b b where a.sid = b.sid and b.owner2='SYSTEM')";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     }
     sqlScript="delete from \""+schemaName+"\".\"arthatbl a where  a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"arthatbl_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthahist a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"arthahist_b b where  a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acperiod a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"acperiod_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jobassignment a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"jobassignment_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"schedule a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"schedule_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmendetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vshipmendetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vcontact a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vcontact_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipmentdetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"shipmentdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"ccontact a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"ccontact_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendqdetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendqdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendpdetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendpdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendodetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendodetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendidetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendidetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resourcedetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"resourcedetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplodetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"emplodetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuqdetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuqdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuodetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuodetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuidetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuidetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"usagebyperiods a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"usagebyperiods_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgenfields a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rgenfields_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"itembomdetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"itembomdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"holiday a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"holiday_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"gentriesdetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"gentriesdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cupdetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cupdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjobdetails a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"activityjobdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearneraux a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"wageearneraux_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venartha a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"venartha_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"userprofl a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"userprofl_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resource\" a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"resource_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     if(owner2Code.equals("raaspi")){
     sqlScript="delete from \""+schemaName+"\".\"resource\" a where   a.owner2='SYSTEM'  and  not exists  (select \"sid\" from \""+schemaName+"\".\"resource_b b where  a.sid = b.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     }

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"controlusagebyperiods_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acintegr a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"acintegr_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"user a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"user_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplorders a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"emplorders_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vpayment a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vpayment_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"task a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"task_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cpayment a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cpayment_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"glentries a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"glentries_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"controlusagebyperiods_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjob a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"activityjob_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearner a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"wageearner_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgentable a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rgentable_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itemjob a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"itemjob_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmen a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vshipmen_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"groupmembers a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"groupmembers_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vinvoice a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vinvoice_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipment a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"shipment_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendorders a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendorders_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuinvoice a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuinvoice_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuorders a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuorders_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"projectt\" a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"project_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"outline a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"outline_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venquote a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"venquote_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuquote\" a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuquote_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"machine a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"machine_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activity a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"activity_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"item a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"item_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"employee a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"employee_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"customer a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"customer_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendor a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendor_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"location a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"location_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"account a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"account_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgendb\" a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rgendb_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"company a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"company_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rollupgroup a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rollupgroup_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rgenapp\" a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rgenapp_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"resource_bundle a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     if(owner2Code.equals("raaspi")){
     sqlScript="delete from \""+schemaName+"\".\"resource_bundle a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", "SYSTEM");
     deletedCount = deletedCount +q.executeUpdate();
     }

     sqlScript="delete from \""+schemaName+"\".\"perioddates a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"perioddates_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"itembom a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"itembom_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"control a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"control_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"client a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"client_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"residency a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"residency_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"membersgroup\" a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"membersgroup_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"division a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"division_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"department a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"department_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"address a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"address_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();




     // insert into main if old rows in backUp

      sqlScript="insert into \""+schemaName+"\".\"address select * from \""+schemaName+"\".\"address_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"address  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"department select * from \""+schemaName+"\".\"department_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"department  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"division select * from \""+schemaName+"\".\"division_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"division  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"membersgroup\" select * from \""+schemaName+"\".\"membersgroup_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"membersgroup\"  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"residency select * from \""+schemaName+"\".\"residency_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"residency  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"client select * from \""+schemaName+"\".\"client_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"client  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"control select * from \""+schemaName+"\".\"control_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"control  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itembom select * from \""+schemaName+"\".\"itembom_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"itembom  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"perioddates select * from \""+schemaName+"\".\"perioddates_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"perioddates  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"resource_bundle select * from \""+schemaName+"\".\"resource_bundle_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"resource_bundle select * from \""+schemaName+"\".\"resource_bundle_b b where  b.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle  a where b.sid = a.sid and a.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"rgenapp\" select * from \""+schemaName+"\".\"rgenapp_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgenapp\"  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rollupgroup select * from \""+schemaName+"\".\"rollupgroup_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rollupgroup  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"company select * from \""+schemaName+"\".\"company_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"company  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rgendb\" select * from \""+schemaName+"\".\"rgendb_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgendb\"  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"account select * from \""+schemaName+"\".\"account_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"account  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"location select * from \""+schemaName+"\".\"location_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"location  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vendor select * from \""+schemaName+"\".\"vendor_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendor  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"customer select * from \""+schemaName+"\".\"customer_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"customer  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"employee select * from \""+schemaName+"\".\"employee_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"employee  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"item select * from \""+schemaName+"\".\"item_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"item  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"activity select * from \""+schemaName+"\".\"activity_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"activity  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"machine select * from \""+schemaName+"\".\"machine_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"machine  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuquote\" select * from \""+schemaName+"\".\"cuquote_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuquote\"  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"venquote select * from \""+schemaName+"\".\"venquote_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"venquote  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"outline select * from \""+schemaName+"\".\"outline_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"outline  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"projectt\" select * from \""+schemaName+"\".\"project_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"projectt\"  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuorders select * from \""+schemaName+"\".\"cuorders_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuorders  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuinvoice select * from \""+schemaName+"\".\"cuinvoice_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuinvoice  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vendorders select * from \""+schemaName+"\".\"vendorders_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendorders  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"shipment select * from \""+schemaName+"\".\"shipment_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"shipment  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vinvoice select * from \""+schemaName+"\".\"vinvoice_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vinvoice  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"groupmembers select * from \""+schemaName+"\".\"groupmembers_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"groupmembers  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vshipmen select * from \""+schemaName+"\".\"vshipmen_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vshipmen  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itemjob select * from \""+schemaName+"\".\"itemjob_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"itemjob  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"rgentable select * from \""+schemaName+"\".\"rgentable_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgentable  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"wageearner select * from \""+schemaName+"\".\"wageearner_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"wageearner  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"activityjob select * from \""+schemaName+"\".\"activityjob_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"activityjob  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"glentries select * from \""+schemaName+"\".\"glentries_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"glentries  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cpayment select * from \""+schemaName+"\".\"cpayment_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cpayment  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"task select * from \""+schemaName+"\".\"task_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"task  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vpayment select * from \""+schemaName+"\".\"vpayment_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vpayment  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"emplorders select * from \""+schemaName+"\".\"emplorders_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"emplorders  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"user select * from \""+schemaName+"\".\"user_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"user a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"acintegr select * from \""+schemaName+"\".\"acintegr_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"acintegr  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"controlusagebyperiods select * from \""+schemaName+"\".\"controlusagebyperiods_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"controlusagebyperiods  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"resource\" select * from \""+schemaName+"\".\"resource_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource\"  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"resource\" select * from \""+schemaName+"\".\"resource_b b where  b.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource\"  a where b.sid = a.sid and a.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"userprofl select * from \""+schemaName+"\".\"userprofl_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"userprofl  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"venartha select * from \""+schemaName+"\".\"venartha_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"venartha  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"wageearneraux select * from \""+schemaName+"\".\"wageearneraux_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"wageearneraux  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"activityjobdetails select * from \""+schemaName+"\".\"activityjobdetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"activityjobdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cupdetails select * from \""+schemaName+"\".\"cupdetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cupdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"gentriesdetails select * from \""+schemaName+"\".\"gentriesdetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"gentriesdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"holiday select * from \""+schemaName+"\".\"holiday_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"holiday  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itembomdetails select * from \""+schemaName+"\".\"itembomdetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"itembomdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();



      sqlScript="insert into \""+schemaName+"\".\"rgenfields select * from \""+schemaName+"\".\"rgenfields_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgenfields  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"usagebyperiods select * from \""+schemaName+"\".\"usagebyperiods_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"usagebyperiods  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuidetails select * from \""+schemaName+"\".\"cuidetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuidetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuodetails select * from \""+schemaName+"\".\"cuodetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuodetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuqdetails select * from \""+schemaName+"\".\"cuqdetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuqdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"emplodetails select * from \""+schemaName+"\".\"emplodetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"emplodetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"resourcedetails select * from \""+schemaName+"\".\"resourcedetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resourcedetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendidetails select * from \""+schemaName+"\".\"vendidetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendidetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendodetails select * from \""+schemaName+"\".\"vendodetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendodetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendpdetails select * from \""+schemaName+"\".\"vendpdetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendpdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendqdetails select * from \""+schemaName+"\".\"vendqdetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendqdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"ccontact select * from \""+schemaName+"\".\"ccontact_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"ccontact  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"shipmentdetails select * from \""+schemaName+"\".\"shipmentdetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"shipmentdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vcontact select * from \""+schemaName+"\".\"vcontact_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vcontact  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vshipmendetails select * from \""+schemaName+"\".\"vshipmendetails_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vshipmendetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"schedule select * from \""+schemaName+"\".\"schedule_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"schedule  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"jobassignment select * from \""+schemaName+"\".\"jobassignment_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"jobassignment  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"acperiod select * from \""+schemaName+"\".\"acperiod_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"acperiod  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"arthahist select * from \""+schemaName+"\".\"arthahist_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"arthahist  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"arthatbl select * from \""+schemaName+"\".\"arthatbl_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"arthatbl  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"holiday select * from \""+schemaName+"\".\"holiday_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"holiday  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"blobdata select * from \""+schemaName+"\".\"blobdata_b b where  b.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"blobdata  a where b.sid = a.sid and a.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"blobdata select * from \""+schemaName+"\".\"blobdata_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"blobdata  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cjournal select * from \""+schemaName+"\".\"cjournal_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cjournal  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"clobdata select * from \""+schemaName+"\".\"clobdata_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"clobdata  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"clobdata select * from \""+schemaName+"\".\"clobdata_b b where  b.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"clobdata  a where b.sid = a.sid and a.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"editlog select * from \""+schemaName+"\".\"editlog_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"editlog  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"genoptions select * from \""+schemaName+"\".\"genoptions_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"genoptions  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"hlogfile select * from \""+schemaName+"\".\"hlogfile_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"hlogfile  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"jjournal select * from \""+schemaName+"\".\"jjournal_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"jjournal  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"journal select * from \""+schemaName+"\".\"journal_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"journal  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"nextserialno select * from \""+schemaName+"\".\"nextserialno_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"nextserialno  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"options select * from \""+schemaName+"\".\"options_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"options  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"rate1f select * from \""+schemaName+"\".\"rate1f_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rate1f  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"scandate select * from \""+schemaName+"\".\"scandate_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"scandate  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"serialnumbers select * from \""+schemaName+"\".\"serialnumbers_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"serialnumbers  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();






      // update main if \"row\" in backup has different change time (relies on statusfldate change)
      //oct04 2018 use postingdate instead of statusdt
      // journals,glentries,details do not get updated so are not included in updates jay add logic to prevent updating glentries ??
      // oct06 2018, they are included now, can get updated by repair
sqlScript="UPDATE \""+schemaName+"\".\"JOURNAL a SET(SID,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,STATUSFL,OWNER,OWNER2)=(b.SID,b.spostdate,b.postdate,b.calendardt,b.jrnltype,b.jnlseqb,b.jnlseq,b.jnlseqs,b.period,b.account,b.debit,b.credit,b.xreference,b.descript,b.STATUSFL,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"journal_b b where((b.sid=a.sid\") AND (a.postdate<>b.postdate) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"gentriesdetails a SET(SID,glentrysidno,line,depcode,divcode,account,debitamt,creditamt,linetotl,notes,STATUSFL,statusfldt,OWNER,OWNER2)=(b.SID,b.glentrysidno,b.line,b.depcode,b.divcode,b.account,b.debitamt,b.creditamt,b.linetotl,b.notes,b.STATUSFL,b.statusfldt,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"gentriesdetails_b b where((b.sid=a.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"glentries a SET(SID,glentryno,descript,refcode,period,postdate,calendardt,depcode,divcode,account,tdebitamt,tcreditamt,notes,STATUSFL,statusfldt,OWNER,OWNER2)=(b.SID,b.glentryno,b.descript,b.refcode,b.period,b.postdate,b.calendardt,b.depcode,b.divcode,b.account,b.tdebitamt,b.tcreditamt,b.notes,b.STATUSFL,b.statusfldt,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"glentries_b b where((b.sid=a.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"ADDRESS a SET(SID,ADDRESCODE,ADDRL1,ADDRL2,ADDRL3,CITY,PROVNSTATE,COUNTRY,PZCODE,DESCRIPT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,PRINTMSTAT,PRINMTFLDT)=(b.SID,b.ADDRESCODE,b.ADDRL1,b.ADDRL2,b.ADDRL3,b.CITY,b.PROVNSTATE,b.COUNTRY,b.PZCODE,b.DESCRIPT,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2,b.PRINTMSTAT,b.PRINMTFLDT)FROM \""+schemaName+"\".\"address_b b where((b.sid=a.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"OPTIONS a SET(SID,ROW,OPTIONS01,PURPOSE01,VALUE01,OPTIONS02,PURPOSE02,VALUE02,OPTIONS03,PURPOSE03,VALUE03,OPTIONS04,PURPOSE04,VALUE04,OPTIONS05,PURPOSE05,VALUE05,OPTIONS06,PURPOSE06,VALUE06,OPTIONS07,PURPOSE07,VALUE07,OPTIONS08,PURPOSE08,VALUE08,OPTIONS09,PURPOSE09,VALUE09,OPTIONS10,PURPOSE10,VALUE10,OPTIONS11,PURPOSE11,VALUE11,OPTIONS12,PURPOSE12,VALUE12,OPTIONS13,PURPOSE13,VALUE13,OPTIONS14,PURPOSE14,VALUE14,OPTIONS15,PURPOSE15,VALUE15,OPTIONS16,PURPOSE16,VALUE16,OPTIONS17,PURPOSE17,VALUE17,OPTIONS18,PURPOSE18,VALUE18,OPTIONS19,PURPOSE19,VALUE19,OPTIONS20,PURPOSE20,VALUE20,OPTIONS21,PURPOSE21,VALUE21,OPTIONS22,PURPOSE22,VALUE22,OPTIONS23,PURPOSE23,VALUE23,OPTIONS24,PURPOSE24,VALUE24,OPTIONS25,PURPOSE25,VALUE25,OPTIONS26,PURPOSE26,VALUE26,OPTIONS27,PURPOSE27,VALUE27,OPTIONS28,PURPOSE28,VALUE28,OPTIONS29,PURPOSE29,VALUE29,OPTIONS30,PURPOSE30,VALUE30,OPTIONS31,PURPOSE31,VALUE31,OPTIONS32,PURPOSE32,VALUE32,OPTIONS33,PURPOSE33,VALUE33,OPTIONS34,PURPOSE34,VALUE34,OPTIONS35,PURPOSE35,VALUE35,OPTIONS36,PURPOSE36,VALUE36,OPTIONS37,PURPOSE37,VALUE37,OPTIONS38,PURPOSE38,VALUE38,OPTIONS39,PURPOSE39,VALUE39,OPTIONS40,PURPOSE40,VALUE40,OPTIONS41,PURPOSE41,VALUE41,OPTIONS42,PURPOSE42,VALUE42,OPTIONS43,PURPOSE43,VALUE43,OPTIONS44,PURPOSE44,VALUE44,OPTIONS45,PURPOSE45,VALUE45,OPTIONS46,PURPOSE46,VALUE46,OPTIONS47,PURPOSE47,VALUE47,OPTIONS48,PURPOSE48,VALUE48,OPTIONS49,PURPOSE49,VALUE49,OPTIONS50,PURPOSE50,VALUE50,OPTIONS51,PURPOSE51,VALUE51,OPTIONS52,PURPOSE52,VALUE52,OPTIONS53,PURPOSE53,VALUE53,OPTIONS54,PURPOSE54,VALUE54,OPTIONS55,PURPOSE55,VALUE55,OPTIONS56,PURPOSE56,VALUE56,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.ROW,b.OPTIONS01,b.PURPOSE01,b.VALUE01,b.OPTIONS02,b.PURPOSE02,b.VALUE02,b.OPTIONS03,b.PURPOSE03,b.VALUE03,b.OPTIONS04,b.PURPOSE04,a.VALUE04,b.OPTIONS05,b.PURPOSE05,b.VALUE05,b.OPTIONS06,b.PURPOSE06,b.VALUE06,b.OPTIONS07,b.PURPOSE07,b.VALUE07,b.OPTIONS08,b.PURPOSE08,b.VALUE08,b.OPTIONS09,b.PURPOSE09,b.VALUE09,b.OPTIONS10,b.PURPOSE10,b.VALUE10,b.OPTIONS11,b.PURPOSE11,b.VALUE11,b.OPTIONS12,b.PURPOSE12,b.VALUE12,b.OPTIONS13,b.PURPOSE13,b.VALUE13,b.OPTIONS14,b.PURPOSE14,b.VALUE14,b.OPTIONS15,b.PURPOSE15,b.VALUE15,b.OPTIONS16,b.PURPOSE16,b.VALUE16,b.OPTIONS17,b.PURPOSE17,b.VALUE17,b.OPTIONS18,b.PURPOSE18,b.VALUE18,b.OPTIONS19,b.PURPOSE19,b.VALUE19,b.OPTIONS20,b.PURPOSE20,b.VALUE20,b.OPTIONS21,b.PURPOSE21,b.VALUE21,b.OPTIONS22,b.PURPOSE22,b.VALUE22,b.OPTIONS23,b.PURPOSE23,b.VALUE23,b.OPTIONS24,b.PURPOSE24,b.VALUE24,b.OPTIONS25,b.PURPOSE25,b.VALUE25,b.OPTIONS26,b.PURPOSE26,b.VALUE26,b.OPTIONS27,b.PURPOSE27,b.VALUE27,b.OPTIONS28,b.PURPOSE28,b.VALUE28,b.OPTIONS29,b.PURPOSE29,b.VALUE29,b.OPTIONS30,b.PURPOSE30,b.VALUE30,b.OPTIONS31,b.PURPOSE31,b.VALUE31,b.OPTIONS32,b.PURPOSE32,b.VALUE32,b.OPTIONS33,b.PURPOSE33,b.VALUE33,b.OPTIONS34,b.PURPOSE34,b.VALUE34,b.OPTIONS35,b.PURPOSE35,b.VALUE35,b.OPTIONS36,b.PURPOSE36,b.VALUE36,b.OPTIONS37,b.PURPOSE37,b.VALUE37,b.OPTIONS38,b.PURPOSE38,b.VALUE38,b.OPTIONS39,b.PURPOSE39,b.VALUE39,b.OPTIONS40,b.PURPOSE40,b.VALUE40,b.OPTIONS41,b.PURPOSE41,b.VALUE41,b.OPTIONS42,b.PURPOSE42,b.VALUE42,b.OPTIONS43,b.PURPOSE43,b.VALUE43,b.OPTIONS44,b.PURPOSE44,b.VALUE44,b.OPTIONS45,b.PURPOSE45,b.VALUE45,b.OPTIONS46,b.PURPOSE46,b.VALUE46,b.OPTIONS47,b.PURPOSE47,b.VALUE47,b.OPTIONS48,b.PURPOSE48,b.VALUE48,b.OPTIONS49,b.PURPOSE49,b.VALUE49,b.OPTIONS50,b.PURPOSE50,b.VALUE50,b.OPTIONS51,b.PURPOSE51,b.VALUE51,b.OPTIONS52,b.PURPOSE52,b.VALUE52,b.OPTIONS53,b.PURPOSE53,b.VALUE53,b.OPTIONS54,b.PURPOSE54,b.VALUE54,b.OPTIONS55,b.PURPOSE55,b.VALUE55,b.OPTIONS56,b.PURPOSE56,b.VALUE56,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"OPTIONS_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
String line1="UPDATE \""+schemaName+"\".\"CLIENT a SET(SID,CLIENTVERSION,SERIALNUM,ENTERPRISECOMPANYNA,DESCRIPT,ADDRL1,ADDRL2,ADDRL3,CITY,PROVNSTATE,COUNTRYNAME,PZCODE,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,ENTERPRISECOMPCODE,ENTERPRISECOMPSIZE,BARCSIZE,LEVEL,POSKIPP,LOOSEIT,JOBSKIP,CARTONFL,PICKLIST,PRODDESC,PRODCODE,NJOB,NMATERIA,NACTIVITY,NBUTT,NCUSTOME,NCONTACT,NVENDOR,NEMPLOYEE,NSCHEDULE,NREJECT,NRETURN,NCODE,MANUFID,BARTYPE,CADTYPE,CARTYPE,SHITYPE,REPTYPE,LOCTYPE,BARCOL,CARCOL,CADCOL,SHICOL,REPCOL,LOCCOL,ALTSERIA,COUNTRYCODE,NALTSERI,SCRCOLOR,HILCOLOR,TEXTCOLOR,BACCOLOR,DATETYPE,CURRSYMB,CURRCODE,PRINBAR,BARPRINT,CARPRINT,CADPRINT,LOCPRINT,SHIPRINT,REPPRINT,BARPRTY,REPPRTY,CARPRTY,CADPRTY,SHIPRTY,LOCPRTY,ALTSELEN,CUSTOLEN,CARCSIZE,CADCSIZE,SHICSIZE,REPCSIZE,LOCCSIZE,CS,NCONFTYP,NLOCATIO,NDIVCODE,NDEPCODE,NADDCODE,NFLOOR,NROOM,NRACK,MENUTYPE,PADTYPE,NRATE1TA,NRATE2TA,DEFCONFT,BEEPSOU,CONFIRM,LINEFEED,REFBARADJ,SHIBARADJ,CUSBARADJ,LOCBARADJ,CARBARADJ,NCORDER,NSPERSON,PROMPTI,CUSTOMERQUOTENB,CUSTOMERQUOTEN,CUSTOMERQUOTENA,CUSTOMERORDERNB,CUSTOMERORDERN,CUSTOMERORDERNA,VENDORORDERNB,VENDORORDERN,VENDORORDERNA,EMPLOYEEORDERNB,EMPLOYEEORDERN,EMPLOYEEORDERNA,JOBNB,JOBN,JOBNA,CUSTOMERINVOICENB,CUSTOMERINVOICEN,CUSTOMERINVOICENA,VENDORINVOICENB,VENDORINVOICEN,VENDORINVOICENA,CUSTOMERPICKNB,CUSTOMERPICKN,CUSTOMERPICKNA,VENDORQUOTENB,VENDORQUOTEN,VENDORQUOTENA,CUSTOMERPAYMNTNB,CUSTOMERPAYMNTN,CUSTOMERPAYMNTNA,VENDORPAYMNTNB,VENDORPAYMNTN,VENDORPAYMNTNA,VENDORCHQNB,VENDORCHQN,VENDORCHQNA,TASKNB,TASKN,TASKNA,ARSEQB,ARSEQ,ARSEQA,APSEQB,APSEQ,APSEQA,GLSEQB,GLSEQ,GLSEQA,PASEQB,PASEQ,PASEQA,ICSEQB,ICSEQ,ICSEQA,JOSEQB,JOSEQ,JOSEQA,SGLENTRY,TAX1CODE,TAX2CODE,TAX3CODE,NDECIMAL,EDIPASSW,INTPASSW,INRPASSW,IMLPASSW,RMLPASSW,LMLPASSW,HOSPASSW,LANPASSW,WANPASSW,ASHOSTID,HDSTYLE,MTSTYLE,STSTYLE,DTSTYLE,FTSTYLE,DEFAULTR,DEFAULTC,DBNAME,ROOTDIR,KEYORDER,CURRBUSDAT,LASTBUSDAT,CURRCALDAT,LASTCALDAT,PREPROCESS,MARGIN,FOOTER,LASTUSER,LISTBUILDC,LISTBUILDV,LISTBUILDE,LISTBROWNC,LISTBROWNV,LISTBROWNE,SMTPSERVER,SMTPUSER,SMTPPASS,POP3SERVER,POP3USER,POP3PASS,SMATCODE,FYREND,FPERIODS,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,licensetype,licensestart,licenseend)=(b.sid,b.CLIENTVERSION,b.SERIALNUM,b.ENTERPRISECOMPANYNA,b.DESCRIPT,b.ADDRL1,b.ADDRL2,b.ADDRL3,b.CITY,b.PROVNSTATE,b.COUNTRYNAME,b.PZCODE,b.PHONEO,b.PHONEH,b.PHONEC,b.PHONEX,b.LANADDR,b.WANADDR,b.LMAILADDR,b.IMAILADDR,b.RMAILADDR,b.INTADDR,b.INRADDR,b.ENTERPRISECOMPCODE,b.ENTERPRISECOMPSIZE,b.BARCSIZE,b.LEVEL,b.POSKIPP,b.LOOSEIT,b.JOBSKIP,b.CARTONFL,b.PICKLIST,b.PRODDESC,b.PRODCODE,b.NJOB,b.NMATERIA,b.NACTIVITY,b.NBUTT,b.NCUSTOME,b.NCONTACT,b.NVENDOR,b.NEMPLOYEE,b.NSCHEDULE,b.NREJECT,b.NRETURN,b.NCODE,b.MANUFID,b.BARTYPE,b.CADTYPE,b.CARTYPE,b.SHITYPE,b.REPTYPE,b.LOCTYPE,b.BARCOL,b.CARCOL,b.CADCOL,b.SHICOL,b.REPCOL,b.LOCCOL,b.ALTSERIA,b.COUNTRYCODE,b.NALTSERI,b.SCRCOLOR,b.HILCOLOR,";
sqlScript=line1+"a.TEXTCOLOR,b.BACCOLOR,b.DATETYPE,b.CURRSYMB,b.CURRCODE,b.PRINBAR,b.BARPRINT,b.CARPRINT,b.CADPRINT,b.LOCPRINT,b.SHIPRINT,b.REPPRINT,b.BARPRTY,b.REPPRTY,b.CARPRTY,b.CADPRTY,b.SHIPRTY,b.LOCPRTY,b.ALTSELEN,b.CUSTOLEN,b.CARCSIZE,b.CADCSIZE,b.SHICSIZE,b.REPCSIZE,b.LOCCSIZE,b.CS,b.NCONFTYP,b.NLOCATIO,b.NDIVCODE,b.NDEPCODE,b.NADDCODE,b.NFLOOR,b.NROOM,b.NRACK,b.MENUTYPE,b.PADTYPE,b.NRATE1TA,b.NRATE2TA,b.DEFCONFT,b.BEEPSOU,b.CONFIRM,b.LINEFEED,b.REFBARADJ,b.SHIBARADJ,b.CUSBARADJ,b.LOCBARADJ,b.CARBARADJ,b.NCORDER,b.NSPERSON,b.PROMPTI,b.CUSTOMERQUOTENB,b.CUSTOMERQUOTEN,b.CUSTOMERQUOTENA,b.CUSTOMERORDERNB,b.CUSTOMERORDERN,b.CUSTOMERORDERNA,b.VENDORORDERNB,b.VENDORORDERN,b.VENDORORDERNA,b.EMPLOYEEORDERNB,b.EMPLOYEEORDERN,b.EMPLOYEEORDERNA,b.JOBNB,b.JOBN,b.JOBNA,b.CUSTOMERINVOICENB,b.CUSTOMERINVOICEN,b.CUSTOMERINVOICENA,b.VENDORINVOICENB,b.VENDORINVOICEN,b.VENDORINVOICENA,b.CUSTOMERPICKNB,b.CUSTOMERPICKN,b.CUSTOMERPICKNA,b.VENDORQUOTENB,b.VENDORQUOTEN,b.VENDORQUOTENA,b.CUSTOMERPAYMNTNB,b.CUSTOMERPAYMNTN,b.CUSTOMERPAYMNTNA,b.VENDORPAYMNTNB,b.VENDORPAYMNTN,b.VENDORPAYMNTNA,b.VENDORCHQNB,b.VENDORCHQN,b.VENDORCHQNA,b.TASKNB,b.TASKN,b.TASKNA,b.ARSEQB,b.ARSEQ,b.ARSEQA,b.APSEQB,b.APSEQ,b.APSEQA,b.GLSEQB,b.GLSEQ,b.GLSEQA,b.PASEQB,b.PASEQ,b.PASEQA,b.ICSEQB,b.ICSEQ,b.ICSEQA,b.JOSEQB,b.JOSEQ,b.JOSEQA,b.SGLENTRY,b.TAX1CODE,b.TAX2CODE,b.TAX3CODE,b.NDECIMAL,b.EDIPASSW,b.INTPASSW,b.INRPASSW,b.IMLPASSW,b.RMLPASSW,b.LMLPASSW,b.HOSPASSW,b.LANPASSW,b.WANPASSW,b.ASHOSTID,b.HDSTYLE,b.MTSTYLE,b.STSTYLE,b.DTSTYLE,b.FTSTYLE,b.DEFAULTR,b.DEFAULTC,b.DBNAME,b.ROOTDIR,b.KEYORDER,b.CURRBUSDAT,b.LASTBUSDAT,b.CURRCALDAT,b.LASTCALDAT,b.PREPROCESS,b.MARGIN,b.FOOTER,b.LASTUSER,b.LISTBUILDC,b.LISTBUILDV,b.LISTBUILDE,b.LISTBROWNC,b.LISTBROWNV,b.LISTBROWNE,b.SMTPSERVER,b.SMTPUSER,b.SMTPPASS,b.POP3SERVER,b.POP3USER,b.POP3PASS,b.SMATCODE,b.FYREND,b.FPERIODS,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2,b.licensetype,b.licensestart,b.licenseend)FROM \""+schemaName+"\".\"CLIENT_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"DEPARTMENT a SET(SID,DEPCODE,DESCRIPT,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.sid,b.DEPCODE,b.DESCRIPT,b.GLPREFIX,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"DEPARTMENT_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"COMPANY a SET(SID,COMPANYCODE,DESCRIPT,LEGALNAME,MAILTOCODE,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.sid,b.COMPANYCODE,b.DESCRIPT,b.LEGALNAME,b.MAILTOCODE,b.GLPREFIX,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"COMPANY_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"CONTROL a SET(SID,CONTROLCODE,DESCRIPT,TYPEOFCONTROL,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.sid,b.CONTROLCODE,b.DESCRIPT,b.TYPEOFCONTROL,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"CONTROL_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();



sqlScript="UPDATE \""+schemaName+"\".\"DIVISION a SET(SID,DIVCODE,DESCRIPT,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.sid,b.DIVCODE,b.DESCRIPT,b.GLPREFIX,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"DIVISION_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"LOCATION a SET(SID,LOCATION,DESCRIPT,COMPANYCODE,ADDRESSCODE,FLOOR,ROOM,RACK,PRINTMSTAT,PRINMTFLDT,EXCLUDE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.sid,b.LOCATION,b.DESCRIPT,b.COMPANYCODE,b.ADDRESSCODE,b.FLOOR,b.ROOM,b.RACK,b.PRINTMSTAT,b.PRINMTFLDT,b.EXCLUDE,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"LOCATION_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"RESIDENCY a SET(SID,RESIDENCY,DESCRIPT,MUNICIPALITY,PROVINCE,COUNTRYNAME,EXCLUDE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.sid,b.RESIDENCY,b.DESCRIPT,b.MUNICIPALITY,b.PROVINCE,b.COUNTRYNAME,b.EXCLUDE,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"RESIDENCY_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ACCOUNT a SET(SID,ACCOUNT,DESCRIPT,CATEGORY,TYPE,BUDGET,ACTUAL,ACTUALN,PREVBUDG,PREVACT,SEQUENCE,CHILD,PARENT,ROLLUPQ,COMPANYCODE,DEPCODE,DIVCODE,STATUSFL,STATUSFLDT,CURRENCY,NOTES,OWNER,OWNER2,P0,P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P8T,P9T,P10T,P11T)=(b.SID,b.ACCOUNT,b.DESCRIPT,b.CATEGORY,b.TYPE,b.BUDGET,b.ACTUAL,b.ACTUALN,b.PREVBUDG,b.PREVACT,b.SEQUENCE,b.CHILD,b.PARENT,b.ROLLUPQ,b.COMPANYCODE,b.DEPCODE,b.DIVCODE,b.STATUSFL,b.STATUSFLDT,b.CURRENCY,b.NOTES,b.OWNER,b.OWNER2,b.P0,b.P1,b.P2,b.P3,b.P4,b.P5,b.P6,b.P7,b.P8,b.P9,b.P10,b.P11,b.P12,b.P13,b.P14,b.P8T,b.P9T,b.P10T,b.P11T)FROM \""+schemaName+"\".\"ACCOUNT_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"CUSTOMER a SET(SID,CUSTOMER,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,CUSTOMERASCOMPANYNAME,CUSTTOTL,CUSTTQTY,COMPANYCODE,LOCATION,MAILTOCODE,SHIPTOCODE,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,DOB,PLACEOFBIRTH,SEX,AGE,CUSRTOTL,CUSRTQTY,CUSMTOTL,CUSDTOTL,LASTORDER,LASTINVOIC,LASTPAYMNQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,TOTLPAID,CONTACTED,BYWHO,NXTCONTACT,VIA,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.CUSTOMER,b.DESCRIPT,b.TITLE,b.JOBTITLE,b.LASTNAME,b.FIRSTNAME,b.MIDDLENAM,b.CUSTOMERASCOMPANYNAME,b.CUSTTOTL,b.CUSTTQTY,b.COMPANYCODE,b.LOCATION,b.MAILTOCODE,b.SHIPTOCODE,b.TAX1,b.TAX2,b.TAX3,b.CUSTTAX1,b.CUSTTAX2,b.CUSTTAX3,b.PHONEO,b.PHONEH,b.PHONEC,b.PHONEX,b.LANADDR,b.WANADDR,b.LMAILADDR,b.IMAILADDR,b.RMAILADDR,b.INTADDR,b.INRADDR,b.DOB,b.PLACEOFBIRTH,b.SEX,b.AGE,b.CUSRTOTL,b.CUSRTQTY,b.CUSMTOTL,b.CUSDTOTL,b.LASTORDER,b.LASTINVOIC,b.LASTPAYMNQ,b.PRINTMSTAT,b.PRINMTFLDT,b.SHIPLABEL,b.TYPE,b.DEFAULTGLAC,b.INTEGRSET,b.STATUSFL,b.STATUSFLDT,b.TOTLPAID,b.CONTACTED,b.BYWHO,b.NXTCONTACT,b.VIA,b.KEYWORDS,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM \""+schemaName+"\".\"CUSTOMER_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"VENDOR a SET(SID,VENDOR,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,VENDORASCOMPANYNAME,VENDTOTL,VENDTQTY,COMPANYCODE,LOCATION,MAILTOCODE,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,VENRTOTL,VENRTQTY,VENMTOTL,VENDDTOTL,LASTQUOTE,LASTORDER,LASTINVOIC,LASTPAYMQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,SHIPTOCODE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,TOTLPAID,CONTACTED,BYWHO,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.VENDOR,b.DESCRIPT,b.TITLE,b.JOBTITLE,b.LASTNAME,b.FIRSTNAME,b.MIDDLENAM,b.VENDORASCOMPANYNAME,b.VENDTOTL,b.VENDTQTY,b.COMPANYCODE,b.LOCATION,b.MAILTOCODE,b.PHONEO,b.PHONEH,b.PHONEC,b.PHONEX,b.LANADDR,b.WANADDR,b.LMAILADDR,b.IMAILADDR,b.RMAILADDR,b.INTADDR,b.INRADDR,b.VENRTOTL,b.VENRTQTY,b.VENMTOTL,b.VENDDTOTL,b.LASTQUOTE,b.LASTORDER,b.LASTINVOIC,b.LASTPAYMQ,b.PRINTMSTAT,b.PRINMTFLDT,b.SHIPLABEL,b.TYPE,b.SHIPTOCODE,b.DEFAULTGLAC,b.INTEGRSET,b.STATUSFL,b.STATUSFLDT,b.TOTLPAID,b.CONTACTED,b.BYWHO,b.KEYWORDS,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM \""+schemaName+"\".\"VENDOR_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"EMPLOYEE a SET(SID,EMPLOYEE,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,COMPANYCODE,EMPLTOTL,EMPLTQTY,DIVCODE,DEPCODE,LOCATION,RESIDENCY,MAILTOCODE,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,EMPRTOTL,EMPRTQTY,EMPMTOTL,EMPDTOTL,LASTQUOTE,LASTORDER,LASTINVOIC,LASTPAYMQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,SHIPTOCODE,TYPE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,CONTACTED,BYWHO,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.EMPLOYEE,b.DESCRIPT,b.TITLE,b.JOBTITLE,b.LASTNAME,b.FIRSTNAME,b.MIDDLENAM,b.COMPANYCODE,b.EMPLTOTL,b.EMPLTQTY,b.DIVCODE,b.DEPCODE,b.LOCATION,b.RESIDENCY,b.MAILTOCODE,b.TAX1,b.TAX2,b.TAX3,b.CUSTTAX1,b.CUSTTAX2,b.CUSTTAX3,b.PHONEO,b.PHONEH,b.PHONEC,b.PHONEX,b.LANADDR,b.WANADDR,b.LMAILADDR,b.IMAILADDR,b.RMAILADDR,b.INTADDR,b.INRADDR,b.EMPRTOTL,b.EMPRTQTY,b.EMPMTOTL,b.EMPDTOTL,b.LASTQUOTE,b.LASTORDER,b.LASTINVOIC,b.LASTPAYMQ,b.PRINTMSTAT,b.PRINMTFLDT,b.SHIPLABEL,b.SHIPTOCODE,b.TYPE,b.DEFAULTGLAC,b.INTEGRSET,b.STATUSFL,b.STATUSFLDT,b.CONTACTED,b.BYWHO,b.KEYWORDS,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM \""+schemaName+"\".\"EMPLOYEE_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"VCONTACT a SET(SID,CONTACT,VENDOR,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,LOCATION,MAILTOCODE,SHIPTOCODE,PRINTSTA,SHIPLABEL,TYPE,STATUSFL,STATUSFLDT,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.CONTACT,b.VENDOR,b.TITLE,b.JOBTITLE,b.LASTNAME,b.FIRSTNAME,b.MIDDLENAM,b.PHONEO,b.PHONEH,b.PHONEC,b.PHONEX,b.LANADDR,b.WANADDR,b.LMAILADDR,b.IMAILADDR,b.RMAILADDR,b.INTADDR,b.INRADDR,b.LOCATION,b.MAILTOCODE,b.SHIPTOCODE,b.PRINTSTA,b.SHIPLABEL,b.TYPE,b.STATUSFL,b.STATUSFLDT,b.KEYWORDS,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM \""+schemaName+"\".\"VCONTACT_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"CCONTACT a SET(SID,CONTACT,CUSTOMER,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,LOCATION,MAILTOCODE,SHIPTOCODE,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,STATUSFL,STATUSFLDT,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.CONTACT,b.CUSTOMER,b.TITLE,b.JOBTITLE,b.LASTNAME,b.FIRSTNAME,b.MIDDLENAM,b.TAX1,b.TAX2,b.TAX3,b.CUSTTAX1,b.CUSTTAX2,b.CUSTTAX3,b.PHONEO,b.PHONEH,b.PHONEC,b.PHONEX,b.LANADDR,b.WANADDR,b.LMAILADDR,b.IMAILADDR,b.RMAILADDR,b.INTADDR,b.INRADDR,b.LOCATION,b.MAILTOCODE,b.SHIPTOCODE,b.PRINTMSTAT,b.PRINMTFLDT,b.SHIPLABEL,b.TYPE,b.STATUSFL,b.STATUSFLDT,b.KEYWORDS,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM \""+schemaName+"\".\"CCONTACT_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"PERIODDATES a SET(SID,PERIOD,DESCRIPT,STARTDATE,ENDDATE,STARTOFWEEK,STARTOFBWEEK,ENDOFBWEEK,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.PERIOD,b.DESCRIPT,b.STARTDATE,b.ENDDATE,b.STARTOFWEEK,b.STARTOFBWEEK,b.ENDOFBWEEK,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"PERIODDATES_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"ACPERIOD a SET(SID,ROWID,CURRPERIOD,DESCRIPT,CURRBUSDATE,CURRCALDATE,CURRLOCALDATE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.ROWID,b.CURRPERIOD,b.DESCRIPT,b.CURRBUSDATE,b.CURRCALDATE,b.CURRLOCALDATE,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"ACPERIOD_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"WAGEEARNER a SET(SID,WAGEEARNERID,EMPLOYEE,SIN,BIRTHDT,FEDCLAIM,PROVCLAIM,PAYYRFREQ,PAYPERIOD,WCB,WCBYTD,EMPLINSUR,INSYTD,VACRETAIN,VACATONYT,WAGEUNIT,WAGERATE,OTIMEUNIT,OTIMERATE,WAGEUNITS,OTIMUNITS,WAGEOUT,OVTIMEOUT,SALARYOUT,COMMISSION,BENEFITS,VACATION,VACPAYOUT,ADVANCE,PENSION,AFTERTAX,UNIONDUES,MEDICAL,FINCOMETX,PINCOMETX,THISPAYA,LASTPAYA,PAYYTD,FPENSIYTD,PPENSIYTD,ITAXYTD,PTAXYTD,GRPAYYTD,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.WAGEEARNERID,b.EMPLOYEE,b.SIN,b.BIRTHDT,b.FEDCLAIM,b.PROVCLAIM,b.PAYYRFREQ,b.PAYPERIOD,b.WCB,b.WCBYTD,b.EMPLINSUR,b.INSYTD,b.VACRETAIN,b.VACATONYT,b.WAGEUNIT,b.WAGERATE,b.OTIMEUNIT,b.OTIMERATE,b.WAGEUNITS,b.OTIMUNITS,b.WAGEOUT,b.OVTIMEOUT,b.SALARYOUT,b.COMMISSION,b.BENEFITS,b.VACATION,b.VACPAYOUT,b.ADVANCE,b.PENSION,b.AFTERTAX,b.UNIONDUES,b.MEDICAL,b.FINCOMETX,b.PINCOMETX,b.THISPAYA,b.LASTPAYA,b.PAYYTD,b.FPENSIYTD,b.PPENSIYTD,b.ITAXYTD,b.PTAXYTD,b.GRPAYYTD,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM \""+schemaName+"\".\"WAGEEARNER_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ARTHATBL a SET(SID,USAGE,WCBPERCNT,INSFACTOR,VACATONRATE,PENSIONMAX,WCBMAX,INSMAX,ITAXLV0RATE,ITAXLV1RATE,ITAXLV2RATE,ITAXLV3RATE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.USAGE,b.WCBPERCNT,b.INSFACTOR,b.VACATONRATE,b.PENSIONMAX,b.WCBMAX,b.INSMAX,b.ITAXLV0RATE,b.ITAXLV1RATE,b.ITAXLV2RATE,b.ITAXLV3RATE,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"ARTHATBL_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ROLLUPGROUP a SET(SID,GROUPID,DESCRIPT,TYPE,CURRPW,EXPIRY,CURRENCY,PERIOD0B,PERIOD0,PERIODTOTALSB,PERIODTOTALS,PERIOD1BUDGET,PERIOD1ACTUAL,PERIOD2B,PERIOD2,PERIOD3B,PERIOD3,PERIOD4B,PERIOD4,PERIOD5B,PERIOD5,PERIOD6B,PERIOD6,PERIOD7B,PERIOD7,PERIOD8B,PERIOD8,PERIOD9B,PERIOD9,PERIOD10B,PERIOD10,PERIOD11B,PERIOD11,PERIOD12B,PERIOD12,PERIODNB,PERIODN,NOTES,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.GROUPID,b.DESCRIPT,b.TYPE,b.CURRPW,b.EXPIRY,b.CURRENCY,b.PERIOD0B,b.PERIOD0,b.PERIODTOTALSB,b.PERIODTOTALS,b.PERIOD1BUDGET,b.PERIOD1ACTUAL,b.PERIOD2B,b.PERIOD2,b.PERIOD3B,b.PERIOD3,b.PERIOD4B,b.PERIOD4,b.PERIOD5B,b.PERIOD5,b.PERIOD6B,b.PERIOD6,b.PERIOD7B,b.PERIOD7,b.PERIOD8B,b.PERIOD8,b.PERIOD9B,b.PERIOD9,b.PERIOD10B,b.PERIOD10,b.PERIOD11B,b.PERIOD11,b.PERIOD12B,b.PERIOD12,b.PERIODNB,b.PERIODN,b.NOTES,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"ROLLUPGROUP_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"membersgroup\" a SET(SID,GROUPID,DESCRIPT,QUANTITY,MODE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.GROUPID,b.DESCRIPT,b.QUANTITY,b.MODE,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"MEMBERSGROUP_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ARTHAHIST a SET(SID,WAGEEARNER,SIN,PERIOD,MONTH,CCYY,VACATION,WAGE,OVERTIME,SALARY,COMMISSION,BENEFIT,FINCOMETX,PINCOMETX,WCBOUT,EMPLINSUR,VACPAYOUT,ADVANCE,FPENSOBTX,FPENSOATX,UNIONDUES,MEDICAL,PAYAMT,NOTES,NOTES2,CHQNUMBER,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.WAGEEARNER,b.SIN,b.PERIOD,b.MONTH,b.CCYY,b.VACATION,b.WAGE,b.OVERTIME,b.SALARY,b.COMMISSION,b.BENEFIT,b.FINCOMETX,b.PINCOMETX,b.WCBOUT,b.EMPLINSUR,b.VACPAYOUT,b.ADVANCE,b.FPENSOBTX,b.FPENSOATX,b.UNIONDUES,b.MEDICAL,b.PAYAMT,b.NOTES,b.NOTES2,b.CHQNUMBER,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"ARTHAHIST_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"HOLIDAY a SET(SID,SHOLIDAY,HOLIDAY,DESCRIPT,TYPE,STATUSFL,STATUSFLDT,EMPLOYEE,RESIDENCY,OWNER,OWNER2)=(b.SID,b.SHOLIDAY,b.HOLIDAY,b.DESCRIPT,b.TYPE,b.STATUSFL,b.STATUSFLDT,b.EMPLOYEE,b.RESIDENCY,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"HOLIDAY_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ITEM a SET(SID,MATCODE,QUANTITY,DESCRIPT,DATEADDED,DATEEXPIRY,DATETORENEW,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,LOCATION,BARUPC)=(b.SID,b.MATCODE,b.QUANTITY,b.DESCRIPT,b.DATEADDED,b.DATEEXPIRY,b.DATETORENEW,b.SOURCE1,b.SOURCE2,b.UPCCODE,b.COST,b.REPLCOST,b.SELPRICE,b.SPRICOLD,b.SPRICNEW,b.SPRICEFFDT,b.SHIPCODE,b.PRINTMSTAT,b.PRINMTFLDT,b.MISCCODE1,b.MISCCODE2,b.QTYLEVEL1,b.UNIT,b.CASEQTY,b.TYPE,b.TAX1,b.TAX2,b.TAX3,b.ALIASCODE,b.PARENTCODE,b.AVGPRICE,b.AVGCOST,b.STATUSFL,b.STATUSFLDT,b.SUBCODESN,b.SUBCODESN2,b.SUBCODESN3,b.CUORDQTY,b.VENORQTY,b.CUPICQTY,b.VENPIQTY,b.CUINVQTY,b.CUSHIQTY,b.VENSHQTY,b.EFFDATE,b.INTEGRSET,b.NOTES,b.DOCMNT,b.OWNER,b.OWNER2,b.LOCATION,b.BARUPC)FROM \""+schemaName+"\".\"ITEM_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ACTIVITY a SET(SID,ACTIVITYCODE,QUANTITY,DESCRIPT,DATE,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,BARUPC)=(b.SID,b.ACTIVITYCODE,b.QUANTITY,b.DESCRIPT,b.DATE,b.SOURCE1,b.SOURCE2,b.UPCCODE,b.COST,b.REPLCOST,b.SELPRICE,b.SPRICOLD,b.SPRICNEW,b.SPRICEFFDT,b.SHIPCODE,b.PRINTMSTAT,b.PRINMTFLDT,b.MISCCODE1,b.MISCCODE2,b.QTYLEVEL1,b.UNIT,b.CASEQTY,b.TYPE,b.TAX1,b.TAX2,b.TAX3,b.ALIASCODE,b.PARENTCODE,b.AVGPRICE,b.AVGCOST,b.STATUSFL,b.STATUSFLDT,b.SUBCODESN,b.SUBCODESN2,b.SUBCODESN3,b.CUORDQTY,b.VENORQTY,b.CUPICQTY,b.VENPIQTY,b.CUINVQTY,b.CUSHIQTY,b.VENSHQTY,b.EFFDATE,b.INTEGRSET,b.NOTES,b.DOCMNT,b.OWNER,b.OWNER2,b.BARUPC)FROM \""+schemaName+"\".\"ACTIVITY_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"SCHEDULE a SET(SID,TODO,DESCRIPT,EMPLOYEE,SSDATET,ACTIVITYCODE,LOCATION,SDATET,DURATIONH,DURATIONM,STIMEH,STIMEM,STIMEAMPM,EDATET,PRIORITY,PERCNTDONE,VENDOR,VONTACT,CUSTOMER,TYPE,MAILTOCODE,OTHEREMPLO,REPEATF,STATUSFL,STATUSFLDT,PRIVATEIND,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.TODO,b.DESCRIPT,b.EMPLOYEE,b.SSDATET,b.ACTIVITYCODE,b.LOCATION,b.SDATET,b.DURATIONH,b.DURATIONM,b.STIMEH,b.STIMEM,b.STIMEAMPM,b.EDATET,b.PRIORITY,b.PERCNTDONE,b.VENDOR,b.VONTACT,b.CUSTOMER,b.TYPE,b.MAILTOCODE,b.OTHEREMPLO,b.REPEATF,b.STATUSFL,b.STATUSFLDT,b.PRIVATEIND,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM \""+schemaName+"\".\"SCHEDULE_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"USER\" a SET(SID,ID,CLIENT,EMPLOYEE,VENDOR,CUSTOMER,OTHERID,ALEVEL,BLEVEL,CURRPW,EXPIRY,OLDPW,TEMPORARYPASSWORD,PASSWORDHASH,ACTIVATIONKEY,RESTRICT1,RESTRICT2,RESTRICT3,ALLOW1,ALLOW2,ALLOW3,MAXPROFLROW,CPROFLROW,STATUSFL,STATUSFLDT,UCURRCALDA,PREPROCESS,NOTES,DOCMNT,OWNER,OWNER2)=(b.SID,b.ID,b.CLIENT,b.EMPLOYEE,b.VENDOR,b.CUSTOMER,b.OTHERID,b.ALEVEL,b.BLEVEL,b.CURRPW,b.EXPIRY,b.OLDPW,b.TEMPORARYPASSWORD,b.PASSWORDHASH,b.ACTIVATIONKEY,b.RESTRICT1,b.RESTRICT2,b.RESTRICT3,b.ALLOW1,b.ALLOW2,b.ALLOW3,b.MAXPROFLROW,b.CPROFLROW,b.STATUSFL,b.STATUSFLDT,b.UCURRCALDA,b.PREPROCESS,b.NOTES,b.DOCMNT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"user_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"USERPROFL a SET(SID,LOGONID,ROW,OPTION,SELECTVALUE,SCRCOLOR,HILCOLOR,TEXTCOLOR,BACCOLOR,BEEPSOU,CONFIRM,PROMPTI,P1,P2,P3,P4,P5,P6,MTSTYLE,STSTYLE,DTSTYLE,FTSTYLE,DEFAULTR,DEFAULTC,DBNAME,ROOTDIR,KEYORDER,MARGIN,FOOTER,LISTBUILDC,LISTBUILDV,LISTBUILDE,LISTBROWNC,LISTBROWNV,LISTBROWNE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.LOGONID,b.ROW,b.OPTION,b.SELECTVALUE,b.SCRCOLOR,b.HILCOLOR,b.TEXTCOLOR,b.BACCOLOR,b.BEEPSOU,b.CONFIRM,b.PROMPTI,b.P1,b.P2,b.P3,b.P4,b.P5,b.P6,b.MTSTYLE,b.STSTYLE,b.DTSTYLE,b.FTSTYLE,b.DEFAULTR,b.DEFAULTC,b.DBNAME,b.ROOTDIR,b.KEYORDER,b.MARGIN,b.FOOTER,b.LISTBUILDC,b.LISTBUILDV,b.LISTBUILDE,b.LISTBROWNC,b.LISTBROWNV,b.LISTBROWNE,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"USERPROFL_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"VENARTHA a SET(SID,CHQNUMBER,RECONCILED,VENDORC,DATE,ADDRESCODE,CHQAMT,AMTVERBOS,NOTES,ADVISEL1,ADVISEL2,ADVISEL3,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.CHQNUMBER,b.RECONCILED,b.VENDORC,b.DATE,b.ADDRESCODE,b.CHQAMT,b.AMTVERBOS,b.NOTES,b.ADVISEL1,b.ADVISEL2,b.ADVISEL3,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"VENARTHA_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"ACINTEGR a SET(SID,MODULEID,USAGEDESCR,USAGECODE,SETSID,ACCOUNT,EXTRAINTFIELD,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.MODULEID,b.USAGEDESCR,b.USAGECODE,b.SETSID,b.ACCOUNT,b.EXTRAINTFIELD,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"ACINTEGR_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ITEMJOB a SET(SID,JOBNO,MATCODE,PRODDATET,QTYALLOC,PONO,QTYOSTND,QTYALSTK,QTYISSUD,JOBTOTL,STATUSFL,CUSTOMEJ,VENDOR,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,PRINTMSTATJ,PRINMTFLDTJ,TYPE,MATCODEOUT,QTYOUT,NOTES,OWNER,OWNER2)=(b.SID,b.JOBNO,b.MATCODE,b.PRODDATET,b.QTYALLOC,b.PONO,b.QTYOSTND,b.QTYALSTK,b.QTYISSUD,b.JOBTOTL,b.STATUSFL,b.CUSTOMEJ,b.VENDOR,b.STATUSFLDT,b.PRINTMSTAT,b.PRINMTFLDT,b.PRINTMSTATJ,b.PRINMTFLDTJ,b.TYPE,b.MATCODEOUT,b.QTYOUT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"ITEMJOB_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"ACTIVITYJOB a SET(SID,JOBNO,ACTIVITYCODE,PRODDATET,QTYALLOC,PONO,QTYOSTND,QTYALSTK,QTYISSUD,JOBTOTL,STATUSFL,CUSTOMEJ,VENDOR,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,PRINTMSTATJ,PRINMTFLDTJ,TYPE,MATCODEOUT,QTYOUT,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.JOBNO,b.ACTIVITYCODE,b.PRODDATET,b.QTYALLOC,b.PONO,b.QTYOSTND,b.QTYALSTK,b.QTYISSUD,b.JOBTOTL,b.STATUSFL,b.CUSTOMEJ,b.VENDOR,b.STATUSFLDT,b.PRINTMSTAT,b.PRINMTFLDT,b.PRINTMSTATJ,b.PRINMTFLDTJ,b.TYPE,b.MATCODEOUT,b.QTYOUT,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM \""+schemaName+"\".\"ACTIVITYJOB_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"VENQUOTE a SET(SID,PURCHSNO,DELVDATET,VENDOR,MATCODE,REPLICATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,CINVOICE,JOBNO,VPONO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.PURCHSNO,b.DELVDATET,b.VENDOR,b.MATCODE,b.REPLICATE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.STATUSFL,b.CINVOICE,b.JOBNO,b.VPONO,b.RFPORD,b.STATUSFLDT,b.RCPONO,b.ODATET,b.TERMS,b.PRIORITY,b.PRINTMSTAT,b.PRINMTFLDT,b.TYPE,b.VINVOICE,b.ATTACH,b.SHIPCODE,b.AGENT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.STARTDATET,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM \""+schemaName+"\".\"VENQUOTE_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"VENDORDERS a SET(SID,PURCHSNO,DELVDATET,VENDOR,MATCODE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,JOBNO,VENDQNO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.PURCHSNO,b.DELVDATET,b.VENDOR,b.MATCODE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.STATUSFL,b.JOBNO,b.VENDQNO,b.RFPORD,b.STATUSFLDT,b.RCPONO,b.ODATET,b.TERMS,b.PRIORITY,b.PRINTMSTAT,b.PRINMTFLDT,b.TYPE,b.VINVOICE,b.ATTACH,b.SHIPCODE,b.AGENT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.STARTDATET,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM \""+schemaName+"\".\"VENDORDERS_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"VSHIPMEN a SET(SID,SHIPCODE,MATCODE,SHIPPER,PONO,CPONO,INVOICE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,CARRIER,TYPE,SHIPDATET,SHIPDATETA,TARENO,PACKNO,VENDOR,CUSTOMER,BILLTOCODE,BILLTOSAMEASSHIPTO,SHIPTOCODE,NOTES,STATUSFL,STATUSFLDT,SERIALNO,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2)=(b.SID,b.SHIPCODE,b.MATCODE,b.SHIPPER,b.PONO,b.CPONO,b.INVOICE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.CARRIER,b.TYPE,b.SHIPDATET,b.SHIPDATETA,b.TARENO,b.PACKNO,b.VENDOR,b.CUSTOMER,b.BILLTOCODE,b.BILLTOSAMEASSHIPTO,b.SHIPTOCODE,b.NOTES,b.STATUSFL,b.STATUSFLDT,b.SERIALNO,b.PRINTMSTAT,b.PRINMTFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"VSHIPMEN_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"cuquote\" a SET(SID,PURCHSNO,DELVDATET,VENDOR,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,CUSTOMER,MATCODE,REPLICATE,CINVOICE,ORDPRICE,JOBNO,VPONO,QUOORDT,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,TYPE,TERMS,PRIORITY,ODATET,SHIPCODE,ACTIVITYCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,ATTACH,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.PURCHSNO,b.DELVDATET,b.VENDOR,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.STATUSFL,b.CUSTOMER,b.MATCODE,b.REPLICATE,b.CINVOICE,b.ORDPRICE,b.JOBNO,b.VPONO,b.QUOORDT,b.STATUSFLDT,b.PRINTMSTAT,b.PRINMTFLDT,b.TYPE,b.TERMS,b.PRIORITY,b.ODATET,b.SHIPCODE,b.ACTIVITYCODE,b.AGENT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.ATTACH,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM \""+schemaName+"\".\"CUQUOTE_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"CUORDERS a SET(SID,PURCHSNO,DELVDATET,CUSTOMER,MATCODE,CUQUOTE,CINVOICE,JOBNO,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,VPONO,RFPORD,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,DOCMNT,SHIPCODEFROMPAY,SHIPCODE,BARPO)=(b.SID,b.PURCHSNO,b.DELVDATET,b.CUSTOMER,b.MATCODE,b.CUQUOTE,b.CINVOICE,b.JOBNO,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.VPONO,b.RFPORD,b.RCPONO,b.ODATET,b.TERMS,b.PRIORITY,b.PRINTMSTAT,b.PRINMTFLDT,b.TYPE,b.VINVOICE,b.ATTACH,b.AGENT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.STARTDATET,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT,b.SHIPCODEFROMPAY,b.SHIPCODE,b.BARPO)FROM \""+schemaName+"\".\"CUORDERS_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"CUINVOICE a SET(SID,INVOICE,CUSTOMER,MATCODE,INVODATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,PONO,REF1TYP,REF1CODE,SHIPDATET,SHIPTYPE,SHIPCODE,TERMS,STATUSFL,STATUSFLDT,TERMSDAT,DISCOUNP,DISCOUDT,DISCOUDS,NETDDAT,NETDDYS,FOB,TYPE,INTEGRSET,ATTACH,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,AGENT,NOTES,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,DOCMNT,BARINVOICE)=(b.SID,b.INVOICE,b.CUSTOMER,b.MATCODE,b.INVODATE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.PONO,b.REF1TYP,b.REF1CODE,b.SHIPDATET,b.SHIPTYPE,b.SHIPCODE,b.TERMS,b.STATUSFL,b.STATUSFLDT,b.TERMSDAT,b.DISCOUNP,b.DISCOUDT,b.DISCOUDS,b.NETDDAT,b.NETDDYS,b.FOB,b.TYPE,b.INTEGRSET,b.ATTACH,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.AGENT,b.NOTES,b.PRINTMSTAT,b.PRINMTFLDT,b.OWNER,b.OWNER2,b.DOCMNT,b.BARINVOICE)FROM \""+schemaName+"\".\"CUINVOICE_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"SHIPMENT a SET(SID,SHIPCODE,MATCODE,SHIPPER,PONO,CPONO,INVOICE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,CARRIER,TYPE,SHIPDATET,SHIPDATETA,TARENO,PACKNO,CUSTOMER,BILLTOCODE,BILLTOSAMEASSHIPTO,SHIPTOCODE,NOTES,STATUSFL,STATUSFLDT,SERIALNO,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,BARSHIPCOD)=(b.SID,b.SHIPCODE,b.MATCODE,b.SHIPPER,b.PONO,b.CPONO,b.INVOICE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.CARRIER,b.TYPE,b.SHIPDATET,b.SHIPDATETA,b.TARENO,b.PACKNO,b.CUSTOMER,b.BILLTOCODE,b.BILLTOSAMEASSHIPTO,b.SHIPTOCODE,b.NOTES,b.STATUSFL,b.STATUSFLDT,b.SERIALNO,b.PRINTMSTAT,b.PRINMTFLDT,b.OWNER,b.OWNER2,b.BARSHIPCOD)FROM \""+schemaName+"\".\"SHIPMENT_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"EMPLORDERS a SET(SID,PURCHSNO,DELVDATET,EMPLOYEE,MATCODE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,JOBNO,VPONO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.PURCHSNO,b.DELVDATET,b.EMPLOYEE,b.MATCODE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.STATUSFL,b.JOBNO,b.VPONO,b.RFPORD,b.STATUSFLDT,b.RCPONO,b.ODATET,b.TERMS,b.PRIORITY,b.PRINTMSTAT,b.PRINMTFLDT,b.TYPE,b.VINVOICE,b.ATTACH,b.SHIPCODE,b.AGENT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.STARTDATET,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM \""+schemaName+"\".\"EMPLORDERS_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"HLOGFILE a SET(SID,SERIALNO,MATCODE,QUANRECD,VENDOR,LOCATION,RECVRPT,INFLG,PHY,DATETIN,DATETOUT,JOBNO,PRINTMSTAT,PRINMTFLDT,PONO,SCANDATET,QUANISSD,BUTT,STATUSFL,QUANREJD,CUSTOMER,CPONO,CUSTOMEJ,ORGCOST,ORGPONO,ORGJOBNO,ALTSERNO,SELPRICE,PHYSQTY,SPERSON,CARTONID,CARTONPR,PACKCODE,TARECODE,SHIPCODE,TYPE,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.SERIALNO,b.MATCODE,b.QUANRECD,b.VENDOR,b.LOCATION,b.RECVRPT,b.INFLG,b.PHY,b.DATETIN,b.DATETOUT,b.JOBNO,b.PRINTMSTAT,b.PRINMTFLDT,b.PONO,b.SCANDATET,b.QUANISSD,b.BUTT,b.STATUSFL,b.QUANREJD,b.CUSTOMER,b.CPONO,b.CUSTOMEJ,b.ORGCOST,b.ORGPONO,b.ORGJOBNO,b.ALTSERNO,b.SELPRICE,b.PHYSQTY,b.SPERSON,b.CARTONID,b.CARTONPR,b.PACKCODE,b.TARECODE,b.SHIPCODE,b.TYPE,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"HLOGFILE_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"CPAYMENT a SET(SID,PAYMENT,CUSTOMER,CINVOICE,CHEQDATE,PAYMENTDUEDATE,POSTINGPERIOD,MATCODE,INTEGRSET,ACCOUNT,AMOUNTTOTAL,AMOUNTOSTNDT,AMOUNTIN,QTYTOTAL,QTYOSTNDT,DISCOUNT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,PAYTYPE,PAYBYID,PAYBYDATE,CURRENCY,CONVRATE,LOCAMOUNTT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.PAYMENT,b.CUSTOMER,b.CINVOICE,b.CHEQDATE,b.PAYMENTDUEDATE,b.POSTINGPERIOD,b.MATCODE,b.INTEGRSET,b.ACCOUNT,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.AMOUNTIN,b.QTYTOTAL,b.QTYOSTNDT,b.DISCOUNT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.PAYTYPE,b.PAYBYID,b.PAYBYDATE,b.CURRENCY,b.CONVRATE,b.LOCAMOUNTT,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"CPAYMENT_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"MACHINE a SET(SID,MACHINECODE,QUANTITY,DESCRIPT,DATEADDED,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,BARUPC)=(b.SID,b.MACHINECODE,b.QUANTITY,b.DESCRIPT,b.DATEADDED,b.SOURCE1,b.SOURCE2,b.UPCCODE,b.COST,b.REPLCOST,b.SELPRICE,b.SPRICOLD,b.SPRICNEW,b.SPRICEFFDT,b.SHIPCODE,b.PRINTMSTAT,b.PRINMTFLDT,b.MISCCODE1,b.MISCCODE2,b.QTYLEVEL1,b.UNIT,b.CASEQTY,b.TYPE,b.TAX1,b.TAX2,b.TAX3,b.ALIASCODE,b.PARENTCODE,b.AVGPRICE,b.AVGCOST,b.STATUSFL,b.STATUSFLDT,b.SUBCODESN,b.SUBCODESN2,b.SUBCODESN3,b.CUORDQTY,b.VENORQTY,b.CUPICQTY,b.VENPIQTY,b.CUINVQTY,b.CUSHIQTY,b.VENSHQTY,b.EFFDATE,b.INTEGRSET,b.NOTES,b.DOCMNT,b.OWNER,b.OWNER2,b.BARUPC)FROM \""+schemaName+"\".\"MACHINE_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"GROUPMEMBERS a SET(SID,GROUPID,MEMBERID,DESCRIPT,SOURCETYPE,MEMBEREM,MEMBERCU,MEMBERVE,MEMBERIT,MEMBERAC,MEMBERMA,TYPE,CURRPW,EXPIRY,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.GROUPID,b.MEMBERID,b.DESCRIPT,b.SOURCETYPE,b.MEMBEREM,b.MEMBERCU,b.MEMBERVE,b.MEMBERIT,b.MEMBERAC,b.MEMBERMA,b.TYPE,b.CURRPW,b.EXPIRY,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"GROUPMEMBERS_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ITEMBOM a SET(SID,BOMCODE,DESCRIPT,QUANTITY,MODE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.BOMCODE,b.DESCRIPT,b.QUANTITY,b.MODE,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"ITEMBOM_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"ITEMBOMDETAILS a SET(SID,BOMCODE,MATCODE,MODE,SUBQTY,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.BOMCODE,b.MATCODE,b.MODE,b.SUBQTY,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"ITEMBOMDETAILS_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"TASK a SET(SID,TASKID,DESCRIPT,ACTIVITYCODE,PROJECTTEAM,RESOURCE,MODE,ESTSTART,CALCSTART,ACTLSTART,ESTEND,CALCEND,ACTLEND,SUBQTY,BOMCODE,LOCATION,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.TASKID,b.DESCRIPT,b.ACTIVITYCODE,b.PROJECTTEAM,b.RESOURCE,b.MODE,b.ESTSTART,b.CALCSTART,b.ACTLSTART,b.ESTEND,b.CALCEND,b.ACTLEND,b.SUBQTY,b.BOMCODE,b.LOCATION,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"TASK_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"VINVOICE a SET(SID,INVOICE,VENDOR,MATCODE,INTEGRSET,INVODATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,PONO,REF1TYP,REF1CODE,SHIPDATET,SHIPTYPE,SHIPCODE,TERMS,STATUSFL,STATUSFLDT,TERMSDAT,DISCOUNP,DISCOUDT,DISCOUDS,NETDDAT,NETDDYS,FOB,TYPE,ATTACH,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,AGENT,NOTES,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,DOCMNT)=(b.SID,b.INVOICE,b.VENDOR,b.MATCODE,b.INTEGRSET,b.INVODATE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.PONO,b.REF1TYP,b.REF1CODE,b.SHIPDATET,b.SHIPTYPE,b.SHIPCODE,b.TERMS,b.STATUSFL,b.STATUSFLDT,b.TERMSDAT,b.DISCOUNP,b.DISCOUDT,b.DISCOUDS,b.NETDDAT,b.NETDDYS,b.FOB,b.TYPE,b.ATTACH,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.AGENT,b.NOTES,b.PRINTMSTAT,b.PRINMTFLDT,b.OWNER,b.OWNER2,b.DOCMNT)FROM \""+schemaName+"\".\"VINVOICE_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"VPAYMENT a SET(SID,PAYMENT,VENDOR,VINVOICE,CHEQDATE,PAYMENTDUEDATE,POSTINGPERIOD,MATCODE,INTEGRSET,ACCOUNT,AMOUNTTOTAL,AMOUNTOSTNDT,AMOUNTIN,QTYTOTAL,QTYOSTNDT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,DISCOUNT,PAYTYPE,PAYBYID,PAYBYDATE,CURRENCY,CONVRATE,LOCAMOUNT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.PAYMENT,b.VENDOR,b.VINVOICE,b.CHEQDATE,b.PAYMENTDUEDATE,b.POSTINGPERIOD,b.MATCODE,b.INTEGRSET,b.ACCOUNT,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.AMOUNTIN,b.QTYTOTAL,b.QTYOSTNDT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.DISCOUNT,b.PAYTYPE,b.PAYBYID,b.PAYBYDATE,b.CURRENCY,b.CONVRATE,b.LOCAMOUNT,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"VPAYMENT_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"WAGEEARNERAUX a SET(SID,WAGEEARNERID,LINE,SIN,WCBYTDL,WCBYTDN,INSYTDL,INSYTDN,VACATONYL,VACATONYN,PAYYTDL,FPENSIYTL,PPENSIYTL,ITAXYTDL,PTAXYTDL,PAYYTDN,FPENSIYTN,PPENSIYTN,ITAXYTDN,PATXYTDN,GPAYYTDL,GPAYYTDN,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.WAGEEARNERID,b.LINE,b.SIN,b.WCBYTDL,b.WCBYTDN,b.INSYTDL,b.INSYTDN,b.VACATONYL,b.VACATONYN,b.PAYYTDL,b.FPENSIYTL,b.PPENSIYTL,b.ITAXYTDL,b.PTAXYTDL,b.PAYYTDN,b.FPENSIYTN,b.PPENSIYTN,b.ITAXYTDN,b.PATXYTDN,b.GPAYYTDL,b.GPAYYTDN,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"WAGEEARNERAUX_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"rgenapp\" a SET(SID,APPNAME,DESCRIPT,APPTYPE,APPWACCOUNTING,APPWEMAIL,APPWJMSMQ,APPVENDOR,APPVERSION,APPPLATFORM,APPMODELPKG,APPACTIONPKG,APPSKIN,APPDEPLOYTYPE,CREATEFIDATA,REVENGDATA,INITIALIZEFIDATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.APPNAME,b.DESCRIPT,b.APPTYPE,b.APPWACCOUNTING,b.APPWEMAIL,b.APPWJMSMQ,b.APPVENDOR,b.APPVERSION,b.APPPLATFORM,b.APPMODELPKG,b.APPACTIONPKG,b.APPSKIN,b.APPDEPLOYTYPE,b.CREATEFIDATA,b.REVENGDATA,b.INITIALIZEFIDATA,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"Rgenapp_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"rgendb\" a SET(SID,DBNAME,DESCRIPT,DBTYPE,DBVENDOR,DBVERSION,DBPLATFORM,APPCODE,SQLDRIVER,SQLURL,SQLUSER,SQLPASSWORD,SQLCLASSPATH,SQLCREATEDBSCRIPT,SQLDROPDBSCRIPT,SQLCREATETBLSSCRIPT,SQLLOADTBLSSCRIPT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.DBNAME,b.DESCRIPT,b.DBTYPE,b.DBVENDOR,b.DBVERSION,b.DBPLATFORM,b.APPCODE,b.SQLDRIVER,b.SQLURL,b.SQLUSER,b.SQLPASSWORD,b.SQLCLASSPATH,b.SQLCREATEDBSCRIPT,b.SQLDROPDBSCRIPT,b.SQLCREATETBLSSCRIPT,b.SQLLOADTBLSSCRIPT,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"RGENDB_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"RGENTABLE a SET(SID,TABLENAME,DBCODE,INADDMENU,INLISTMENU,INTRANSACTIONMENU,INREPORTMENU,INGRAPHSMENU,INMAILINGMENU,INGENERATEMENU,INADMINMENU,INMAINTENANCEMENU,INLABELSMENU,INSKIPMENU,INCUSTOM1MENU,MENULEVEL,MENUROLE,MENULABELGROUP,SUBMENUSEQUENCE,USAGESCOPE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.TABLENAME,b.DBCODE,b.INADDMENU,b.INLISTMENU,b.INTRANSACTIONMENU,b.INREPORTMENU,b.INGRAPHSMENU,b.INMAILINGMENU,b.INGENERATEMENU,b.INADMINMENU,b.INMAINTENANCEMENU,b.INLABELSMENU,b.INSKIPMENU,b.INCUSTOM1MENU,b.MENULEVEL,b.MENUROLE,b.MENULABELGROUP,b.SUBMENUSEQUENCE,b.USAGESCOPE,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"RGENTABLE_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE \""+schemaName+"\".\"RGENFIELDS a SET(SID,DBCODE,TABLENAME,FIELDNAME,FIELDTYPE,FIELDLENGTH,INGROUP,SEQWITHINGROUP,FOCUSSEQ,FUTURE1,INITIALVALUE,KEYORADDITIONAL,KEYORADDITIONAL2,KEYORADDITIONAL3,SHOWINMENU,SHOWINREPORT,PROCESSOPTION1,PROCESSOPTION2,FDBCODE,FTABLENAME,FFIELDKEYNAME1,FFIELDKEYNAME2,FFIELDKEYNAME3,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.DBCODE,b.TABLENAME,b.FIELDNAME,b.FIELDTYPE,b.FIELDLENGTH,b.INGROUP,b.SEQWITHINGROUP,b.FOCUSSEQ,b.FUTURE1,b.INITIALVALUE,b.KEYORADDITIONAL,b.KEYORADDITIONAL2,b.KEYORADDITIONAL3,b.SHOWINMENU,b.SHOWINREPORT,b.PROCESSOPTION1,b.PROCESSOPTION2,b.FDBCODE,b.FTABLENAME,b.FFIELDKEYNAME1,b.FFIELDKEYNAME2,b.FFIELDKEYNAME3,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"RGENFIELDS_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"GENOPTIONS a SET(SID,ROW,GENOPTIONS01,GENPURPOSE01,GENVALUE01,GENOPTIONS02,GENPURPOSE02,GENVALUE02,GENOPTIONS03,GENPURPOSE03,GENVALUE03,GENOPTIONS04,GENPURPOSE04,GENVALUE04,GENOPTIONS05,GENPURPOSE05,GENVALUE05,GENOPTIONS06,GENPURPOSE06,GENVALUE06,GENOPTIONS07,GENPURPOSE07,GENVALUE07,GENOPTIONS08,GENPURPOSE08,GENVALUE08,GENOPTIONS09,GENPURPOSE09,GENVALUE09,GENOPTIONS10,GENPURPOSE10,GENVALUE10,GENOPTIONS11,GENPURPOSE11,GENVALUE11,GENOPTIONS12,GENPURPOSE12,GENVALUE12,GENOPTIONS13,GENPURPOSE13,GENVALUE13,GENOPTIONS14,GENPURPOSE14,GENVALUE14,GENOPTIONS15,GENPURPOSE15,GENVALUE15,GENOPTIONS16,GENPURPOSE16,GENVALUE16,GENOPTIONS17,GENPURPOSE17,GENVALUE17,GENOPTIONS18,GENPURPOSE18,GENVALUE18,GENOPTIONS19,GENPURPOSE19,GENVALUE19,GENOPTIONS20,GENPURPOSE20,GENVALUE20,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.ROW,b.GENOPTIONS01,b.GENPURPOSE01,b.GENVALUE01,b.GENOPTIONS02,b.GENPURPOSE02,b.GENVALUE02,b.GENOPTIONS03,b.GENPURPOSE03,b.GENVALUE03,b.GENOPTIONS04,b.GENPURPOSE04,b.GENVALUE04,b.GENOPTIONS05,b.GENPURPOSE05,b.GENVALUE05,b.GENOPTIONS06,b.GENPURPOSE06,b.GENVALUE06,b.GENOPTIONS07,b.GENPURPOSE07,b.GENVALUE07,b.GENOPTIONS08,b.GENPURPOSE08,b.GENVALUE08,b.GENOPTIONS09,b.GENPURPOSE09,b.GENVALUE09,b.GENOPTIONS10,b.GENPURPOSE10,b.GENVALUE10,b.GENOPTIONS11,b.GENPURPOSE11,b.GENVALUE11,b.GENOPTIONS12,b.GENPURPOSE12,b.GENVALUE12,b.GENOPTIONS13,b.GENPURPOSE13,b.GENVALUE13,b.GENOPTIONS14,b.GENPURPOSE14,b.GENVALUE14,b.GENOPTIONS15,b.GENPURPOSE15,b.GENVALUE15,b.GENOPTIONS16,b.GENPURPOSE16,b.GENVALUE16,b.GENOPTIONS17,b.GENPURPOSE17,b.GENVALUE17,b.GENOPTIONS18,b.GENPURPOSE18,b.GENVALUE18,b.GENOPTIONS19,b.GENPURPOSE19,b.GENVALUE19,b.GENOPTIONS20,b.GENPURPOSE20,b.GENVALUE20,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"GENOPTIONS_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"BLOBDATA a SET(SID,FROMTABLE,FROMKEY,QUALIFIER,SEQUENCE,TYPE,DATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.FROMTABLE,b.FROMKEY,b.QUALIFIER,b.SEQUENCE,b.TYPE,b.DATA,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"BLOBDATA_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"CLOBDATA a SET(SID,FROMTABLE,FROMKEY,QUALIFIER,SEQUENCE,TYPE,DATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.FROMTABLE,b.FROMKEY,b.QUALIFIER,b.SEQUENCE,b.TYPE,b.DATA,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"CLOBDATA_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"CONTROLUSAGEBYPERIODS a SET(SID,CTLUSAGETRACKERID,DESCRIPT,CONTROLCODE,CURRENCY,PERIOD0LABEL,PERIOD0B,PERIOD0,PERIODTOTALSLABEL,PERIODTOTALSB,PERIODTOTALS,PERIOD1LABEL,PERIOD1BUDGET,PERIOD1ACTUAL,PERIOD2LABEL,PERIOD2B,PERIOD2,PERIOD3LABEL,PERIOD3B,PERIOD3,PERIOD4LABEL,PERIOD4B,PERIOD4,PERIOD5LABEL,PERIOD5B,PERIOD5,PERIOD6LABEL,PERIOD6B,PERIOD6,PERIOD7LABEL,PERIOD7B,PERIOD7,PERIOD8LABEL,PERIOD8B,PERIOD8,PERIOD9LABEL,PERIOD9B,PERIOD9,PERIOD10LABEL,PERIOD10B,PERIOD10,PERIOD11LABEL,PERIOD11B,PERIOD11,PERIOD12LABEL,PERIOD12B,PERIOD12,PERIODNLABEL,PERIODNB,PERIODN,NOTES,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.CTLUSAGETRACKERID,b.DESCRIPT,b.CONTROLCODE,b.CURRENCY,b.PERIOD0LABEL,b.PERIOD0B,b.PERIOD0,b.PERIODTOTALSLABEL,b.PERIODTOTALSB,b.PERIODTOTALS,b.PERIOD1LABEL,b.PERIOD1BUDGET,b.PERIOD1ACTUAL,b.PERIOD2LABEL,b.PERIOD2B,b.PERIOD2,b.PERIOD3LABEL,b.PERIOD3B,b.PERIOD3,b.PERIOD4LABEL,b.PERIOD4B,b.PERIOD4,b.PERIOD5LABEL,b.PERIOD5B,b.PERIOD5,b.PERIOD6LABEL,b.PERIOD6B,b.PERIOD6,b.PERIOD7LABEL,b.PERIOD7B,b.PERIOD7,b.PERIOD8LABEL,b.PERIOD8B,b.PERIOD8,b.PERIOD9LABEL,b.PERIOD9B,b.PERIOD9,b.PERIOD10LABEL,b.PERIOD10B,b.PERIOD10,b.PERIOD11LABEL,b.PERIOD11B,b.PERIOD11,b.PERIOD12LABEL,b.PERIOD12B,b.PERIOD12,b.PERIODNLABEL,b.PERIODNB,b.PERIODN,b.NOTES,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"CONTROLUSAGEBYPERIODS_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"RESOURCE_BUNDLE a SET(SID,NAME,LANGUAGE,COUNTRY,VARIANT,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.NAME,b.LANGUAGE,b.COUNTRY,b.VARIANT,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"RESOURCE_BUNDLE_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"resource\" a SET(SID,_KEY,_VALUE,RESOURCEBUNDLE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b._KEY,b._VALUE,b.RESOURCEBUNDLE,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"RESOURCE_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"TRUEFALSE a SET(SID,TABLENAME,QUALIFIER,SHOW001,SHOW002,SHOW003,SHOW004,SHOW005,SHOW006,SHOW007,SHOW008,SHOW009,SHOW010,SHOW011,SHOW012,SHOW013,SHOW014,SHOW015,SHOW016,SHOW017,SHOW018,SHOW019,SHOW020,SHOW021,SHOW022,SHOW023,SHOW024,SHOW025,SHOW026,SHOW027,SHOW028,SHOW029,SHOW030,SHOW031,SHOW032,SHOW033,SHOW034,SHOW035,SHOW036,SHOW037,SHOW038,SHOW039,SHOW040,SHOW041,SHOW042,SHOW043,SHOW044,SHOW045,SHOW046,SHOW047,SHOW048,SHOW049,SHOW050,SHOW051,SHOW052,SHOW053,SHOW054,SHOW055,SHOW056,SHOW057,SHOW058,SHOW059,SHOW060,SHOW061,SHOW062,SHOW063,SHOW064,SHOW065,SHOW066,SHOW067,SHOW068,SHOW069,SHOW070,SHOW071,SHOW072,SHOW073,SHOW074,SHOW075,SHOW076,SHOW077,SHOW078,SHOW079,SHOW080,SHOW081,SHOW082,SHOW083,SHOW084,SHOW085,SHOW086,SHOW087,SHOW088,SHOW089,SHOW090,SHOW091,SHOW092,SHOW093,SHOW094,SHOW095,SHOW096,SHOW097,SHOW098,SHOW099,SHOW100,SHOW101,SHOW102,SHOW103,SHOW104,SHOW105,SHOW106,SHOW107,SHOW108,SHOW109,SHOW110,SHOW111,SHOW112,SHOW113,SHOW114,SHOW115,SHOW116,SHOW117,SHOW118,SHOW119,SHOW120,SHOW121,SHOW122,SHOW123,SHOW124,SHOW125,SHOW126,SHOW127,SHOW128,SHOW129,SHOW130,SHOW131,SHOW132,SHOW133,SHOW134,SHOW135,SHOW136,SHOW137,SHOW138,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.TABLENAME,b.QUALIFIER,b.SHOW001,b.SHOW002,b.SHOW003,b.SHOW004,b.SHOW005,b.SHOW006,b.SHOW007,b.SHOW008,b.SHOW009,b.SHOW010,b.SHOW011,b.SHOW012,b.SHOW013,b.SHOW014,b.SHOW015,b.SHOW016,b.SHOW017,b.SHOW018,b.SHOW019,b.SHOW020,b.SHOW021,b.SHOW022,b.SHOW023,b.SHOW024,b.SHOW025,b.SHOW026,b.SHOW027,b.SHOW028,b.SHOW029,b.SHOW030,b.SHOW031,b.SHOW032,b.SHOW033,b.SHOW034,b.SHOW035,b.SHOW036,b.SHOW037,b.SHOW038,b.SHOW039,b.SHOW040,b.SHOW041,b.SHOW042,b.SHOW043,b.SHOW044,b.SHOW045,b.SHOW046,b.SHOW047,b.SHOW048,b.SHOW049,b.SHOW050,b.SHOW051,b.SHOW052,b.SHOW053,b.SHOW054,b.SHOW055,b.SHOW056,b.SHOW057,b.SHOW058,b.SHOW059,b.SHOW060,b.SHOW061,b.SHOW062,b.SHOW063,b.SHOW064,b.SHOW065,b.SHOW066,b.SHOW067,b.SHOW068,b.SHOW069,b.SHOW070,b.SHOW071,b.SHOW072,b.SHOW073,b.SHOW074,b.SHOW075,b.SHOW076,b.SHOW077,b.SHOW078,b.SHOW079,b.SHOW080,b.SHOW081,b.SHOW082,b.SHOW083,b.SHOW084,b.SHOW085,b.SHOW086,b.SHOW087,b.SHOW088,b.SHOW089,b.SHOW090,b.SHOW091,b.SHOW092,b.SHOW093,b.SHOW094,b.SHOW095,b.SHOW096,b.SHOW097,b.SHOW098,b.SHOW099,b.SHOW100,b.SHOW101,b.SHOW102,b.SHOW103,b.SHOW104,b.SHOW105,b.SHOW106,b.SHOW107,b.SHOW108,b.SHOW109,b.SHOW110,b.SHOW111,b.SHOW112,b.SHOW113,b.SHOW114,b.SHOW115,b.SHOW116,b.SHOW117,b.SHOW118,b.SHOW119,b.SHOW120,b.SHOW121,b.SHOW122,b.SHOW123,b.SHOW124,b.SHOW125,b.SHOW126,b.SHOW127,b.SHOW128,b.SHOW129,b.SHOW130,b.SHOW131,b.SHOW132,b.SHOW133,b.SHOW134,b.SHOW135,b.SHOW136,b.SHOW137,b.SHOW138,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"TRUEFALSE_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
   FacesMessage.SEVERITY_INFO,bundle.getString("removed")+": "+deletedCount+" "+ bundle.getString("updated")+": "+updatedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));

// update client record field cadcsize to show last restoredate as a varchar
     sqlScript="update \""+schemaName+"\".\"client set cadcsize=:restoredts where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2Code", owner2Code).setParameter("restoredts", sdf.format(calendar.getTime()));
      q.executeUpdate();

} catch (Exception e) {
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}


	 return "restore done";
     }


	public String  restoreTenant2() {

     String sqlScript ="";
try{
    int deletedCount=0;
    int updatedCount=0;
    int insertedCount=0;
     // 1-remove rows from main if not in backup ie any new rows in main will be removed
     // 2-insert into main if old rows in backUp
     // 3-update main if \"row\" in backup has different change time  (relies on statusfldate change)
      // follow the deletion order list produced by schemaspygui C:\schemaspygui\postgres_postgre_\deletionOrder.txt ( future use the list as input to automate )
      // insertionOrder.txt for insert, for update order does not matter because we are not dropping or adding any relation but will follow
      // insertionOrder.txt

     // remove rows from main if not in backup ie any new rows in main will be removed
      // resource_bundle,resource,clob and blob have SYSTEM records which need extra logic
      // SYSTEM records should not be deleted from main or backup table but should be copied into backup if needed ?? revisit
      // may be some tables like user need to be handled as restore 2 since all new users and passwords will be dropped/changed
     sqlScript="delete from \""+schemaName+"\".\"user a where   a.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"user_b b where  a.sid = b.sid and b.owner2=:owner2)";
      Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"user select * from \""+schemaName+"\".\"user_b b where  b.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"user  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"USER\" a SET(SID,ID,CLIENT,EMPLOYEE,VENDOR,CUSTOMER,OTHERID,ALEVEL,BLEVEL,CURRPW,EXPIRY,OLDPW,TEMPORARYPASSWORD,PASSWORDHASH,ACTIVATIONKEY,RESTRICT1,RESTRICT2,RESTRICT3,ALLOW1,ALLOW2,ALLOW3,MAXPROFLROW,CPROFLROW,STATUSFL,STATUSFLDT,UCURRCALDA,PREPROCESS,NOTES,DOCMNT,OWNER,OWNER2)=(b.SID,b.ID,b.CLIENT,b.EMPLOYEE,b.VENDOR,b.CUSTOMER,b.OTHERID,b.ALEVEL,b.BLEVEL,b.CURRPW,b.EXPIRY,b.OLDPW,b.TEMPORARYPASSWORD,b.PASSWORDHASH,b.ACTIVATIONKEY,b.RESTRICT1,b.RESTRICT2,b.RESTRICT3,b.ALLOW1,b.ALLOW2,b.ALLOW3,b.MAXPROFLROW,b.CPROFLROW,b.STATUSFL,b.STATUSFLDT,b.UCURRCALDA,b.PREPROCESS,b.NOTES,b.DOCMNT,b.OWNER,b.OWNER2)FROM \""+schemaName+"\".\"user_b b where((b.sid=a.sid\") AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();





} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore2")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));


}

	 return "restore2 done";

     }

	public String  oneTimeCleanUp() {

     String sqlScript ="";
    int deletedCount=0;
    int updatedCount=0;
    int insertedCount=0;
try{

     // restricted to run from raaspi only but removes rows from all tables  if its owner2 is not in client as a record
     // can happen during creating a new site and not completing and involves account,acintegr,acperiod,divisondates,options,artha?,control?
     // not done also include if not in primary but exists in bup if remove data failed
     // odd links first
     // keep latest resource and bundles
     sqlScript="delete from \""+schemaName+"\".\"resource\" b where b.owner2 = 'SYSTEM' and  b.resourcebundle < 113  ";
     Query q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("SYSTEM")+" "+bundle.getString("resource")+" <2017 "+bundle.getString("count")+" "+deletedCount,""));
     deletedCount = 0;

     //message labels owner2 using SYSTEM resource_bundle, should use own bundle
     sqlScript="delete from \""+schemaName+"\".\"resource\" b where b.owner2 <>'SYSTEM' and  exists  (select 1 from \""+schemaName+"\".\"resource_bundle a where  a.owner2 = 'SYSTEM' and a.sid=b.resourcebundle ) ";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("resource")+" "+bundle.getString("using")+" "+bundle.getString("SYSTEM")+" "+bundle.getString("bundle")+" "+bundle.getString("count")+" "+((deletedCount)),""));
     deletedCount = 0;

     // below will fail if step 2 not done
     sqlScript="delete from \""+schemaName+"\".\"resource_bundle b where b.owner2 = 'SYSTEM' and  b.sid < 113  ";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("SYSTEM")+" "+bundle.getString("resource_bundle")+" <2017 "+bundle.getString("count")+" "+deletedCount,""));
     deletedCount = 0;
} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+owner2Code+" "+bundle.getString("backup")+" "+bundle.getString("ownership")+" "+bundle.getString("check")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
       //need a method to force delete any sid, specially from backup

}
 return "";

}



	public String  cleanUpUnlinked() {

     String sqlScript ="";
    int deletedCount=0;
    int updatedCount=0;
    int insertedCount=0;
try{

     // restricted to run from raaspi only but removes rows from all tables  if its owner2 is not in client as a record
     // can happen during creating a new site and not completing and involves account,acintegr,acperiod,divisondates,options,artha?,control?
     // not done also include if not in primary but exists in bup if remove data failed
     // odd links first
     // keep latest resource and bundles


     //cross owner2 check
     sqlScript="delete from \""+schemaName+"\".\"serialnumbers b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     Query q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("serialnumbers")+" "+bundle.getString("unsubscribed")+" "+bundle.getString("data")+" "+bundle.getString("removed")+": "+deletedCount+" ",""));
     deletedCount = 0;

     sqlScript="delete from \""+schemaName+"\".\"scandate b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rate1f b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"options b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"nextserialno b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"journal b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jjournal b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"hlogfile b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"genoptions b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"editlog b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"clobdata b where   b.owner2 <> 'SYSTEM' and not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  (a.owner2 <> 'SYSTEM' and a.owner2 = b.owner2) )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     //SYSTEM clob is handled by Raaspi admin,

     sqlScript="delete from \""+schemaName+"\".\"cjournal b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"blobdata b where   b.owner2 <> 'SYSTEM' and not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  (a.owner2 <> 'SYSTEM' and a.owner2 = b.owner2) )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     //SYSTEM blobdata handled by Raaspi admin

     sqlScript="delete from \""+schemaName+"\".\"arthatbl b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthahist b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acperiod b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jobassignment b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"schedule b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmendetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vcontact b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipmentdetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"ccontact b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendqdetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendpdetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendodetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendidetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resourcedetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplodetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuqdetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuodetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuidetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"usagebyperiods b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgenfields b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itembomdetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"holiday b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"gentriesdetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cupdetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjobdetails b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearneraux b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venartha b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"userprofl b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resource\" b where   b.owner2 <> 'SYSTEM' and not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  (a.owner2 <> 'SYSTEM' and a.owner2 = b.owner2) )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acintegr b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"user b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplorders b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vpayment b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"task b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cpayment b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"glentries b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjob b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearner b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgentable b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itemjob b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmen b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"groupmembers b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vinvoice b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipment b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendorders b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuinvoice b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuorders b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"projectt\" b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"outline b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venquote b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuquote\" b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"machine b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activity b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"item b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"employee b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"customer b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendor b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"location b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"account b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgendb b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"company b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rollupgroup b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgenapp b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resource_bundle b where   b.owner2 <> 'SYSTEM' and not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  (a.owner2 <> 'SYSTEM' and a.owner2 = b.owner2) )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"perioddates b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itembom b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"control b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"client b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"residency b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"membersgroup\" b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"division b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"department b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"address b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();



      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("primary")+" "+bundle.getString("unsubscribed")+" "+bundle.getString("data")+" "+bundle.getString("removed")+": "+deletedCount+" "+ bundle.getString("updated")+": "+updatedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));
} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+owner2Code+" "+bundle.getString("primary")+" "+bundle.getString("ownership")+" "+bundle.getString("check")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));


}


     deletedCount=0;
     updatedCount=0;
     insertedCount=0;
try{
     sqlScript="delete from \""+schemaName+"\".\"resource_b b where b.owner2 <>'SYSTEM' and  exists  (select 1 from \""+schemaName+"\".\"resource_bundle_b a where  a.owner2 = 'SYSTEM' and a.sid=b.resourcebundle ) ";
     Query q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"serialnumbers_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"scandate_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rate1f_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"options_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"nextserialno_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"journal_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jjournal_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"hlogfile_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"genoptions_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"editlog_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"clobdata_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     //SYSTEM clob discrepencies manually handled by Raaspi admin,

     sqlScript="delete from \""+schemaName+"\".\"cjournal_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"blobdata_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     //SYSTEM blobdata discrepencies handled by Raaspi admin

     sqlScript="delete from \""+schemaName+"\".\"arthatbl_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthahist_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acperiod_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jobassignment_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"schedule_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmendetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vcontact_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipmentdetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"ccontact_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendqdetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendpdetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendodetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendidetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resourcedetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplodetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuqdetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuodetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuidetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"usagebyperiods_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgenfields_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itembomdetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"holiday_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"gentriesdetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cupdetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjobdetails_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearneraux_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venartha_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"userprofl_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resource_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acintegr_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"user_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplorders_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vpayment_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"task_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cpayment_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"glentries_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjob_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearner_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgentable_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itemjob_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmen_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"groupmembers_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vinvoice_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipment_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendorders_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuinvoice_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuorders_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"project_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"outline_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venquote_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuquote_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"machine_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activity_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"item_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"employee_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"customer_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendor_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"location_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"account_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgendb_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"company_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rollupgroup_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgenapp_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resource_bundle_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     //resource and resourcebundle SYSTEM is for raaspi only and not applicable here, see top of this for diff checking

     sqlScript="delete from \""+schemaName+"\".\"perioddates_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itembom_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"control_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"client_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"residency_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"membersgroup_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"division_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"department_b  b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"address_b b where   not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();



      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("backup")+" "+bundle.getString("unsubscribed")+" "+bundle.getString("data")+" "+bundle.getString("removed")+": "+deletedCount+" "+ bundle.getString("updated")+": "+updatedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));

} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+owner2Code+" "+bundle.getString("backup")+" "+bundle.getString("ownership")+" "+bundle.getString("check")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
       //need a method to force delete any sid, specially from backup

}




      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("refresh")+" "+bundle.getString("message")+" "+bundle.getString("bundle")+", "+bundle.getString("if")+" "+ bundle.getString("updated"),""));

	 return "cleanUpUnlinked done";
     }

    public String  removeData(String owner2Code) {
     String sqlScript ="";
try {
    int deletedCount=0;
    int updatedCount=0;
    int insertedCount=0;

     // first read client record and check status, also do not allow removing myflowp since sqladmin wont run any more
     // if needed it has to be done manually in production
     // in dev we can create from scratch if needed
     // jay need to delete _b records as well done done but will calling backup be faster and failprrof
     sqlScript="select * from \""+schemaName+"\".\"client a where  a.clientversion='01' and a.owner2=:owner2 and a.statusfl = 8"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     if(q.getResultList().isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+owner2Code+" "+bundle.getString("client")+" "+bundle.getString("record")+" "+bundle.getString("not")+" "+bundle.getString("in")+" "+bundle.getString("closed")+" "+bundle.getString("status"),""));

      return "not closed status";
     }
     if(q.getResultList().size()>1){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("warning")+" "+owner2Code+" "+bundle.getString("multiple")+" "+bundle.getString("version")+" "+bundle.getString("01")+" "+bundle.getString("client")+" "+bundle.getString("records"),""));

      //return "multiple status";
     }

     sqlScript="delete from \""+schemaName+"\".\"serialnumbers a where  a.owner2=:owner2"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"scandate a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rate1f a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"options a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"nextserialno a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"journal a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jjournal a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"hlogfile a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"genoptions a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"editlog a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"clobdata a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cjournal a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"blobdata a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthatbl a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthahist a where   a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acperiod a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jobassignment a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"scheduledetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmendetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vcontact a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipmentdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"ccontact a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendqdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendpdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendodetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendidetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resourcedetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplodetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuqdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuodetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuidetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"usagebyperiods a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgenfields a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itembomdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itembom a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"holiday a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"gentriesdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cupdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjobdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearneraux a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venartha a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"userprofl a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resource\" a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acintegr a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"user a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplorders a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vpayment a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"task a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cpayment a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"glentries a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjob a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearner a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgentable a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"processdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itemjob a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"schedule a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"groupmembers a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vinvoice a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipment a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmen a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"vendorders a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuinvoice a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuorders a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"projectt\" a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"outline a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venquote a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuquote\" a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"machine a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activity a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"item a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"employee a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"customer a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendor a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"location a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"account a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgendb\" a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"company a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rollupgroup a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rgenapp\" a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"resource_bundle a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"processattributes a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     // do not remove SYSTEM data here

     sqlScript="delete from \""+schemaName+"\".\"perioddates a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"control a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"client a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"residency a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"membersgroup\" a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"division a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"department a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"address a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("removed")+" "+deletedCount+" "+bundle.getString("records")+" "+bundle.getString("from")+" "+owner2Code+" "+bundle.getString("primary"),""));
     log.info(bundle.getString("SqlAdmin")+" "+bundle.getString("removed")+" "+deletedCount+" "+bundle.getString("records")+" "+bundle.getString("from")+" "+owner2Code+" "+bundle.getString("primary"));




     // now delete the backup tables
     // jay change to calling backup ie if not in main , it will delete from backup as well
     // need test processd and attr not added
      deletedCount=0;
      updatedCount=0;
      insertedCount=0;


     sqlScript="delete from \""+schemaName+"\".\"serialnumbers_b a where  a.owner2=:owner2"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"scandate_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rate1f_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"options_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"nextserialno_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"journal_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jjournal_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"hlogfile_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"genoptions_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"editlog_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"clobdata_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cjournal_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"blobdata_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthatbl_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthahist_b a where   a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acperiod_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jobassignment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"scheduledetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmendetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vcontact_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipmentdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"ccontact_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendqdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendpdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendodetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendidetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resourcedetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplodetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuqdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuodetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuidetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"usagebyperiods_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgenfields_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itembomdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itembom_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"holiday_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"gentriesdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cupdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjobdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearneraux_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venartha_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"userprofl_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resource_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acintegr_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"user_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplorders_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vpayment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"task_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cpayment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"glentries_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjob_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearner_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgentable_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itemjob_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"schedule_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"groupmembers_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vinvoice_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmen_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();



     sqlScript="delete from \""+schemaName+"\".\"vendorders_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuinvoice_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuorders_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"project_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"outline_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venquote_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuquote_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"machine_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activity_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"item_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"employee_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"customer_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendor_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"location_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"account_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgendb_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"company_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rollupgroup_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rgenapp_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"resource_bundle_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"perioddates_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();




     sqlScript="delete from \""+schemaName+"\".\"control_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"client_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"residency_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"membersgroup_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"division_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"department_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"address_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("removed")+" "+deletedCount+" "+bundle.getString("records")+" "+bundle.getString("from")+" "+bundle.getString("backup"),""));

     // now delete the daily backup tables
     // jay change to calling backup ie if not in main , it will delete from backup as well
     // need test processd and attr not added
      deletedCount=0;
      updatedCount=0;
      insertedCount=0;


     sqlScript="delete from \""+schemaName+"\".\"serialnumbers_c a where  a.owner2=:owner2"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"scandate_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rate1f_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"options_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"nextserialno_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"journal_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jjournal_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"hlogfile_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"genoptions_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"editlog_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"clobdata_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cjournal_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"blobdata_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthatbl_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthahist_c a where   a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acperiod_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jobassignment_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"scheduledetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmendetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vcontact_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipmentdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"ccontact_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendqdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendpdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendodetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendidetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resourcedetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplodetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuqdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuodetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuidetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"usagebyperiods_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgenfields_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itembomdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itembom_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"holiday_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"gentriesdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cupdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjobdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearneraux_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venartha_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"userprofl_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resource_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acintegr_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"user_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplorders_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vpayment_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"task_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cpayment_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"glentries_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjob_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearner_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgentable_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itemjob_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"schedule_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"groupmembers_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vinvoice_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipment_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmen_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();



     sqlScript="delete from \""+schemaName+"\".\"vendorders_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuinvoice_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuorders_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"project_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"outline_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venquote_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuquote_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"machine_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activity_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"item_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"employee_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"customer_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendor_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"location_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"account_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgendb_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"company_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rollupgroup_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rgenapp_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"resource_bundle_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"perioddates_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();




     sqlScript="delete from \""+schemaName+"\".\"control_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"client_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"residency_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"membersgroup_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"division_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"department_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"address_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("removed")+" "+deletedCount+" "+bundle.getString("records")+" "+bundle.getString("from")+" "+bundle.getString("backup"),""));





} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("remove")+" "+bundle.getString("records")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));


}


	 return "data removed for "+owner2Code;

     }

	public String  AlterAppName(String owner2Code,String owner2New) {
     // client has to change client record field hdstyle to new name first
     // in dev, can use squirrel client to change
     String sqlScript ="";
try{
    int deletedCount=0;
    int updatedCount=0;
    int insertedCount=0;

     // first read client record and check status, also do not allow removing myflowp since sqladmin wont run any more
     // if needed it has to be done manually in production
     // in dev we can create from scratch if needed
     // client record x2xxuxxxbvxxxxxxxxxxhdstyle is changed and holds new app name
     // after alter is done here x3xxuxxxbvxxxxxxxxxxmtstyle holds the old app name and is used for alterappnameinbackup
     sqlScript="select * from \""+schemaName+"\".\"client a where  a.owner2=:owner2 and a.statusfl = 8"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     if(q.getResultList().isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+owner2Code+" "+bundle.getString("client")+" "+bundle.getString("record")+" "+bundle.getString("not")+" "+bundle.getString("in")+" "+bundle.getString("closed")+" "+bundle.getString("status"),""));



      return "not closed status";
     }
     sqlScript="select * from \""+schemaName+"\".\"client a where  a.owner2=:owner2"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2New);
     if(!q.getResultList().isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+owner2Code+" "+bundle.getString("client")+" "+bundle.getString("record")+" "+bundle.getString("already")+" "+bundle.getString("exists"),""));


      return "exists";
     }
     if(owner2New ==null || owner2New.isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("blank")+" "+bundle.getString("new")+" "+bundle.getString("name")+" "+owner2New,""));


      return "";
     }

     sqlScript="update \""+schemaName+"\".\"serialnumbers set owner2=:owner2New where owner2=:owner2Code"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"scandate set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"rate1f set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"options set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"nextserialno set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"journal set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"jjournal set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"hlogfile set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"genoptions set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"editlog set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"clobdata set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cjournal set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"blobdata set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"arthatbl set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"arthahist set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"acperiod set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"jobassignment set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"scheduledetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vshipmendetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vcontact set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"shipmentdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"ccontact set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vendqdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vendpdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vendodetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vendidetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"resourcedetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"emplodetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cuqdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cuodetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cuidetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"usagebyperiods set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"rgenfields set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"itembomdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"holiday set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"gentriesdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cupdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"activityjobdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"wageearneraux set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"venartha set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"userprofl set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"resource\" set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"controlusagebyperiods set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"acintegr set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"user set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"emplorders set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vpayment set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"task set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cpayment set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"glentries set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"controlusagebyperiods set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"activityjob set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"wageearner set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"rgentable set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"itemjob set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"schedule set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"groupmembers set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vinvoice set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"shipment set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vshipmen set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"vendorders set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cuinvoice set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cuorders set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"projectt\" set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"outline set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"venquote set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cuquote\" set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"machine set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"activity set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"item set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"employee set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"customer set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vendor set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"location set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"account set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"rgendb\" set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"company set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"rollupgroup set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"rgenapp\" set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"resource_bundle set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"perioddates set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"itembom set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"control set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"client set owner2=:owner2New,mtstyle=:owner2Code where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"residency set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"membersgroup\" set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"division set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"department set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"address set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("update")+" "+bundle.getString("for")+" "+bundle.getString("primary")+" "+bundle.getString("done")+", "+bundle.getString("count")+" "+updatedCount,""));



      //FacesMessages.instance().add("To fall back restore from back up or if works then back up once stable" );
     //fall back wont work since logic relies on ownercode and backup tables all have old ownercode
     // so use manual sql for fallback until a restore routine is done and if no fallback needed, use alterBackup (new button) to have it ready for backup/restore for new name
} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("site")+" "+bundle.getString("name")+" "+bundle.getString("change")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));



}


	 return "changed "+owner2Code+" to "+owner2New;

}

	public String  AlterAppNameInBackUp(String owner2Code,String owner2New) {
     // owner2Code (mtstyle) has oldName say 3rcomputerp and owner2New has new name say 3rcomputer
     String sqlScript ="";
try{
    int deletedCount=0;
    int updatedCount=0;
    int insertedCount=0;

     // first read client record and check status, also do not allow removing myflowp since sqladmin wont run any more
     // if needed it has to be done manually in production
     // in dev we can create from scratch if needed
     // jay need to delete _b records as well done
     sqlScript="select * from \""+schemaName+"\".\"client a where  a.owner2=:owner2 and a.statusfl = 8"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2New);
     if(q.getResultList().isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+owner2Code+" "+bundle.getString("client")+" "+bundle.getString("record")+" "+bundle.getString("not")+" "+bundle.getString("in")+" "+bundle.getString("closed")+" "+bundle.getString("status"),""));


      return "not closed status";
     }
     sqlScript="select * from \""+schemaName+"\".\"client_b a where  a.owner2=:owner2"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     if(!q.getResultList().isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+owner2Code+" "+bundle.getString("client")+" "+bundle.getString("record")+" "+bundle.getString("not")+" "+bundle.getString("already")+" "+bundle.getString("exists")+" "+bundle.getString("in")+" "+bundle.getString("backup"),""));


      return "exists";
     }
     if(owner2New ==null || owner2New.isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_ERROR,bundle.getString("blank")+" "+bundle.getString("new")+" "+bundle.getString("name")+" "+owner2New,""));


      return "";
     }

     sqlScript="update \""+schemaName+"\".\"serialnumbers_b set owner2=:owner2New where owner2=:owner2Code"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"scandate_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"rate1f_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"options_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"nextserialno_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"journal_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"jjournal_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"hlogfile_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"genoptions_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"editlog_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"clobdata_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cjournal_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"blobdata_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"arthatbl_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"arthahist_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"acperiod_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"jobassignment_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"scheduledetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vshipmendetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vcontact_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"shipmentdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"ccontact_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vendqdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vendpdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vendodetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vendidetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"resourcedetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"emplodetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cuqdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cuodetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cuidetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"usagebyperiods_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"rgenfields_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"itembomdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"holiday_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"gentriesdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cupdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"activityjobdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"wageearneraux_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"venartha_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"userprofl_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"resource_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"controlusagebyperiods_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"acintegr_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"user_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"emplorders_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vpayment_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"task_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cpayment_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"glentries_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"controlusagebyperiods_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"activityjob_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"wageearner_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"rgentable_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"itemjob_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"schedule_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"groupmembers_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vinvoice_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"shipment_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vshipmen_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"vendorders_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cuinvoice_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cuorders_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"project_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"outline_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"venquote_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"cuquote_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"machine_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"activity_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"item_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"employee_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"customer_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"vendor_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"location_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"account_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update \""+schemaName+"\".\"rgendb_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"company_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"rollupgroup_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"rgenapp_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"resource_bundle_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"perioddates_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"itembom_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"control_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"client_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"residency_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"membersgroup_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"division_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"department_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update \""+schemaName+"\".\"address_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("update")+" "+bundle.getString("done")+" "+bundle.getString("on")+" "+bundle.getString("backup")+", "+bundle.getString("ready")+" "+bundle.getString("for")+" "+bundle.getString("regular")+" "+bundle.getString("backup")+" / "+bundle.getString("restore")+" "+bundle.getString("update")+" "+bundle.getString("count")+" "+updatedCount,""));


} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("site")+" "+bundle.getString("name")+" "+bundle.getString("change")+" "+bundle.getString("in")+" "+bundle.getString("backup")+" "+bundle.getString("tables")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));



}

	 return "changed "+owner2Code+" to "+owner2New;

}

	public String  backupTenantToLocal(String tableName,String suffix) {
   /**
    * Called by SqlAdminSupport.xhtml
    * The following method copies each record from a backup table to a temp directory as csv
    * and then creates a zip file
    * @param args two. tableName like item,customer etc suffix like null for current or -b for backup and -c daily backup
    * @return whether backup done or failed.
    * @Exception sql errors.
    * @see
    *
    */
     String sqlScript ="";
     String path="";
     String fileName="";
    int deletedCount=0;
    int updatedCount=0;
    int insertedCount=0;
try{
     if(urlName.contains(".lraaspi.com")){
      path="C:/wildfly-10.1.0.Final/standalone/tmp/";//c drive
     }else{
      path="/tmp/";//openshift data test whether we need environment variable
     }
     fileName=path+tableName+".\"csv";
     File csvFile = new File(fileName);
     if (csvFile.createNewFile()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("created")+", "+bundle.getString("file")+" "+fileName,""));
      System.out.println("File is created!");
     }else{
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("creating")+", "+bundle.getString("file")+" "+fileName,""));
     }
} catch (Exception e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+", "+bundle.getString("cause")+" "+e.getMessage(),""));
      return null;
}

try{

     FileOutputStream fos=null;
     //skips create if already exists and overwrites
     fos = new FileOutputStream(path+"localbkup.zip");
     ZipOutputStream zos = new ZipOutputStream(fos);
      sqlScript="copy (select * from \""+schemaName+"\".\""+tableName+suffix+"  where owner2='"+owner2Code+"')  to 'path"+tableName+".\"csv' with CSV ";
      Query q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      addToZipFile(path+tableName+".\"csv", zos);
      zos.close();
      fos.close();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("backup")+" "+bundle.getString("on")+" "+bundle.getString("local")+" "+bundle.getString("directory")+" /tmp/ "+bundle.getString("done"),""));


} catch (FileNotFoundException e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+", "+bundle.getString("file")+" "+bundle.getString("not")+" "+bundle.getString("found")+", "+bundle.getString("cause")+" "+e.getMessage(),""));


} catch (IOException e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+", "+bundle.getString("io")+" "+bundle.getString("Exception")+", "+bundle.getString("cause")+" "+e.getMessage(),""));

} catch (Exception e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+", "+bundle.getString("cause")+" "+e.getMessage(),""));

}

	 return "backUp To Local done";
}

public static void addToZipFile(String fileName, ZipOutputStream zos) throws FileNotFoundException, IOException {

		System.out.println("Writing '" + fileName + "' to zip file");

		File file = new File(fileName);
		FileInputStream fis = new FileInputStream(file);
		ZipEntry zipEntry = new ZipEntry(fileName);
		zos.putNextEntry(zipEntry);

		byte[] bytes = new byte[1024];
		int length;
		while ((length = fis.read(bytes)) >= 0) {
			zos.write(bytes, 0, length);
		}

		zos.closeEntry();
		fis.close();
	}

  public  String restoreOwner(String owner2Code){
  // in case owner2Code gets corrupted we need a way to resore from backup using its \"sid\" as matching and replacing owner2Code   //with value from backup
   return "";
  }



  public  String getLastBupDate(){
  // client field carcsize(bupdate) and cadcsize(restoredate) holds the dates in String,record 01
   String sqlScript="";
   try{
     sqlScript="select carcsize from \""+schemaName+"\".\"client a where  owner2=:owner2 and clientversion=:clientversion"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code).setParameter("clientversion", "01");
     Object result = (Object)q.getSingleResult();
     if(result !=null){
      String carcsize = (String)result;
      return carcsize;
     }else{
      return null;
     }
   } catch (Exception e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("get")+" "+bundle.getString("last")+" "+bundle.getString("backup")+" "+bundle.getString("date")+", "+bundle.getString("cause")+" "+e.getMessage(),""));


              return null;
   }

  }

  public  String getLastArcDate(){
  // client field carcsize(bupdate) and cadcsize(restoredate) holds the dates in String,record 01
  // add archive data method, look into running a csv report which can be downloaded locally or stay as clobdata
  // and optionally as zipped csv blobdata
   String sqlScript="";
   try{
     sqlScript="select carcsize from \""+schemaName+"\".\"client a where  owner2=:owner2 and clientversion=:clientversion"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code).setParameter("clientversion", "01");
     Object result = (Object)q.getSingleResult();
     if(result !=null){
      String carcsize = (String)result;
      return carcsize;
     }else{
      return null;
     }
   } catch (Exception e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("get")+" "+bundle.getString("last")+" "+bundle.getString("backup")+" "+bundle.getString("date")+", "+bundle.getString("cause")+" "+e.getMessage(),""));


              return null;
   }

  }



  public  String getSystemLastBupDate(){
  // client field carcsize(bupdate) and cadcsize(restoredate) holds the dates in String, record 02
   String sqlScript="";
   try{
     sqlScript="select carcsize from \""+schemaName+"\".\"client a where  owner2=:owner2 and clientversion=:clientversion"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", "raaspi").setParameter("clientversion", "02");
     Object result = (Object)q.getSingleResult();
     if(result !=null){
      String carcsize = (String)result;
      return carcsize;
     }else{
      return null;
     }
   } catch (Exception e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("get")+" "+bundle.getString("last")+" "+bundle.getString("daily")+" / "+bundle.getString("secondary")+" "+bundle.getString("backup")+" "+bundle.getString("date")+", "+bundle.getString("cause")+" "+e.getMessage(),""));


              return null;
   }

  }


  public  String putComments(){
   String sqlScript="";
   try{
     int insertedCount=0;
      // existing comments get overwritten??
      //table address
      sqlScript="comment on table \""+schemaName+"\".\"address is 'Mailing or Shipping Address for Customer, Vendor or Employee'";
      Query q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column \""+schemaName+"\".\"address.sid is 'primary key, system generated unique identifier'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"address.ADDRESCODE is 'natural key, application generated and end part time based hashed'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table location
      sqlScript="comment on table \""+schemaName+"\".\"location is 'Location related to an address or by itself.'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column \""+schemaName+"\".\"location.sid is 'primary key, system generated unique identifier'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"location.Location is 'natural key, application generated and based on description,'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"location.Rack is 'refers to specific rack or in case of seat entity it refers to max seats per row.'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();

      //table client
      sqlScript="comment on table \""+schemaName+"\".\"CLIENT is 'Cloud Tenants profile information for each web site'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.sid is 'primary key, system generated unique identifier'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.CLIENTVERSION is 'natural key, used for versioning, currently only 01 is used, but version 02 etc could be used for more apiclientid etc ie 01 for paypal but 02 for shopify api, 03 for square, 04 for paytm (IN), 05 for EBS(IN) '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.SERIALNUM is 'serial number assigned to client, not used '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.altserno is 'used as SMTP port number '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.baccolor is 'used as dropdown menu bar css style '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.beepsou is 'used as SMTP auth(authentication)  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.confirm is 'used as SMTP mailRelay or not '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.currcode is ' merchant/bank currency code CAD, USD '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.currsymb is ' merchant currency symbol C$ U$ '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.defaultc is ' item currency Code '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.DESCRIPT is 'used as title for home page and should be SEO friendly ie describe what special and of interest about the site '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.hdstyle is 'used to set as new APPNAME by the site admin '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.hilcolor is 'used as dropdown menu bar label style for both size and font '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.ashostid is 'reseller support web url  , also used in supported by msg '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.intpassw is 'last visitor internet ip '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.inrpassw is 'last visitor date string '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.keyorder is ' item currency Symbol '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.lastuser is 'last user (logged in visitor) to the site '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.level is 'used as flag for debug messages or logging '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.linefeed is 'used as SMTP tls  '";//ssl not supported
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.listbuildc is 'used as flag to turn off show jsocial panel in footer '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.listbuildv is 'used as flag to show reseller supported by in footer '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.listbuilde is 'used as flag to show system blog in menu'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.locbaradj is ' site visits via authenticator homepagevisit'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.shibaradj is ' item currency to merchant/bank currency conv rate. 130 means 1.30 '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.NMATERIA is ' override code for item price and others'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.mtstyle is ' used to hold old appname and used in alter backup tables'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.nrate1ta is 'used for bootsrap 4 card background color can be red or #f0f0f0 '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.nrate2ta is 'used for bootsrap 4 tbd color '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.rootdir is ' used to hold smtp email send fromname (default owner2)'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.custolen is ' counter to hold \"customer\" orders,used for billing and read only'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.shicol is ' flag to indicate send order confirmation email to \"customer\"  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.cadcol is ' flag to indicate send order confirmation email to employee agent or as in client '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.loccsize is ' home page visit count for the site,displayed in dashboard '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.carcsize is ' backup date for the site,displayed in dashboard '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.pop3server is ' place holder for client site alert/error msg, displayed in site dashboard and in raaspi dashboard  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.pop3pass is ' place holder for client site temp redirect url, used for paypal local test using ngrok proxy  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.inraddr is ' place holder for intra address like shopify shop url  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.cartonfl is ' cart payment final (sale) not Authorize  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.refbaradj is 'used as counter for migration, can be reused  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.Repcsize is 'used as mobile dropdown menu bar css style  '";
      q = entityManager.createNativeQuery(sqlScript);
      //sqlScript="comment on column \""+schemaName+"\".\"CLIENT.rmlpassw is 'Site config rrsssfffff,r front end back end release s shopping cart version  '";
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.rmlpassw is 'Site menu config 2 if static visitor pages and static menu  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.scrcolor is 'used as current site skin color '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.smatcode is 'payment related info like \"location\" if version 03'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.tax1code is 'HST/Federal/GST/VAT registration #, non empty means collect if sale and pay if buy,item/customer/vendor level flag can override  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.tax2code is 'State/PST registration #, non empty means collect if sale and pay if buy , '";
      q = entityManager.createNativeQuery(sqlScript);
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.tax3code is '3rd Tax Food/Municipal/XXX registration #, non empty means collect if sale and pay if buy  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.textcolor is 'used as mobile dropdown menu bar font size in px or em etc '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"CLIENT.version is 'to hold variations like api keys and tax4,5,6 if version 02 '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();

      //table item
      sqlScript="comment on table \""+schemaName+"\".\"ITEM is 'Item '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column \""+schemaName+"\".\"ITEM.sid is 'primary key, system generated unique identifier'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"ITEM.misccode1 is 'either challenge in blogs(BI-D) etc or theme vendor if items SI-D '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"ITEM.misccode2 is 'either theme name in SI-D or actual answer for others'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"ITEM.source2 is 'either answer holder to challenge in blogs etc or '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"ITEM.subcodesn is 'vendor Theme 'TH' for SI-D and used for sort order'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"ITEM.subcodesn2\" is ' item variant value 8 ch each size,colour,material,brand for SI-Detls etc and used for sort order'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"ITEM.subcodesn3\" is ' item variant labels 8 ch each size,colour,material,brand for SI-Detls etc and used for sort order'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"ITEM.type is 'SI- shopping cart, IX inventory, IQ for quote,CI-D case, bI- blogs, PI- pictures, IB- Issue bugs,FI- apply Fees,TI- tasks '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table options
      sqlScript="comment on table \""+schemaName+"\".\"options is 'to hold various options and their purpose and values ";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column \""+schemaName+"\".\"options.row is 'holds different value or is left empty, some cases a \"row\" number can be used as context like row2 Tax3 will have Liquor tax";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();

      //table rate1f
      sqlScript="comment on table \""+schemaName+"\".\"rate1f is 'rate table for shippng (CS) and LabTest (LT) ";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column \""+schemaName+"\".\"rate1f.usertype is 'used for \"customer\" Shipping ie CS or for type of lab test ie LT-CBC' (value not used)";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"rate1f.prodtype is 'If shipping P for production, can be vendor code like F for Fedex ? , if Lab Test  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"rate1f.stepname is 'If shipping XY X shipment type S(standard)/E/P Y item size , if Lab Test detail test attribute ie Total WBC Count,HAEMOGLOBIN  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"rate1f.step is 'If shipping 0 not used, if Lab Test value range identifier 0,1,3   '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"rate1f.stepvalue is 'If shipping actual cost in currency per box may have >1 items , if Lab Test highest value in range  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table seat
      sqlScript="comment on table \""+schemaName+"\".\"seat\" is 'Seat allocation for event/tickets for product type o ie organization'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column \""+schemaName+"\".\"seat.row is 'seat rows could A,B,C etc or row1,row2 etc'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"seat.seat001status is '1st ch null/o/h/a/r ie available/occupied/on hold/available/reserved,next 16 ch ticket # if used,next 32 ch order number if applicable'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"seat.location is 'venue where event will take place'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table scandate
      sqlScript="comment on table \""+schemaName+"\".\"scandate is 'scandate table to control item physical count taking  ";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column \""+schemaName+"\".\"scandate.datetimeofscan is 'used to allow scanning after and including this date";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"scandate.lastdate is 'used to allow scanning before and including this date";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"scandate.bkupdate is 'used to hold date when baseline system stock count copied";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table serialnumbers
      sqlScript="comment on table \""+schemaName+"\".\"serialnumbers is 'serialnumbers records physical count and baseline system count for each item  ";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column \""+schemaName+"\".\"serialnumbers.barserial is 'barcode value and for serialized inventory control in ERP";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"serialnumbers.serialnumber is 'used to map to item by holding item's \"sid\" which is short enough for barcode as well";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"serialnumbers.quanrecd is 'used to record in item receive from supplier in ERP product and/or baseline qty for inventory";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"serialnumbers.quanissued is 'used in material and job allocation management";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"serialnumbers.physqty is 'used to record scanned /entered physical qty";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table userprofl
      sqlScript="comment on table \""+schemaName+"\".\"USERPROFL is 'Userprofl '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column \""+schemaName+"\".\"USERPROFL.margin is 'amount for FI-D items'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"USERPROFL.footer is 'allow limit for cuistomer prepay'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"USERPROFL.mtstyle is 'criteria for FI-D'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"USERPROFL.ststyle is 'type for FI-D search'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table usagebyperiods
      sqlScript="comment on table \""+schemaName+"\".\"usagebyperiods is 'Usagebyperiods '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column \""+schemaName+"\".\"usagebyperiods.period0formulae is 'IP address if key is visitstats3r'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column \""+schemaName+"\".\"usagebyperiods.periodtotalslabel is 'usage date if key is periodtotalslabel'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();


      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("added")+" "+bundle.getString("in")+" "+bundle.getString("data")+" "+bundle.getString("dictionary")+" "+insertedCount,""));

      return null;
   } catch (Exception e) {
      if(sqlScript.length() > 80){
       sqlScript=sqlScript.substring(0,80);
      }
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("put")+" "+bundle.getString("data")+" "+bundle.getString("dictionary")+" "+bundle.getString("comment")+" "+sqlScript+", "+bundle.getString("cause")+" "+e.getMessage(),""));


              return null;
   }
  }


	public String  backupAllTenants() {
      // C:\schemaspygui\postgres_postgre_ has tables relation and dependency info like deletionOrder.txt
      // add a lock ??
      // to file not used since in cloud pl/sql does not seem to have access to files
      // this backUp is on demand and done by tenant
      // there is daily backup to tables for all tenants while app is up and also a separate sbnapshot daily backup when app is stopped
      // snapshot is on file and meant for disaster situation
      //
      // 1-remove rows from backup if not in main ie any old (ie not used) rows in backup will be removed
      // 2-insert into backup if new rows in main
      // 3-update backup if \"row\" in main has different change time  (relies on statusfldate change)
      // follow the deletion order list produced by schemaspygui C:\schemaspygui\postgres_postgre_\deletionOrder.txt ( future use the list as input to automate )
      // insertionOrder.txt for insert, for update order does not matter because we are not dropping or adding any relation but will follow
      // insertionOrder.txt
      // resource_bundle,resource,clob and blob have SYSTEM records which need extra logic
      // SYSTEM records should not be deleted from main or backup table but should be copied into backup if needed ??? revisit
      // SELECT * FROM information_schema.columns WHERE table_schema = 'genapp'  AND table_name   = 'client'
     String sqlScript ="";
try{
    int deletedCount=0;
    int updatedCount=0;
    int insertedCount=0;
    int countp=0;

     sqlScript="delete from \""+schemaName+"\".\"serialnumbers_b b where   b.owner2=:owner2 and not exists  (select \"sid\" from \""+schemaName+"\".\"serialnumbers a where  a.sid = b.sid and a.owner2=:owner2)";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("serialnumbers_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"scandate_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"scandate a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("scandate_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"rate1f_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rate1f a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("rate1f_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"options_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"options a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("options_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"nextserialno_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"nextserialno a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("nextserialno_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"journal_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"journal a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("journal_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"jjournal_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"jjournal a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"hlogfile_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"hlogfile a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"genoptions_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"genoptions a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"editlog_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"editlog a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"clobdata_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"clobdata a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cjournal_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cjournal a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"blobdata_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"blobdata a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthatbl_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"arthatbl a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"arthahist_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"arthahist a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acperiod_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"acperiod a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"jobassignment_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"jobassignment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"schedule_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"schedule a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmendetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vshipmendetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vcontact_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vcontact a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipmentdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"shipmentdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"ccontact_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"ccontact a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendqdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendqdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendpdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendpdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendodetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendodetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendidetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendidetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resourcedetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"resourcedetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"processdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"processdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplodetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"emplodetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuqdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuqdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuodetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuodetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuidetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuidetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"usagebyperiods_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"usagebyperiods a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgenfields_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rgenfields a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"itembomdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"itembomdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"holiday_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"holiday a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"gentriesdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"gentriesdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cupdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cupdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjobdetails_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"activityjobdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearneraux_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"wageearneraux a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venartha_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"venartha a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"userprofl_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"userprofl a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"resource_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"resource\" a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"processattributes_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"processattributes a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"controlusagebyperiods a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"acintegr_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"acintegr a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"user_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"user a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"emplorders_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"emplorders a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vpayment_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vpayment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"task_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"task a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cpayment_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cpayment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"glentries_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"glentries a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"controlusagebyperiods_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"controlusagebyperiods a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activityjob_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"activityjob a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"wageearner_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"wageearner a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"rgentable_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rgentable a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"itemjob_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"itemjob a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vshipmen_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vshipmen a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"groupmembers_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"groupmembers a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vinvoice_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vinvoice a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"shipment_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"shipment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendorders_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendorders a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuinvoice_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuinvoice a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuorders_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuorders a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"project_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"projectt\" a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"outline_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"outline a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"venquote_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"venquote a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"cuquote_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"cuquote\" a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"machine_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"machine a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"activity_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"activity a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"item_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"item a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"employee_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"employee a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"customer_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"customer a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"vendor_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"vendor a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from \""+schemaName+"\".\"location_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"location a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("location_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;
     sqlScript="delete from \""+schemaName+"\".\"account_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"account a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("account_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from \""+schemaName+"\".\"rgendb_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rgendb\" a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"company_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"company a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rollupgroup_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rollupgroup a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"rgenapp_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"rgenapp\" a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"resource_bundle_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"resource_bundle a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"perioddates_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"perioddates a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"itembom_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"itembom a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"resource_bundle_b select * from \""+schemaName+"\".\"resource_bundle a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"resource_bundle_b select * from \""+schemaName+"\".\"resource_bundle a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

     sqlScript="delete from \""+schemaName+"\".\"control_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"control a where  a.sid = b.sid and a.owner2=:owner2 )";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"client_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"client a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"residency_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"residency a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"membersgroup_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"membersgroup\" a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"division_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"division a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"department_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"department a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from \""+schemaName+"\".\"address_b b where   b.owner2=:owner2  and  not exists  (select \"sid\" from \""+schemaName+"\".\"address a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();





     // insert into backup if new rows in main
     // follow insertionOrder.txt produced by schemaSpyGui which is in reverse order of deleteOrder.txt.

      sqlScript="insert into \""+schemaName+"\".\"address_b select * from \""+schemaName+"\".\"address a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"address_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"department_b select * from \""+schemaName+"\".\"department a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"department_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"division_b select * from \""+schemaName+"\".\"division a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"division_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"membersgroup_b select * from \""+schemaName+"\".\"membersgroup\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"membersgroup_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"residency_b select * from \""+schemaName+"\".\"residency a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"residency_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"client_b select * from \""+schemaName+"\".\"client a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"client_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"control_b select * from \""+schemaName+"\".\"control a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"control_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itembom_b select * from \""+schemaName+"\".\"itembom a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"itembom_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"resource_bundle_b select * from \""+schemaName+"\".\"resource_bundle a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"resource_bundle_b select * from \""+schemaName+"\".\"resource_bundle a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", "SYSTEM");
      insertedCount=insertedCount+q.executeUpdate();
      }


      sqlScript="insert into \""+schemaName+"\".\"perioddates_b select * from \""+schemaName+"\".\"perioddates a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"perioddates_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rgenapp_b select * from \""+schemaName+"\".\"rgenapp\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgenapp_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rollupgroup_b select * from \""+schemaName+"\".\"rollupgroup a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rollupgroup_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"company_b select * from \""+schemaName+"\".\"company a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"company_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"rgendb_b select * from \""+schemaName+"\".\"rgendb\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgendb_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("insert")+" "+bundle.getString("rgendb_b")+" "+bundle.getString("count")+" "+(insertedCount-countp),""));
      countp=insertedCount;

      sqlScript="insert into \""+schemaName+"\".\"account_b select * from \""+schemaName+"\".\"account a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"account_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("insert")+" "+bundle.getString("account_b")+" "+bundle.getString("count")+" "+(insertedCount-countp),""));
      countp=insertedCount;

      sqlScript="insert into \""+schemaName+"\".\"location_b select * from \""+schemaName+"\".\"location a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"location_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vendor_b select * from \""+schemaName+"\".\"vendor a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendor_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"customer_b select * from \""+schemaName+"\".\"customer a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"customer_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"employee_b select * from \""+schemaName+"\".\"employee a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"employee_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"item_b select * from \""+schemaName+"\".\"item a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"item_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"activity_b select * from \""+schemaName+"\".\"activity a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"activity_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"machine_b select * from \""+schemaName+"\".\"machine a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"machine_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuquote_b select * from \""+schemaName+"\".\"cuquote\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuquote_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"venquote_b select * from \""+schemaName+"\".\"venquote a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"venquote_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"outline_b select * from \""+schemaName+"\".\"outline a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"outline_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"project_b select * from \""+schemaName+"\".\"projectt\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"project_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuorders_b select * from \""+schemaName+"\".\"cuorders a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vendorders_b select * from \""+schemaName+"\".\"vendorders a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vshipmen_b select * from \""+schemaName+"\".\"vshipmen a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vshipmen_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"cuinvoice_b select * from \""+schemaName+"\".\"cuinvoice a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuinvoice_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"shipment_b select * from \""+schemaName+"\".\"shipment a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"shipment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"vinvoice_b select * from \""+schemaName+"\".\"vinvoice a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vinvoice_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"groupmembers_b select * from \""+schemaName+"\".\"groupmembers a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"groupmembers_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"processdetails_b select * from \""+schemaName+"\".\"processdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"processdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itemjob_b select * from \""+schemaName+"\".\"itemjob a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"itemjob_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"rgentable_b select * from \""+schemaName+"\".\"rgentable a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgentable_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"wageearner_b select * from \""+schemaName+"\".\"wageearner a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"wageearner_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"activityjob_b select * from \""+schemaName+"\".\"activityjob a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"activityjob_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"glentries_b select * from \""+schemaName+"\".\"glentries a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"glentries_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cpayment_b select * from \""+schemaName+"\".\"cpayment a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cpayment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"task_b select * from \""+schemaName+"\".\"task a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"task_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vpayment_b select * from \""+schemaName+"\".\"vpayment a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vpayment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"emplorders_b select * from \""+schemaName+"\".\"emplorders a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"emplorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"user_b select * from \""+schemaName+"\".\"user a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"user_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"acintegr_b select * from \""+schemaName+"\".\"acintegr a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"acintegr_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"controlusagebyperiods_b select * from \""+schemaName+"\".\"controlusagebyperiods a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"controlusagebyperiods_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"processattributes_b select * from \""+schemaName+"\".\"processattributes a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"processattributes_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"resource_b select * from \""+schemaName+"\".\"resource\" a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"resource_b select * from \""+schemaName+"\".\"resource\" a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"resource_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"userprofl_b select * from \""+schemaName+"\".\"userprofl a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"userprofl_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"venartha_b select * from \""+schemaName+"\".\"venartha a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"venartha_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"wageearneraux_b select * from \""+schemaName+"\".\"wageearneraux a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"wageearneraux_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"activityjobdetails_b select * from \""+schemaName+"\".\"activityjobdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"activityjobdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cupdetails_b select * from \""+schemaName+"\".\"cupdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cupdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"gentriesdetails_b select * from \""+schemaName+"\".\"gentriesdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"gentriesdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"holiday_b select * from \""+schemaName+"\".\"holiday a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"holiday_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into \""+schemaName+"\".\"itembomdetails_b select * from \""+schemaName+"\".\"itembomdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"itembomdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();




      sqlScript="insert into \""+schemaName+"\".\"rgenfields_b select * from \""+schemaName+"\".\"rgenfields a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rgenfields_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"usagebyperiods_b select * from \""+schemaName+"\".\"usagebyperiods a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"usagebyperiods_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuidetails_b select * from \""+schemaName+"\".\"cuidetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuidetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuodetails_b select * from \""+schemaName+"\".\"cuodetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"cuqdetails_b select * from \""+schemaName+"\".\"cuqdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cuqdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"emplodetails_b select * from \""+schemaName+"\".\"emplodetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"emplodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"resourcedetails_b select * from \""+schemaName+"\".\"resourcedetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"resourcedetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendidetails_b select * from \""+schemaName+"\".\"vendidetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendidetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendodetails_b select * from \""+schemaName+"\".\"vendodetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendpdetails_b select * from \""+schemaName+"\".\"vendpdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendpdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vendqdetails_b select * from \""+schemaName+"\".\"vendqdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vendqdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"ccontact_b select * from \""+schemaName+"\".\"ccontact a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"ccontact_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"shipmentdetails_b select * from \""+schemaName+"\".\"shipmentdetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"shipmentdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vcontact_b select * from \""+schemaName+"\".\"vcontact a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vcontact_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"vshipmendetails_b select * from \""+schemaName+"\".\"vshipmendetails a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"vshipmendetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"schedule_b select * from \""+schemaName+"\".\"schedule a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"schedule_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"jobassignment_b select * from \""+schemaName+"\".\"jobassignment a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"jobassignment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"acperiod_b select * from \""+schemaName+"\".\"acperiod a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"acperiod_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"arthahist_b select * from \""+schemaName+"\".\"arthahist a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"arthahist_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"arthatbl_b select * from \""+schemaName+"\".\"arthatbl a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"arthatbl_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"holiday_b select * from \""+schemaName+"\".\"holiday a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"holiday_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"blobdata_b select * from \""+schemaName+"\".\"blobdata a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"blobdata_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"blobdata_b select * from \""+schemaName+"\".\"blobdata a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"blobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"cjournal_b select * from \""+schemaName+"\".\"cjournal a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"cjournal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"clobdata_b select * from \""+schemaName+"\".\"clobdata a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"clobdata_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(owner2Code.equals("raaspi")){
      sqlScript="insert into \""+schemaName+"\".\"clobdata_b select * from \""+schemaName+"\".\"clobdata a where  a.owner2='SYSTEM'  and  not exists (select \"sid\" from \""+schemaName+"\".\"clobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into \""+schemaName+"\".\"editlog_b select * from \""+schemaName+"\".\"editlog a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"editlog_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"genoptions_b select * from \""+schemaName+"\".\"genoptions a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"genoptions_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"hlogfile_b select * from \""+schemaName+"\".\"hlogfile a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"hlogfile_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"jjournal_b select * from \""+schemaName+"\".\"jjournal a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"jjournal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"journal_b select * from \""+schemaName+"\".\"journal a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"journal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"nextserialno_b select * from \""+schemaName+"\".\"nextserialno a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"nextserialno_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"options_b select * from \""+schemaName+"\".\"options a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"options_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"rate1f_b select * from \""+schemaName+"\".\"rate1f a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"rate1f_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"scandate_b select * from \""+schemaName+"\".\"scandate a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"scandate_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into \""+schemaName+"\".\"serialnumbers_b select * from \""+schemaName+"\".\"serialnumbers a where  a.owner2=:owner2  and  not exists (select \"sid\" from \""+schemaName+"\".\"serialnumbers_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();





      // update backup if \"row\" in main has changed (relies on statusfldate change)
      // jay whats about those not having statusfldt? either add field or rely on parent status fld
      // and group the updates together
      // order should not matter because all the foreign keys should exist but will follow insert order
      /**
      SELECT 'sqlScript="UPDATE \""+schemaName+"\".\"account_b b SET (' || ARRAY_TO_STRING(ARRAY(SELECT COLUMN_NAME::VARCHAR(50)
	 FROM INFORMATION_SCHEMA.COLUMNS
	 WHERE TABLE_NAME='account'
	 ORDER bY ORDINAL_POSITION
       ),',')
       || ') = ('
       ||ARRAY_TO_STRING(ARRAY(SELECT 'a.'||COLUMN_NAME::VARCHAR(50)
	 FROM INFORMATION_SCHEMA.COLUMNS
	 WHERE TABLE_NAME='account'
	 ORDER bY ORDINAL_POSITION
       ),',')
       || ')'
       || ' FROM \""+schemaName+"\".\"account a where ((b.sid=a.sid\") AND ((b.STATUSFLDT <>  a.STATUSFLDT)) and a.owner2=:owner2)";'
      */
//?? update now done jay except for rate1f which now has statusfldt done now aug 05 2018 but check others which manually changed

sqlScript="UPDATE \""+schemaName+"\".\"ADDRESS_b b SET(SID,ADDRESCODE,ADDRL1,ADDRL2,ADDRL3,CITY,PROVNSTATE,COUNTRY,PZCODE,DESCRIPT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,PRINTMSTAT,PRINMTFLDT)=(a.SID,a.ADDRESCODE,a.ADDRL1,a.ADDRL2,a.ADDRL3,a.CITY,a.PROVNSTATE,a.COUNTRY,a.PZCODE,a.DESCRIPT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.PRINTMSTAT,a.PRINMTFLDT)FROM \""+schemaName+"\".\"address a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"OPTIONS_b b SET(SID,ROW,OPTIONS01,PURPOSE01,VALUE01,OPTIONS02,PURPOSE02,VALUE02,OPTIONS03,PURPOSE03,VALUE03,OPTIONS04,PURPOSE04,VALUE04,OPTIONS05,PURPOSE05,VALUE05,OPTIONS06,PURPOSE06,VALUE06,OPTIONS07,PURPOSE07,VALUE07,OPTIONS08,PURPOSE08,VALUE08,OPTIONS09,PURPOSE09,VALUE09,OPTIONS10,PURPOSE10,VALUE10,OPTIONS11,PURPOSE11,VALUE11,OPTIONS12,PURPOSE12,VALUE12,OPTIONS13,PURPOSE13,VALUE13,OPTIONS14,PURPOSE14,VALUE14,OPTIONS15,PURPOSE15,VALUE15,OPTIONS16,PURPOSE16,VALUE16,OPTIONS17,PURPOSE17,VALUE17,OPTIONS18,PURPOSE18,VALUE18,OPTIONS19,PURPOSE19,VALUE19,OPTIONS20,PURPOSE20,VALUE20,OPTIONS21,PURPOSE21,VALUE21,OPTIONS22,PURPOSE22,VALUE22,OPTIONS23,PURPOSE23,VALUE23,OPTIONS24,PURPOSE24,VALUE24,OPTIONS25,PURPOSE25,VALUE25,OPTIONS26,PURPOSE26,VALUE26,OPTIONS27,PURPOSE27,VALUE27,OPTIONS28,PURPOSE28,VALUE28,OPTIONS29,PURPOSE29,VALUE29,OPTIONS30,PURPOSE30,VALUE30,OPTIONS31,PURPOSE31,VALUE31,OPTIONS32,PURPOSE32,VALUE32,OPTIONS33,PURPOSE33,VALUE33,OPTIONS34,PURPOSE34,VALUE34,OPTIONS35,PURPOSE35,VALUE35,OPTIONS36,PURPOSE36,VALUE36,OPTIONS37,PURPOSE37,VALUE37,OPTIONS38,PURPOSE38,VALUE38,OPTIONS39,PURPOSE39,VALUE39,OPTIONS40,PURPOSE40,VALUE40,OPTIONS41,PURPOSE41,VALUE41,OPTIONS42,PURPOSE42,VALUE42,OPTIONS43,PURPOSE43,VALUE43,OPTIONS44,PURPOSE44,VALUE44,OPTIONS45,PURPOSE45,VALUE45,OPTIONS46,PURPOSE46,VALUE46,OPTIONS47,PURPOSE47,VALUE47,OPTIONS48,PURPOSE48,VALUE48,OPTIONS49,PURPOSE49,VALUE49,OPTIONS50,PURPOSE50,VALUE50,OPTIONS51,PURPOSE51,VALUE51,OPTIONS52,PURPOSE52,VALUE52,OPTIONS53,PURPOSE53,VALUE53,OPTIONS54,PURPOSE54,VALUE54,OPTIONS55,PURPOSE55,VALUE55,OPTIONS56,PURPOSE56,VALUE56,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.ROW,a.OPTIONS01,a.PURPOSE01,a.VALUE01,a.OPTIONS02,a.PURPOSE02,a.VALUE02,a.OPTIONS03,a.PURPOSE03,a.VALUE03,a.OPTIONS04,a.PURPOSE04,a.VALUE04,a.OPTIONS05,a.PURPOSE05,a.VALUE05,a.OPTIONS06,a.PURPOSE06,a.VALUE06,a.OPTIONS07,a.PURPOSE07,a.VALUE07,a.OPTIONS08,a.PURPOSE08,a.VALUE08,a.OPTIONS09,a.PURPOSE09,a.VALUE09,a.OPTIONS10,a.PURPOSE10,a.VALUE10,a.OPTIONS11,a.PURPOSE11,a.VALUE11,a.OPTIONS12,a.PURPOSE12,a.VALUE12,a.OPTIONS13,a.PURPOSE13,a.VALUE13,a.OPTIONS14,a.PURPOSE14,a.VALUE14,a.OPTIONS15,a.PURPOSE15,a.VALUE15,a.OPTIONS16,a.PURPOSE16,a.VALUE16,a.OPTIONS17,a.PURPOSE17,a.VALUE17,a.OPTIONS18,a.PURPOSE18,a.VALUE18,a.OPTIONS19,a.PURPOSE19,a.VALUE19,a.OPTIONS20,a.PURPOSE20,a.VALUE20,a.OPTIONS21,a.PURPOSE21,a.VALUE21,a.OPTIONS22,a.PURPOSE22,a.VALUE22,a.OPTIONS23,a.PURPOSE23,a.VALUE23,a.OPTIONS24,a.PURPOSE24,a.VALUE24,a.OPTIONS25,a.PURPOSE25,a.VALUE25,a.OPTIONS26,a.PURPOSE26,a.VALUE26,a.OPTIONS27,a.PURPOSE27,a.VALUE27,a.OPTIONS28,a.PURPOSE28,a.VALUE28,a.OPTIONS29,a.PURPOSE29,a.VALUE29,a.OPTIONS30,a.PURPOSE30,a.VALUE30,a.OPTIONS31,a.PURPOSE31,a.VALUE31,a.OPTIONS32,a.PURPOSE32,a.VALUE32,a.OPTIONS33,a.PURPOSE33,a.VALUE33,a.OPTIONS34,a.PURPOSE34,a.VALUE34,a.OPTIONS35,a.PURPOSE35,a.VALUE35,a.OPTIONS36,a.PURPOSE36,a.VALUE36,a.OPTIONS37,a.PURPOSE37,a.VALUE37,a.OPTIONS38,a.PURPOSE38,a.VALUE38,a.OPTIONS39,a.PURPOSE39,a.VALUE39,a.OPTIONS40,a.PURPOSE40,a.VALUE40,a.OPTIONS41,a.PURPOSE41,a.VALUE41,a.OPTIONS42,a.PURPOSE42,a.VALUE42,a.OPTIONS43,a.PURPOSE43,a.VALUE43,a.OPTIONS44,a.PURPOSE44,a.VALUE44,a.OPTIONS45,a.PURPOSE45,a.VALUE45,a.OPTIONS46,a.PURPOSE46,a.VALUE46,a.OPTIONS47,a.PURPOSE47,a.VALUE47,a.OPTIONS48,a.PURPOSE48,a.VALUE48,a.OPTIONS49,a.PURPOSE49,a.VALUE49,a.OPTIONS50,a.PURPOSE50,a.VALUE50,a.OPTIONS51,a.PURPOSE51,a.VALUE51,a.OPTIONS52,a.PURPOSE52,a.VALUE52,a.OPTIONS53,a.PURPOSE53,a.VALUE53,a.OPTIONS54,a.PURPOSE54,a.VALUE54,a.OPTIONS55,a.PURPOSE55,a.VALUE55,a.OPTIONS56,a.PURPOSE56,a.VALUE56,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"OPTIONS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

String line1="UPDATE \""+schemaName+"\".\"CLIENT_b b SET(SID,CLIENTVERSION,SERIALNUM,ENTERPRISECOMPANYNA,DESCRIPT,ADDRL1,ADDRL2,ADDRL3,CITY,PROVNSTATE,COUNTRYNAME,PZCODE,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,ENTERPRISECOMPCODE,ENTERPRISECOMPSIZE,BARCSIZE,LEVEL,POSKIPP,LOOSEIT,JOBSKIP,CARTONFL,PICKLIST,PRODDESC,PRODCODE,NJOB,NMATERIA,NACTIVITY,NBUTT,NCUSTOME,NCONTACT,NVENDOR,NEMPLOYEE,NSCHEDULE,NREJECT,NRETURN,NCODE,MANUFID,BARTYPE,CADTYPE,CARTYPE,SHITYPE,REPTYPE,LOCTYPE,BARCOL,CARCOL,CADCOL,SHICOL,REPCOL,LOCCOL,ALTSERIA,COUNTRYCODE,NALTSERI,SCRCOLOR,HILCOLOR,TEXTCOLOR,BACCOLOR,DATETYPE,CURRSYMB,CURRCODE,PRINBAR,BARPRINT,CARPRINT,CADPRINT,LOCPRINT,SHIPRINT,REPPRINT,BARPRTY,REPPRTY,CARPRTY,CADPRTY,SHIPRTY,LOCPRTY,ALTSELEN,CUSTOLEN,CARCSIZE,CADCSIZE,SHICSIZE,REPCSIZE,LOCCSIZE,CS,NCONFTYP,NLOCATIO,NDIVCODE,NDEPCODE,NADDCODE,NFLOOR,NROOM,NRACK,MENUTYPE,PADTYPE,NRATE1TA,NRATE2TA,DEFCONFT,BEEPSOU,CONFIRM,LINEFEED,REFBARADJ,SHIBARADJ,CUSBARADJ,LOCBARADJ,CARBARADJ,NCORDER,NSPERSON,PROMPTI,CUSTOMERQUOTENB,CUSTOMERQUOTEN,CUSTOMERQUOTENA,CUSTOMERORDERNB,CUSTOMERORDERN,CUSTOMERORDERNA,VENDORORDERNB,VENDORORDERN,VENDORORDERNA,EMPLOYEEORDERNB,EMPLOYEEORDERN,EMPLOYEEORDERNA,JOBNB,JOBN,JOBNA,CUSTOMERINVOICENB,CUSTOMERINVOICEN,CUSTOMERINVOICENA,VENDORINVOICENB,VENDORINVOICEN,VENDORINVOICENA,CUSTOMERPICKNB,CUSTOMERPICKN,CUSTOMERPICKNA,VENDORQUOTENB,VENDORQUOTEN,VENDORQUOTENA,CUSTOMERPAYMNTNB,CUSTOMERPAYMNTN,CUSTOMERPAYMNTNA,VENDORPAYMNTNB,VENDORPAYMNTN,VENDORPAYMNTNA,VENDORCHQNB,VENDORCHQN,VENDORCHQNA,TASKNB,TASKN,TASKNA,ARSEQB,ARSEQ,ARSEQA,APSEQB,APSEQ,APSEQA,GLSEQB,GLSEQ,GLSEQA,PASEQB,PASEQ,PASEQA,ICSEQB,ICSEQ,ICSEQA,JOSEQB,JOSEQ,JOSEQA,SGLENTRY,TAX1CODE,TAX2CODE,TAX3CODE,NDECIMAL,EDIPASSW,INTPASSW,INRPASSW,IMLPASSW,RMLPASSW,LMLPASSW,HOSPASSW,LANPASSW,WANPASSW,ASHOSTID,HDSTYLE,MTSTYLE,STSTYLE,DTSTYLE,FTSTYLE,DEFAULTR,DEFAULTC,DBNAME,ROOTDIR,KEYORDER,CURRBUSDAT,LASTBUSDAT,CURRCALDAT,LASTCALDAT,PREPROCESS,MARGIN,FOOTER,LASTUSER,LISTBUILDC,LISTBUILDV,LISTBUILDE,LISTBROWNC,LISTBROWNV,LISTBROWNE,SMTPSERVER,SMTPUSER,SMTPPASS,POP3SERVER,POP3USER,POP3PASS,SMATCODE,FYREND,FPERIODS,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,licensetype,licensestart,licenseend)=(a.sid,a.CLIENTVERSION,a.SERIALNUM,a.ENTERPRISECOMPANYNA,a.DESCRIPT,a.ADDRL1,a.ADDRL2,a.ADDRL3,a.CITY,a.PROVNSTATE,a.COUNTRYNAME,a.PZCODE,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.ENTERPRISECOMPCODE,a.ENTERPRISECOMPSIZE,a.BARCSIZE,a.LEVEL,a.POSKIPP,a.LOOSEIT,a.JOBSKIP,a.CARTONFL,a.PICKLIST,a.PRODDESC,a.PRODCODE,a.NJOB,a.NMATERIA,a.NACTIVITY,a.NBUTT,a.NCUSTOME,a.NCONTACT,a.NVENDOR,a.NEMPLOYEE,a.NSCHEDULE,a.NREJECT,a.NRETURN,a.NCODE,a.MANUFID,a.BARTYPE,a.CADTYPE,a.CARTYPE,a.SHITYPE,a.REPTYPE,a.LOCTYPE,a.BARCOL,a.CARCOL,a.CADCOL,a.SHICOL,a.REPCOL,a.LOCCOL,a.ALTSERIA,a.COUNTRYCODE,a.NALTSERI,a.SCRCOLOR,a.HILCOLOR,";
sqlScript=line1+"a.TEXTCOLOR,a.BACCOLOR,a.DATETYPE,a.CURRSYMB,a.CURRCODE,a.PRINBAR,a.BARPRINT,a.CARPRINT,a.CADPRINT,a.LOCPRINT,a.SHIPRINT,a.REPPRINT,a.BARPRTY,a.REPPRTY,a.CARPRTY,a.CADPRTY,a.SHIPRTY,a.LOCPRTY,a.ALTSELEN,a.CUSTOLEN,a.CARCSIZE,a.CADCSIZE,a.SHICSIZE,a.REPCSIZE,a.LOCCSIZE,a.CS,a.NCONFTYP,a.NLOCATIO,a.NDIVCODE,a.NDEPCODE,a.NADDCODE,a.NFLOOR,a.NROOM,a.NRACK,a.MENUTYPE,a.PADTYPE,a.NRATE1TA,a.NRATE2TA,a.DEFCONFT,a.BEEPSOU,a.CONFIRM,a.LINEFEED,a.REFBARADJ,a.SHIBARADJ,a.CUSBARADJ,a.LOCBARADJ,a.CARBARADJ,a.NCORDER,a.NSPERSON,a.PROMPTI,a.CUSTOMERQUOTENB,a.CUSTOMERQUOTEN,a.CUSTOMERQUOTENA,a.CUSTOMERORDERNB,a.CUSTOMERORDERN,a.CUSTOMERORDERNA,a.VENDORORDERNB,a.VENDORORDERN,a.VENDORORDERNA,a.EMPLOYEEORDERNB,a.EMPLOYEEORDERN,a.EMPLOYEEORDERNA,a.JOBNB,a.JOBN,a.JOBNA,a.CUSTOMERINVOICENB,a.CUSTOMERINVOICEN,a.CUSTOMERINVOICENA,a.VENDORINVOICENB,a.VENDORINVOICEN,a.VENDORINVOICENA,a.CUSTOMERPICKNB,a.CUSTOMERPICKN,a.CUSTOMERPICKNA,a.VENDORQUOTENB,a.VENDORQUOTEN,a.VENDORQUOTENA,a.CUSTOMERPAYMNTNB,a.CUSTOMERPAYMNTN,a.CUSTOMERPAYMNTNA,a.VENDORPAYMNTNB,a.VENDORPAYMNTN,a.VENDORPAYMNTNA,a.VENDORCHQNB,a.VENDORCHQN,a.VENDORCHQNA,a.TASKNB,a.TASKN,a.TASKNA,a.ARSEQB,a.ARSEQ,a.ARSEQA,a.APSEQB,a.APSEQ,a.APSEQA,a.GLSEQB,a.GLSEQ,a.GLSEQA,a.PASEQB,a.PASEQ,a.PASEQA,a.ICSEQB,a.ICSEQ,a.ICSEQA,a.JOSEQB,a.JOSEQ,a.JOSEQA,a.SGLENTRY,a.TAX1CODE,a.TAX2CODE,a.TAX3CODE,a.NDECIMAL,a.EDIPASSW,a.INTPASSW,a.INRPASSW,a.IMLPASSW,a.RMLPASSW,a.LMLPASSW,a.HOSPASSW,a.LANPASSW,a.WANPASSW,a.ASHOSTID,a.HDSTYLE,a.MTSTYLE,a.STSTYLE,a.DTSTYLE,a.FTSTYLE,a.DEFAULTR,a.DEFAULTC,a.DBNAME,a.ROOTDIR,a.KEYORDER,a.CURRBUSDAT,a.LASTBUSDAT,a.CURRCALDAT,a.LASTCALDAT,a.PREPROCESS,a.MARGIN,a.FOOTER,a.LASTUSER,a.LISTBUILDC,a.LISTBUILDV,a.LISTBUILDE,a.LISTBROWNC,a.LISTBROWNV,a.LISTBROWNE,a.SMTPSERVER,a.SMTPUSER,a.SMTPPASS,a.POP3SERVER,a.POP3USER,a.POP3PASS,a.SMATCODE,a.FYREND,a.FPERIODS,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.licensetype,a.licensestart,a.licenseend)FROM \""+schemaName+"\".\"CLIENT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"DEPARTMENT_b b SET(SID,DEPCODE,DESCRIPT,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.DEPCODE,a.DESCRIPT,a.GLPREFIX,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"DEPARTMENT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"COMPANY_b b SET(SID,COMPANYCODE,DESCRIPT,LEGALNAME,MAILTOCODE,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.COMPANYCODE,a.DESCRIPT,a.LEGALNAME,a.MAILTOCODE,a.GLPREFIX,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"COMPANY a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"CONTROL_b b SET(SID,CONTROLCODE,DESCRIPT,TYPEOFCONTROL,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.CONTROLCODE,a.DESCRIPT,a.TYPEOFCONTROL,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"CONTROL a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"DIVISION_b b SET(SID,DIVCODE,DESCRIPT,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.DIVCODE,a.DESCRIPT,a.GLPREFIX,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"DIVISION a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"LOCATION_b b SET(SID,LOCATION,DESCRIPT,COMPANYCODE,ADDRESSCODE,FLOOR,ROOM,RACK,PRINTMSTAT,PRINMTFLDT,EXCLUDE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.LOCATION,a.DESCRIPT,a.COMPANYCODE,a.ADDRESSCODE,a.FLOOR,a.ROOM,a.RACK,a.PRINTMSTAT,a.PRINMTFLDT,a.EXCLUDE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"LOCATION a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"RESIDENCY_b b SET(SID,RESIDENCY,DESCRIPT,MUNICIPALITY,PROVINCE,COUNTRYNAME,EXCLUDE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.RESIDENCY,a.DESCRIPT,a.MUNICIPALITY,a.PROVINCE,a.COUNTRYNAME,a.EXCLUDE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"RESIDENCY a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("update")+" "+bundle.getString("residency_b")+" "+bundle.getString("count")+" "+(updatedCount-countp),""));
countp=updatedCount;

sqlScript="UPDATE \""+schemaName+"\".\"ACCOUNT_b b SET(SID,ACCOUNT,DESCRIPT,CATEGORY,TYPE,BUDGET,ACTUAL,ACTUALN,PREVBUDG,PREVACT,SEQUENCE,CHILD,PARENT,ROLLUPQ,COMPANYCODE,DEPCODE,DIVCODE,STATUSFL,STATUSFLDT,CURRENCY,NOTES,OWNER,OWNER2,P0,P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P8T,P9T,P10T,P11T)=(a.SID,a.ACCOUNT,a.DESCRIPT,a.CATEGORY,a.TYPE,a.BUDGET,a.ACTUAL,a.ACTUALN,a.PREVBUDG,a.PREVACT,a.SEQUENCE,a.CHILD,a.PARENT,a.ROLLUPQ,a.COMPANYCODE,a.DEPCODE,a.DIVCODE,a.STATUSFL,a.STATUSFLDT,a.CURRENCY,a.NOTES,a.OWNER,a.OWNER2,a.P0,a.P1,a.P2,a.P3,a.P4,a.P5,a.P6,a.P7,a.P8,a.P9,a.P10,a.P11,a.P12,a.P13,a.P14,a.P8T,a.P9T,a.P10T,a.P11T)FROM \""+schemaName+"\".\"ACCOUNT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("update")+" "+bundle.getString("account_b")+" "+bundle.getString("count")+" "+(updatedCount-countp),""));
countp=updatedCount;

sqlScript="UPDATE \""+schemaName+"\".\"CUSTOMER_b b SET(SID,CUSTOMER,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,CUSTOMERASCOMPANYNAME,CUSTTOTL,CUSTTQTY,COMPANYCODE,LOCATION,MAILTOCODE,SHIPTOCODE,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,DOB,PLACEOFBIRTH,SEX,AGE,CUSRTOTL,CUSRTQTY,CUSMTOTL,CUSDTOTL,LASTORDER,LASTINVOIC,LASTPAYMNQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,TOTLPAID,CONTACTED,BYWHO,NXTCONTACT,VIA,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.CUSTOMER,a.DESCRIPT,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.CUSTOMERASCOMPANYNAME,a.CUSTTOTL,a.CUSTTQTY,a.COMPANYCODE,a.LOCATION,a.MAILTOCODE,a.SHIPTOCODE,a.TAX1,a.TAX2,a.TAX3,a.CUSTTAX1,a.CUSTTAX2,a.CUSTTAX3,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.DOB,a.PLACEOFBIRTH,a.SEX,a.AGE,a.CUSRTOTL,a.CUSRTQTY,a.CUSMTOTL,a.CUSDTOTL,a.LASTORDER,a.LASTINVOIC,a.LASTPAYMNQ,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.TYPE,a.DEFAULTGLAC,a.INTEGRSET,a.STATUSFL,a.STATUSFLDT,a.TOTLPAID,a.CONTACTED,a.BYWHO,a.NXTCONTACT,a.VIA,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"CUSTOMER a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"VENDOR_b b SET(SID,VENDOR,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,VENDORASCOMPANYNAME,VENDTOTL,VENDTQTY,COMPANYCODE,LOCATION,MAILTOCODE,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,VENRTOTL,VENRTQTY,VENMTOTL,VENDDTOTL,LASTQUOTE,LASTORDER,LASTINVOIC,LASTPAYMQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,SHIPTOCODE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,TOTLPAID,CONTACTED,BYWHO,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.VENDOR,a.DESCRIPT,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.VENDORASCOMPANYNAME,a.VENDTOTL,a.VENDTQTY,a.COMPANYCODE,a.LOCATION,a.MAILTOCODE,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.VENRTOTL,a.VENRTQTY,a.VENMTOTL,a.VENDDTOTL,a.LASTQUOTE,a.LASTORDER,a.LASTINVOIC,a.LASTPAYMQ,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.TYPE,a.SHIPTOCODE,a.DEFAULTGLAC,a.INTEGRSET,a.STATUSFL,a.STATUSFLDT,a.TOTLPAID,a.CONTACTED,a.BYWHO,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"VENDOR a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"EMPLOYEE_b b SET(SID,EMPLOYEE,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,COMPANYCODE,EMPLTOTL,EMPLTQTY,DIVCODE,DEPCODE,LOCATION,RESIDENCY,MAILTOCODE,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,EMPRTOTL,EMPRTQTY,EMPMTOTL,EMPDTOTL,LASTQUOTE,LASTORDER,LASTINVOIC,LASTPAYMQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,SHIPTOCODE,TYPE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,CONTACTED,BYWHO,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.EMPLOYEE,a.DESCRIPT,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.COMPANYCODE,a.EMPLTOTL,a.EMPLTQTY,a.DIVCODE,a.DEPCODE,a.LOCATION,a.RESIDENCY,a.MAILTOCODE,a.TAX1,a.TAX2,a.TAX3,a.CUSTTAX1,a.CUSTTAX2,a.CUSTTAX3,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.EMPRTOTL,a.EMPRTQTY,a.EMPMTOTL,a.EMPDTOTL,a.LASTQUOTE,a.LASTORDER,a.LASTINVOIC,a.LASTPAYMQ,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.SHIPTOCODE,a.TYPE,a.DEFAULTGLAC,a.INTEGRSET,a.STATUSFL,a.STATUSFLDT,a.CONTACTED,a.BYWHO,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"EMPLOYEE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"VCONTACT_b b SET(SID,CONTACT,VENDOR,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,LOCATION,MAILTOCODE,SHIPTOCODE,PRINTSTA,SHIPLABEL,TYPE,STATUSFL,STATUSFLDT,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.CONTACT,a.VENDOR,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.LOCATION,a.MAILTOCODE,a.SHIPTOCODE,a.PRINTSTA,a.SHIPLABEL,a.TYPE,a.STATUSFL,a.STATUSFLDT,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"VCONTACT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"CCONTACT_b b SET(SID,CONTACT,CUSTOMER,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,LOCATION,MAILTOCODE,SHIPTOCODE,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,STATUSFL,STATUSFLDT,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.CONTACT,a.CUSTOMER,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.TAX1,a.TAX2,a.TAX3,a.CUSTTAX1,a.CUSTTAX2,a.CUSTTAX3,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.LOCATION,a.MAILTOCODE,a.SHIPTOCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.TYPE,a.STATUSFL,a.STATUSFLDT,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"CCONTACT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"PERIODDATES_b b SET(SID,PERIOD,DESCRIPT,STARTDATE,ENDDATE,STARTOFWEEK,STARTOFBWEEK,ENDOFBWEEK,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PERIOD,a.DESCRIPT,a.STARTDATE,a.ENDDATE,a.STARTOFWEEK,a.STARTOFBWEEK,a.ENDOFBWEEK,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"PERIODDATES a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"ACPERIOD_b b SET(SID,ROWID,CURRPERIOD,DESCRIPT,CURRBUSDATE,CURRCALDATE,CURRLOCALDATE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.ROWID,a.CURRPERIOD,a.DESCRIPT,a.CURRBUSDATE,a.CURRCALDATE,a.CURRLOCALDATE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ACPERIOD a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"WAGEEARNER_b b SET(SID,WAGEEARNERID,EMPLOYEE,SIN,BIRTHDT,FEDCLAIM,PROVCLAIM,PAYYRFREQ,PAYPERIOD,WCB,WCBYTD,EMPLINSUR,INSYTD,VACRETAIN,VACATONYT,WAGEUNIT,WAGERATE,OTIMEUNIT,OTIMERATE,WAGEUNITS,OTIMUNITS,WAGEOUT,OVTIMEOUT,SALARYOUT,COMMISSION,BENEFITS,VACATION,VACPAYOUT,ADVANCE,PENSION,AFTERTAX,UNIONDUES,MEDICAL,FINCOMETX,PINCOMETX,THISPAYA,LASTPAYA,PAYYTD,FPENSIYTD,PPENSIYTD,ITAXYTD,PTAXYTD,GRPAYYTD,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.WAGEEARNERID,a.EMPLOYEE,a.SIN,a.BIRTHDT,a.FEDCLAIM,a.PROVCLAIM,a.PAYYRFREQ,a.PAYPERIOD,a.WCB,a.WCBYTD,a.EMPLINSUR,a.INSYTD,a.VACRETAIN,a.VACATONYT,a.WAGEUNIT,a.WAGERATE,a.OTIMEUNIT,a.OTIMERATE,a.WAGEUNITS,a.OTIMUNITS,a.WAGEOUT,a.OVTIMEOUT,a.SALARYOUT,a.COMMISSION,a.BENEFITS,a.VACATION,a.VACPAYOUT,a.ADVANCE,a.PENSION,a.AFTERTAX,a.UNIONDUES,a.MEDICAL,a.FINCOMETX,a.PINCOMETX,a.THISPAYA,a.LASTPAYA,a.PAYYTD,a.FPENSIYTD,a.PPENSIYTD,a.ITAXYTD,a.PTAXYTD,a.GRPAYYTD,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"WAGEEARNER a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ARTHATBL_b b SET(SID,USAGE,WCBPERCNT,INSFACTOR,VACATONRATE,PENSIONMAX,WCBMAX,INSMAX,ITAXLV0RATE,ITAXLV1RATE,ITAXLV2RATE,ITAXLV3RATE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.USAGE,a.WCBPERCNT,a.INSFACTOR,a.VACATONRATE,a.PENSIONMAX,a.WCBMAX,a.INSMAX,a.ITAXLV0RATE,a.ITAXLV1RATE,a.ITAXLV2RATE,a.ITAXLV3RATE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ARTHATBL a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"ROLLUPGROUP_b b SET(SID,GROUPID,DESCRIPT,TYPE,CURRPW,EXPIRY,CURRENCY,PERIOD0B,PERIOD0,PERIODTOTALSB,PERIODTOTALS,PERIOD1BUDGET,PERIOD1ACTUAL,PERIOD2B,PERIOD2,PERIOD3B,PERIOD3,PERIOD4B,PERIOD4,PERIOD5B,PERIOD5,PERIOD6B,PERIOD6,PERIOD7B,PERIOD7,PERIOD8B,PERIOD8,PERIOD9B,PERIOD9,PERIOD10B,PERIOD10,PERIOD11B,PERIOD11,PERIOD12B,PERIOD12,PERIODNB,PERIODN,NOTES,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.GROUPID,a.DESCRIPT,a.TYPE,a.CURRPW,a.EXPIRY,a.CURRENCY,a.PERIOD0B,a.PERIOD0,a.PERIODTOTALSB,a.PERIODTOTALS,a.PERIOD1BUDGET,a.PERIOD1ACTUAL,a.PERIOD2B,a.PERIOD2,a.PERIOD3B,a.PERIOD3,a.PERIOD4B,a.PERIOD4,a.PERIOD5B,a.PERIOD5,a.PERIOD6B,a.PERIOD6,a.PERIOD7B,a.PERIOD7,a.PERIOD8B,a.PERIOD8,a.PERIOD9B,a.PERIOD9,a.PERIOD10B,a.PERIOD10,a.PERIOD11B,a.PERIOD11,a.PERIOD12B,a.PERIOD12,a.PERIODNB,a.PERIODN,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ROLLUPGROUP a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"MEMBERSGROUP_b b SET(SID,GROUPID,DESCRIPT,QUANTITY,MODE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.GROUPID,a.DESCRIPT,a.QUANTITY,a.MODE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"membersgroup\" a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ARTHAHIST_b b SET(SID,WAGEEARNER,SIN,PERIOD,MONTH,CCYY,VACATION,WAGE,OVERTIME,SALARY,COMMISSION,BENEFIT,FINCOMETX,PINCOMETX,WCBOUT,EMPLINSUR,VACPAYOUT,ADVANCE,FPENSOBTX,FPENSOATX,UNIONDUES,MEDICAL,PAYAMT,NOTES,NOTES2,CHQNUMBER,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.WAGEEARNER,a.SIN,a.PERIOD,a.MONTH,a.CCYY,a.VACATION,a.WAGE,a.OVERTIME,a.SALARY,a.COMMISSION,a.BENEFIT,a.FINCOMETX,a.PINCOMETX,a.WCBOUT,a.EMPLINSUR,a.VACPAYOUT,a.ADVANCE,a.FPENSOBTX,a.FPENSOATX,a.UNIONDUES,a.MEDICAL,a.PAYAMT,a.NOTES,a.NOTES2,a.CHQNUMBER,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ARTHAHIST a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"HOLIDAY_b b SET(SID,SHOLIDAY,HOLIDAY,DESCRIPT,TYPE,STATUSFL,STATUSFLDT,EMPLOYEE,RESIDENCY,OWNER,OWNER2)=(a.SID,a.SHOLIDAY,a.HOLIDAY,a.DESCRIPT,a.TYPE,a.STATUSFL,a.STATUSFLDT,a.EMPLOYEE,a.RESIDENCY,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"HOLIDAY a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"ITEM_b b SET(SID,MATCODE,QUANTITY,DESCRIPT,DATEADDED,DATEEXPIRY,DATETORENEW,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,LOCATION,BARUPC)=(a.SID,a.MATCODE,a.QUANTITY,a.DESCRIPT,a.DATEADDED,a.DATEEXPIRY,a.DATETORENEW,a.SOURCE1,a.SOURCE2,a.UPCCODE,a.COST,a.REPLCOST,a.SELPRICE,a.SPRICOLD,a.SPRICNEW,a.SPRICEFFDT,a.SHIPCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.MISCCODE1,a.MISCCODE2,a.QTYLEVEL1,a.UNIT,a.CASEQTY,a.TYPE,a.TAX1,a.TAX2,a.TAX3,a.ALIASCODE,a.PARENTCODE,a.AVGPRICE,a.AVGCOST,a.STATUSFL,a.STATUSFLDT,a.SUBCODESN,a.SUBCODESN2,a.SUBCODESN3,a.CUORDQTY,a.VENORQTY,a.CUPICQTY,a.VENPIQTY,a.CUINVQTY,a.CUSHIQTY,a.VENSHQTY,a.EFFDATE,a.INTEGRSET,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2,a.LOCATION,a.BARUPC)FROM \""+schemaName+"\".\"ITEM a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ACTIVITY_b b SET(SID,ACTIVITYCODE,QUANTITY,DESCRIPT,DATE,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,BARUPC)=(a.SID,a.ACTIVITYCODE,a.QUANTITY,a.DESCRIPT,a.DATE,a.SOURCE1,a.SOURCE2,a.UPCCODE,a.COST,a.REPLCOST,a.SELPRICE,a.SPRICOLD,a.SPRICNEW,a.SPRICEFFDT,a.SHIPCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.MISCCODE1,a.MISCCODE2,a.QTYLEVEL1,a.UNIT,a.CASEQTY,a.TYPE,a.TAX1,a.TAX2,a.TAX3,a.ALIASCODE,a.PARENTCODE,a.AVGPRICE,a.AVGCOST,a.STATUSFL,a.STATUSFLDT,a.SUBCODESN,a.SUBCODESN2,a.SUBCODESN3,a.CUORDQTY,a.VENORQTY,a.CUPICQTY,a.VENPIQTY,a.CUINVQTY,a.CUSHIQTY,a.VENSHQTY,a.EFFDATE,a.INTEGRSET,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2,a.BARUPC)FROM \""+schemaName+"\".\"ACTIVITY a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"SCHEDULE_b b SET(SID,TODO,DESCRIPT,EMPLOYEE,SSDATET,ACTIVITYCODE,LOCATION,SDATET,DURATIONH,DURATIONM,STIMEH,STIMEM,STIMEAMPM,EDATET,PRIORITY,PERCNTDONE,VENDOR,VONTACT,CUSTOMER,TYPE,MAILTOCODE,OTHEREMPLO,REPEATF,STATUSFL,STATUSFLDT,PRIVATEIND,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.TODO,a.DESCRIPT,a.EMPLOYEE,a.SSDATET,a.ACTIVITYCODE,a.LOCATION,a.SDATET,a.DURATIONH,a.DURATIONM,a.STIMEH,a.STIMEM,a.STIMEAMPM,a.EDATET,a.PRIORITY,a.PERCNTDONE,a.VENDOR,a.VONTACT,a.CUSTOMER,a.TYPE,a.MAILTOCODE,a.OTHEREMPLO,a.REPEATF,a.STATUSFL,a.STATUSFLDT,a.PRIVATEIND,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"SCHEDULE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"USERPROFL_b b SET(SID,LOGONID,ROW,OPTION,SELECTVALUE,SCRCOLOR,HILCOLOR,TEXTCOLOR,BACCOLOR,BEEPSOU,CONFIRM,PROMPTI,P1,P2,P3,P4,P5,P6,MTSTYLE,STSTYLE,DTSTYLE,FTSTYLE,DEFAULTR,DEFAULTC,DBNAME,ROOTDIR,KEYORDER,MARGIN,FOOTER,LISTBUILDC,LISTBUILDV,LISTBUILDE,LISTBROWNC,LISTBROWNV,LISTBROWNE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.LOGONID,a.ROW,a.OPTION,a.SELECTVALUE,a.SCRCOLOR,a.HILCOLOR,a.TEXTCOLOR,a.BACCOLOR,a.BEEPSOU,a.CONFIRM,a.PROMPTI,a.P1,a.P2,a.P3,a.P4,a.P5,a.P6,a.MTSTYLE,a.STSTYLE,a.DTSTYLE,a.FTSTYLE,a.DEFAULTR,a.DEFAULTC,a.DBNAME,a.ROOTDIR,a.KEYORDER,a.MARGIN,a.FOOTER,a.LISTBUILDC,a.LISTBUILDV,a.LISTBUILDE,a.LISTBROWNC,a.LISTBROWNV,a.LISTBROWNE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"USERPROFL a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"USER_b b SET(SID,ID,CLIENT,EMPLOYEE,VENDOR,CUSTOMER,OTHERID,ALEVEL,BLEVEL,CURRPW,EXPIRY,OLDPW,TEMPORARYPASSWORD,PASSWORDHASH,ACTIVATIONKEY,RESTRICT1,RESTRICT2,RESTRICT3,ALLOW1,ALLOW2,ALLOW3,MAXPROFLROW,CPROFLROW,STATUSFL,STATUSFLDT,UCURRCALDA,PREPROCESS,NOTES,DOCMNT,OWNER,OWNER2)=(a.SID,a.ID,a.CLIENT,a.EMPLOYEE,a.VENDOR,a.CUSTOMER,a.OTHERID,a.ALEVEL,a.BLEVEL,a.CURRPW,a.EXPIRY,a.OLDPW,a.TEMPORARYPASSWORD,a.PASSWORDHASH,a.ACTIVATIONKEY,a.RESTRICT1,a.RESTRICT2,a.RESTRICT3,a.ALLOW1,a.ALLOW2,a.ALLOW3,a.MAXPROFLROW,a.CPROFLROW,a.STATUSFL,a.STATUSFLDT,a.UCURRCALDA,a.PREPROCESS,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"user a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"VENARTHA_b b SET(SID,CHQNUMBER,RECONCILED,VENDORC,DATE,ADDRESCODE,CHQAMT,AMTVERBOS,NOTES,ADVISEL1,ADVISEL2,ADVISEL3,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.CHQNUMBER,a.RECONCILED,a.VENDORC,a.DATE,a.ADDRESCODE,a.CHQAMT,a.AMTVERBOS,a.NOTES,a.ADVISEL1,a.ADVISEL2,a.ADVISEL3,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"VENARTHA a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"ACINTEGR_b b SET(SID,MODULEID,USAGEDESCR,USAGECODE,SETSID,ACCOUNT,EXTRAINTFIELD,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.MODULEID,a.USAGEDESCR,a.USAGECODE,a.SETSID,a.ACCOUNT,a.EXTRAINTFIELD,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ACINTEGR a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"ITEMJOB_b b SET(SID,JOBNO,MATCODE,PRODDATET,QTYALLOC,PONO,QTYOSTND,QTYALSTK,QTYISSUD,JOBTOTL,STATUSFL,CUSTOMEJ,VENDOR,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,PRINTMSTATJ,PRINMTFLDTJ,TYPE,MATCODEOUT,QTYOUT,NOTES,OWNER,OWNER2)=(a.SID,a.JOBNO,a.MATCODE,a.PRODDATET,a.QTYALLOC,a.PONO,a.QTYOSTND,a.QTYALSTK,a.QTYISSUD,a.JOBTOTL,a.STATUSFL,a.CUSTOMEJ,a.VENDOR,a.STATUSFLDT,a.PRINTMSTAT,a.PRINMTFLDT,a.PRINTMSTATJ,a.PRINMTFLDTJ,a.TYPE,a.MATCODEOUT,a.QTYOUT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ITEMJOB a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"ACTIVITYJOB_b b SET(SID,JOBNO,ACTIVITYCODE,PRODDATET,QTYALLOC,PONO,QTYOSTND,QTYALSTK,QTYISSUD,JOBTOTL,STATUSFL,CUSTOMEJ,VENDOR,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,PRINTMSTATJ,PRINMTFLDTJ,TYPE,MATCODEOUT,QTYOUT,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.JOBNO,a.ACTIVITYCODE,a.PRODDATET,a.QTYALLOC,a.PONO,a.QTYOSTND,a.QTYALSTK,a.QTYISSUD,a.JOBTOTL,a.STATUSFL,a.CUSTOMEJ,a.VENDOR,a.STATUSFLDT,a.PRINTMSTAT,a.PRINMTFLDT,a.PRINTMSTATJ,a.PRINMTFLDTJ,a.TYPE,a.MATCODEOUT,a.QTYOUT,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"ACTIVITYJOB a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"PROCESSATTRIBUTES_b b SET(SID,PDETAILS,NAME,VALUE,TYPE,RANGE,STEP,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PDETAILS,a.NAME,a.VALUE,a.TYPE,a.RANGE,a.STEP,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"PROCESSATTRIBUTES a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"PROCESSDETAILS_b b SET(SID,PROCESS,CPONO,MATCODE,CUSTOMER,SDATET,DURATIONH,DURATIONM,STIMEH,STIMEM,STIMEAMPM,EDATET,PRIORITY,PERCNTDONE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PROCESS,a.CPONO,a.MATCODE,a.CUSTOMER,a.SDATET,a.DURATIONH,a.DURATIONM,a.STIMEH,a.STIMEM,a.STIMEAMPM,a.EDATET,a.PRIORITY,a.PERCNTDONE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"PROCESSDETAILS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"VENQUOTE_b b SET(SID,PURCHSNO,DELVDATET,VENDOR,MATCODE,REPLICATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,CINVOICE,JOBNO,VPONO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.VENDOR,a.MATCODE,a.REPLICATE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.CINVOICE,a.JOBNO,a.VPONO,a.RFPORD,a.STATUSFLDT,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.SHIPCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"VENQUOTE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"VENDORDERS_b b SET(SID,PURCHSNO,DELVDATET,VENDOR,MATCODE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,JOBNO,VENDQNO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.VENDOR,a.MATCODE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.JOBNO,a.VENDQNO,a.RFPORD,a.STATUSFLDT,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.SHIPCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"VENDORDERS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"VSHIPMEN_b b SET(SID,SHIPCODE,MATCODE,SHIPPER,PONO,CPONO,INVOICE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,CARRIER,TYPE,SHIPDATET,SHIPDATETA,TARENO,PACKNO,VENDOR,CUSTOMER,BILLTOCODE,BILLTOSAMEASSHIPTO,SHIPTOCODE,NOTES,STATUSFL,STATUSFLDT,SERIALNO,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2)=(a.SID,a.SHIPCODE,a.MATCODE,a.SHIPPER,a.PONO,a.CPONO,a.INVOICE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.CARRIER,a.TYPE,a.SHIPDATET,a.SHIPDATETA,a.TARENO,a.PACKNO,a.VENDOR,a.CUSTOMER,a.BILLTOCODE,a.BILLTOSAMEASSHIPTO,a.SHIPTOCODE,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.SERIALNO,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"VSHIPMEN a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"CUQUOTE_b b SET(SID,PURCHSNO,DELVDATET,VENDOR,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,CUSTOMER,MATCODE,REPLICATE,CINVOICE,ORDPRICE,JOBNO,VPONO,QUOORDT,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,TYPE,TERMS,PRIORITY,ODATET,SHIPCODE,ACTIVITYCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,ATTACH,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.VENDOR,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.CUSTOMER,a.MATCODE,a.REPLICATE,a.CINVOICE,a.ORDPRICE,a.JOBNO,a.VPONO,a.QUOORDT,a.STATUSFLDT,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.TERMS,a.PRIORITY,a.ODATET,a.SHIPCODE,a.ACTIVITYCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.ATTACH,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"cuquote\" a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"CUORDERS_b b SET(SID,PURCHSNO,DELVDATET,CUSTOMER,MATCODE,CUQUOTE,CINVOICE,JOBNO,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,VPONO,RFPORD,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,DOCMNT,SHIPCODEFROMPAY,SHIPCODE,BARPO)=(a.SID,a.PURCHSNO,a.DELVDATET,a.CUSTOMER,a.MATCODE,a.CUQUOTE,a.CINVOICE,a.JOBNO,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.VPONO,a.RFPORD,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT,a.SHIPCODEFROMPAY,a.SHIPCODE,a.BARPO)FROM \""+schemaName+"\".\"CUORDERS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"CUINVOICE_b b SET(SID,INVOICE,CUSTOMER,MATCODE,INVODATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,PONO,REF1TYP,REF1CODE,SHIPDATET,SHIPTYPE,SHIPCODE,TERMS,STATUSFL,STATUSFLDT,TERMSDAT,DISCOUNP,DISCOUDT,DISCOUDS,NETDDAT,NETDDYS,FOB,TYPE,INTEGRSET,ATTACH,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,AGENT,NOTES,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,DOCMNT,BARINVOICE)=(a.SID,a.INVOICE,a.CUSTOMER,a.MATCODE,a.INVODATE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.PONO,a.REF1TYP,a.REF1CODE,a.SHIPDATET,a.SHIPTYPE,a.SHIPCODE,a.TERMS,a.STATUSFL,a.STATUSFLDT,a.TERMSDAT,a.DISCOUNP,a.DISCOUDT,a.DISCOUDS,a.NETDDAT,a.NETDDYS,a.FOB,a.TYPE,a.INTEGRSET,a.ATTACH,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.AGENT,a.NOTES,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2,a.DOCMNT,a.BARINVOICE)FROM \""+schemaName+"\".\"CUINVOICE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"SHIPMENT_b b SET(SID,SHIPCODE,MATCODE,SHIPPER,PONO,CPONO,INVOICE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,CARRIER,TYPE,SHIPDATET,SHIPDATETA,TARENO,PACKNO,CUSTOMER,BILLTOCODE,BILLTOSAMEASSHIPTO,SHIPTOCODE,NOTES,STATUSFL,STATUSFLDT,SERIALNO,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,BARSHIPCOD)=(a.SID,a.SHIPCODE,a.MATCODE,a.SHIPPER,a.PONO,a.CPONO,a.INVOICE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.CARRIER,a.TYPE,a.SHIPDATET,a.SHIPDATETA,a.TARENO,a.PACKNO,a.CUSTOMER,a.BILLTOCODE,a.BILLTOSAMEASSHIPTO,a.SHIPTOCODE,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.SERIALNO,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2,a.BARSHIPCOD)FROM \""+schemaName+"\".\"SHIPMENT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"EMPLORDERS_b b SET(SID,PURCHSNO,DELVDATET,EMPLOYEE,MATCODE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,JOBNO,VPONO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.EMPLOYEE,a.MATCODE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.JOBNO,a.VPONO,a.RFPORD,a.STATUSFLDT,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.SHIPCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"EMPLORDERS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"HLOGFILE_b b SET(SID,SERIALNO,MATCODE,QUANRECD,VENDOR,LOCATION,RECVRPT,INFLG,PHY,DATETIN,DATETOUT,JOBNO,PRINTMSTAT,PRINMTFLDT,PONO,SCANDATET,QUANISSD,BUTT,STATUSFL,QUANREJD,CUSTOMER,CPONO,CUSTOMEJ,ORGCOST,ORGPONO,ORGJOBNO,ALTSERNO,SELPRICE,PHYSQTY,SPERSON,CARTONID,CARTONPR,PACKCODE,TARECODE,SHIPCODE,TYPE,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.SERIALNO,a.MATCODE,a.QUANRECD,a.VENDOR,a.LOCATION,a.RECVRPT,a.INFLG,a.PHY,a.DATETIN,a.DATETOUT,a.JOBNO,a.PRINTMSTAT,a.PRINMTFLDT,a.PONO,a.SCANDATET,a.QUANISSD,a.BUTT,a.STATUSFL,a.QUANREJD,a.CUSTOMER,a.CPONO,a.CUSTOMEJ,a.ORGCOST,a.ORGPONO,a.ORGJOBNO,a.ALTSERNO,a.SELPRICE,a.PHYSQTY,a.SPERSON,a.CARTONID,a.CARTONPR,a.PACKCODE,a.TARECODE,a.SHIPCODE,a.TYPE,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"HLOGFILE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"CPAYMENT_b b SET(SID,PAYMENT,CUSTOMER,CINVOICE,CHEQDATE,PAYMENTDUEDATE,POSTINGPERIOD,MATCODE,INTEGRSET,ACCOUNT,AMOUNTTOTAL,AMOUNTOSTNDT,AMOUNTIN,QTYTOTAL,QTYOSTNDT,DISCOUNT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,PAYTYPE,PAYBYID,PAYBYDATE,CURRENCY,CONVRATE,LOCAMOUNTT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PAYMENT,a.CUSTOMER,a.CINVOICE,a.CHEQDATE,a.PAYMENTDUEDATE,a.POSTINGPERIOD,a.MATCODE,a.INTEGRSET,a.ACCOUNT,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.AMOUNTIN,a.QTYTOTAL,a.QTYOSTNDT,a.DISCOUNT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.PAYTYPE,a.PAYBYID,a.PAYBYDATE,a.CURRENCY,a.CONVRATE,a.LOCAMOUNTT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"CPAYMENT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"MACHINE_b b SET(SID,MACHINECODE,QUANTITY,DESCRIPT,DATEADDED,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,BARUPC)=(a.SID,a.MACHINECODE,a.QUANTITY,a.DESCRIPT,a.DATEADDED,a.SOURCE1,a.SOURCE2,a.UPCCODE,a.COST,a.REPLCOST,a.SELPRICE,a.SPRICOLD,a.SPRICNEW,a.SPRICEFFDT,a.SHIPCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.MISCCODE1,a.MISCCODE2,a.QTYLEVEL1,a.UNIT,a.CASEQTY,a.TYPE,a.TAX1,a.TAX2,a.TAX3,a.ALIASCODE,a.PARENTCODE,a.AVGPRICE,a.AVGCOST,a.STATUSFL,a.STATUSFLDT,a.SUBCODESN,a.SUBCODESN2,a.SUBCODESN3,a.CUORDQTY,a.VENORQTY,a.CUPICQTY,a.VENPIQTY,a.CUINVQTY,a.CUSHIQTY,a.VENSHQTY,a.EFFDATE,a.INTEGRSET,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2,a.BARUPC)FROM \""+schemaName+"\".\"MACHINE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"GROUPMEMBERS_b b SET(SID,GROUPID,MEMBERID,DESCRIPT,SOURCETYPE,MEMBEREM,MEMBERCU,MEMBERVE,MEMBERIT,MEMBERAC,MEMBERMA,TYPE,CURRPW,EXPIRY,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.GROUPID,a.MEMBERID,a.DESCRIPT,a.SOURCETYPE,a.MEMBEREM,a.MEMBERCU,a.MEMBERVE,a.MEMBERIT,a.MEMBERAC,a.MEMBERMA,a.TYPE,a.CURRPW,a.EXPIRY,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"GROUPMEMBERS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"ITEMBOM_b b SET(SID,BOMCODE,DESCRIPT,QUANTITY,MODE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.BOMCODE,a.DESCRIPT,a.QUANTITY,a.MODE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ITEMBOM a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"ITEMBOMDETAILS_b b SET(SID,BOMCODE,MATCODE,MODE,SUBQTY,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.BOMCODE,a.MATCODE,a.MODE,a.SUBQTY,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"ITEMBOMDETAILS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"TASK_b b SET(SID,TASKID,DESCRIPT,ACTIVITYCODE,PROJECTTEAM,RESOURCE,MODE,ESTSTART,CALCSTART,ACTLSTART,ESTEND,CALCEND,ACTLEND,SUBQTY,BOMCODE,LOCATION,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.TASKID,a.DESCRIPT,a.ACTIVITYCODE,a.PROJECTTEAM,a.RESOURCE,a.MODE,a.ESTSTART,a.CALCSTART,a.ACTLSTART,a.ESTEND,a.CALCEND,a.ACTLEND,a.SUBQTY,a.BOMCODE,a.LOCATION,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"TASK a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"VINVOICE_b b SET(SID,INVOICE,VENDOR,MATCODE,INTEGRSET,INVODATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,PONO,REF1TYP,REF1CODE,SHIPDATET,SHIPTYPE,SHIPCODE,TERMS,STATUSFL,STATUSFLDT,TERMSDAT,DISCOUNP,DISCOUDT,DISCOUDS,NETDDAT,NETDDYS,FOB,TYPE,ATTACH,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,AGENT,NOTES,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,DOCMNT)=(a.SID,a.INVOICE,a.VENDOR,a.MATCODE,a.INTEGRSET,a.INVODATE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.PONO,a.REF1TYP,a.REF1CODE,a.SHIPDATET,a.SHIPTYPE,a.SHIPCODE,a.TERMS,a.STATUSFL,a.STATUSFLDT,a.TERMSDAT,a.DISCOUNP,a.DISCOUDT,a.DISCOUDS,a.NETDDAT,a.NETDDYS,a.FOB,a.TYPE,a.ATTACH,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.AGENT,a.NOTES,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2,a.DOCMNT)FROM \""+schemaName+"\".\"VINVOICE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"VPAYMENT_b b SET(SID,PAYMENT,VENDOR,VINVOICE,CHEQDATE,PAYMENTDUEDATE,POSTINGPERIOD,MATCODE,INTEGRSET,ACCOUNT,AMOUNTTOTAL,AMOUNTOSTNDT,AMOUNTIN,QTYTOTAL,QTYOSTNDT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,DISCOUNT,PAYTYPE,PAYBYID,PAYBYDATE,CURRENCY,CONVRATE,LOCAMOUNT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PAYMENT,a.VENDOR,a.VINVOICE,a.CHEQDATE,a.PAYMENTDUEDATE,a.POSTINGPERIOD,a.MATCODE,a.INTEGRSET,a.ACCOUNT,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.AMOUNTIN,a.QTYTOTAL,a.QTYOSTNDT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.DISCOUNT,a.PAYTYPE,a.PAYBYID,a.PAYBYDATE,a.CURRENCY,a.CONVRATE,a.LOCAMOUNT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"VPAYMENT a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"WAGEEARNERAUX_b b SET(SID,WAGEEARNERID,LINE,SIN,WCBYTDL,WCBYTDN,INSYTDL,INSYTDN,VACATONYL,VACATONYN,PAYYTDL,FPENSIYTL,PPENSIYTL,ITAXYTDL,PTAXYTDL,PAYYTDN,FPENSIYTN,PPENSIYTN,ITAXYTDN,PATXYTDN,GPAYYTDL,GPAYYTDN,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.WAGEEARNERID,a.LINE,a.SIN,a.WCBYTDL,a.WCBYTDN,a.INSYTDL,a.INSYTDN,a.VACATONYL,a.VACATONYN,a.PAYYTDL,a.FPENSIYTL,a.PPENSIYTL,a.ITAXYTDL,a.PTAXYTDL,a.PAYYTDN,a.FPENSIYTN,a.PPENSIYTN,a.ITAXYTDN,a.PATXYTDN,a.GPAYYTDL,a.GPAYYTDN,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"WAGEEARNERAUX a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"Rgenapp_b b SET(SID,APPNAME,DESCRIPT,APPTYPE,APPWACCOUNTING,APPWEMAIL,APPWJMSMQ,APPVENDOR,APPVERSION,APPPLATFORM,APPMODELPKG,APPACTIONPKG,APPSKIN,APPDEPLOYTYPE,CREATEFIDATA,REVENGDATA,INITIALIZEFIDATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.APPNAME,a.DESCRIPT,a.APPTYPE,a.APPWACCOUNTING,a.APPWEMAIL,a.APPWJMSMQ,a.APPVENDOR,a.APPVERSION,a.APPPLATFORM,a.APPMODELPKG,a.APPACTIONPKG,a.APPSKIN,a.APPDEPLOYTYPE,a.CREATEFIDATA,a.REVENGDATA,a.INITIALIZEFIDATA,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"rgenapp\" a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"RGENDB_b b SET(SID,DBNAME,DESCRIPT,DBTYPE,DBVENDOR,DBVERSION,DBPLATFORM,APPCODE,SQLDRIVER,SQLURL,SQLUSER,SQLPASSWORD,SQLCLASSPATH,SQLCREATEDBSCRIPT,SQLDROPDBSCRIPT,SQLCREATETBLSSCRIPT,SQLLOADTBLSSCRIPT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.DBNAME,a.DESCRIPT,a.DBTYPE,a.DBVENDOR,a.DBVERSION,a.DBPLATFORM,a.APPCODE,a.SQLDRIVER,a.SQLURL,a.SQLUSER,a.SQLPASSWORD,a.SQLCLASSPATH,a.SQLCREATEDBSCRIPT,a.SQLDROPDBSCRIPT,a.SQLCREATETBLSSCRIPT,a.SQLLOADTBLSSCRIPT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"rgendb\" a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"RGENTABLE_b b SET(SID,TABLENAME,DBCODE,INADDMENU,INLISTMENU,INTRANSACTIONMENU,INREPORTMENU,INGRAPHSMENU,INMAILINGMENU,INGENERATEMENU,INADMINMENU,INMAINTENANCEMENU,INLABELSMENU,INSKIPMENU,INCUSTOM1MENU,MENULEVEL,MENUROLE,MENULABELGROUP,SUBMENUSEQUENCE,USAGESCOPE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.TABLENAME,a.DBCODE,a.INADDMENU,a.INLISTMENU,a.INTRANSACTIONMENU,a.INREPORTMENU,a.INGRAPHSMENU,a.INMAILINGMENU,a.INGENERATEMENU,a.INADMINMENU,a.INMAINTENANCEMENU,a.INLABELSMENU,a.INSKIPMENU,a.INCUSTOM1MENU,a.MENULEVEL,a.MENUROLE,a.MENULABELGROUP,a.SUBMENUSEQUENCE,a.USAGESCOPE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"RGENTABLE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE \""+schemaName+"\".\"RGENFIELDS_b b SET(SID,DBCODE,TABLENAME,FIELDNAME,FIELDTYPE,FIELDLENGTH,INGROUP,SEQWITHINGROUP,FOCUSSEQ,FUTURE1,INITIALVALUE,KEYORADDITIONAL,KEYORADDITIONAL2,KEYORADDITIONAL3,SHOWINMENU,SHOWINREPORT,PROCESSOPTION1,PROCESSOPTION2,FDBCODE,FTABLENAME,FFIELDKEYNAME1,FFIELDKEYNAME2,FFIELDKEYNAME3,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.DBCODE,a.TABLENAME,a.FIELDNAME,a.FIELDTYPE,a.FIELDLENGTH,a.INGROUP,a.SEQWITHINGROUP,a.FOCUSSEQ,a.FUTURE1,a.INITIALVALUE,a.KEYORADDITIONAL,a.KEYORADDITIONAL2,a.KEYORADDITIONAL3,a.SHOWINMENU,a.SHOWINREPORT,a.PROCESSOPTION1,a.PROCESSOPTION2,a.FDBCODE,a.FTABLENAME,a.FFIELDKEYNAME1,a.FFIELDKEYNAME2,a.FFIELDKEYNAME3,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"RGENFIELDS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"GENOPTIONS_b b SET(SID,ROW,GENOPTIONS01,GENPURPOSE01,GENVALUE01,GENOPTIONS02,GENPURPOSE02,GENVALUE02,GENOPTIONS03,GENPURPOSE03,GENVALUE03,GENOPTIONS04,GENPURPOSE04,GENVALUE04,GENOPTIONS05,GENPURPOSE05,GENVALUE05,GENOPTIONS06,GENPURPOSE06,GENVALUE06,GENOPTIONS07,GENPURPOSE07,GENVALUE07,GENOPTIONS08,GENPURPOSE08,GENVALUE08,GENOPTIONS09,GENPURPOSE09,GENVALUE09,GENOPTIONS10,GENPURPOSE10,GENVALUE10,GENOPTIONS11,GENPURPOSE11,GENVALUE11,GENOPTIONS12,GENPURPOSE12,GENVALUE12,GENOPTIONS13,GENPURPOSE13,GENVALUE13,GENOPTIONS14,GENPURPOSE14,GENVALUE14,GENOPTIONS15,GENPURPOSE15,GENVALUE15,GENOPTIONS16,GENPURPOSE16,GENVALUE16,GENOPTIONS17,GENPURPOSE17,GENVALUE17,GENOPTIONS18,GENPURPOSE18,GENVALUE18,GENOPTIONS19,GENPURPOSE19,GENVALUE19,GENOPTIONS20,GENPURPOSE20,GENVALUE20,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.ROW,a.GENOPTIONS01,a.GENPURPOSE01,a.GENVALUE01,a.GENOPTIONS02,a.GENPURPOSE02,a.GENVALUE02,a.GENOPTIONS03,a.GENPURPOSE03,a.GENVALUE03,a.GENOPTIONS04,a.GENPURPOSE04,a.GENVALUE04,a.GENOPTIONS05,a.GENPURPOSE05,a.GENVALUE05,a.GENOPTIONS06,a.GENPURPOSE06,a.GENVALUE06,a.GENOPTIONS07,a.GENPURPOSE07,a.GENVALUE07,a.GENOPTIONS08,a.GENPURPOSE08,a.GENVALUE08,a.GENOPTIONS09,a.GENPURPOSE09,a.GENVALUE09,a.GENOPTIONS10,a.GENPURPOSE10,a.GENVALUE10,a.GENOPTIONS11,a.GENPURPOSE11,a.GENVALUE11,a.GENOPTIONS12,a.GENPURPOSE12,a.GENVALUE12,a.GENOPTIONS13,a.GENPURPOSE13,a.GENVALUE13,a.GENOPTIONS14,a.GENPURPOSE14,a.GENVALUE14,a.GENOPTIONS15,a.GENPURPOSE15,a.GENVALUE15,a.GENOPTIONS16,a.GENPURPOSE16,a.GENVALUE16,a.GENOPTIONS17,a.GENPURPOSE17,a.GENVALUE17,a.GENOPTIONS18,a.GENPURPOSE18,a.GENVALUE18,a.GENOPTIONS19,a.GENPURPOSE19,a.GENVALUE19,a.GENOPTIONS20,a.GENPURPOSE20,a.GENVALUE20,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"GENOPTIONS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"BLOBDATA_b b SET(SID,FROMTABLE,FROMKEY,QUALIFIER,SEQUENCE,TYPE,DATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.FROMTABLE,a.FROMKEY,a.QUALIFIER,a.SEQUENCE,a.TYPE,a.DATA,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"BLOBDATA a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"CLOBDATA_b b SET(SID,FROMTABLE,FROMKEY,QUALIFIER,SEQUENCE,TYPE,DATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.FROMTABLE,a.FROMKEY,a.QUALIFIER,a.SEQUENCE,a.TYPE,a.DATA,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"CLOBDATA a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"CONTROLUSAGEBYPERIODS_b b SET(SID,CTLUSAGETRACKERID,DESCRIPT,CONTROLCODE,CURRENCY,PERIOD0LABEL,PERIOD0B,PERIOD0,PERIODTOTALSLABEL,PERIODTOTALSB,PERIODTOTALS,PERIOD1LABEL,PERIOD1BUDGET,PERIOD1ACTUAL,PERIOD2LABEL,PERIOD2B,PERIOD2,PERIOD3LABEL,PERIOD3B,PERIOD3,PERIOD4LABEL,PERIOD4B,PERIOD4,PERIOD5LABEL,PERIOD5B,PERIOD5,PERIOD6LABEL,PERIOD6B,PERIOD6,PERIOD7LABEL,PERIOD7B,PERIOD7,PERIOD8LABEL,PERIOD8B,PERIOD8,PERIOD9LABEL,PERIOD9B,PERIOD9,PERIOD10LABEL,PERIOD10B,PERIOD10,PERIOD11LABEL,PERIOD11B,PERIOD11,PERIOD12LABEL,PERIOD12B,PERIOD12,PERIODNLABEL,PERIODNB,PERIODN,NOTES,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.CTLUSAGETRACKERID,a.DESCRIPT,a.CONTROLCODE,a.CURRENCY,a.PERIOD0LABEL,a.PERIOD0B,a.PERIOD0,a.PERIODTOTALSLABEL,a.PERIODTOTALSB,a.PERIODTOTALS,a.PERIOD1LABEL,a.PERIOD1BUDGET,a.PERIOD1ACTUAL,a.PERIOD2LABEL,a.PERIOD2B,a.PERIOD2,a.PERIOD3LABEL,a.PERIOD3B,a.PERIOD3,a.PERIOD4LABEL,a.PERIOD4B,a.PERIOD4,a.PERIOD5LABEL,a.PERIOD5B,a.PERIOD5,a.PERIOD6LABEL,a.PERIOD6B,a.PERIOD6,a.PERIOD7LABEL,a.PERIOD7B,a.PERIOD7,a.PERIOD8LABEL,a.PERIOD8B,a.PERIOD8,a.PERIOD9LABEL,a.PERIOD9B,a.PERIOD9,a.PERIOD10LABEL,a.PERIOD10B,a.PERIOD10,a.PERIOD11LABEL,a.PERIOD11B,a.PERIOD11,a.PERIOD12LABEL,a.PERIOD12B,a.PERIOD12,a.PERIODNLABEL,a.PERIODNB,a.PERIODN,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"CONTROLUSAGEBYPERIODS a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE \""+schemaName+"\".\"RESOURCE_BUNDLE_b b SET(SID,NAME,LANGUAGE,COUNTRY,VARIANT,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.NAME,a.LANGUAGE,a.COUNTRY,a.VARIANT,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"RESOURCE_BUNDLE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"RESOURCE_b b SET(SID,_KEY,_VALUE,RESOURCEBUNDLE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a._KEY,a._VALUE,a.RESOURCEBUNDLE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"resource\" a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"TRUEFALSE_b b SET(SID,TABLENAME,QUALIFIER,SHOW001,SHOW002,SHOW003,SHOW004,SHOW005,SHOW006,SHOW007,SHOW008,SHOW009,SHOW010,SHOW011,SHOW012,SHOW013,SHOW014,SHOW015,SHOW016,SHOW017,SHOW018,SHOW019,SHOW020,SHOW021,SHOW022,SHOW023,SHOW024,SHOW025,SHOW026,SHOW027,SHOW028,SHOW029,SHOW030,SHOW031,SHOW032,SHOW033,SHOW034,SHOW035,SHOW036,SHOW037,SHOW038,SHOW039,SHOW040,SHOW041,SHOW042,SHOW043,SHOW044,SHOW045,SHOW046,SHOW047,SHOW048,SHOW049,SHOW050,SHOW051,SHOW052,SHOW053,SHOW054,SHOW055,SHOW056,SHOW057,SHOW058,SHOW059,SHOW060,SHOW061,SHOW062,SHOW063,SHOW064,SHOW065,SHOW066,SHOW067,SHOW068,SHOW069,SHOW070,SHOW071,SHOW072,SHOW073,SHOW074,SHOW075,SHOW076,SHOW077,SHOW078,SHOW079,SHOW080,SHOW081,SHOW082,SHOW083,SHOW084,SHOW085,SHOW086,SHOW087,SHOW088,SHOW089,SHOW090,SHOW091,SHOW092,SHOW093,SHOW094,SHOW095,SHOW096,SHOW097,SHOW098,SHOW099,SHOW100,SHOW101,SHOW102,SHOW103,SHOW104,SHOW105,SHOW106,SHOW107,SHOW108,SHOW109,SHOW110,SHOW111,SHOW112,SHOW113,SHOW114,SHOW115,SHOW116,SHOW117,SHOW118,SHOW119,SHOW120,SHOW121,SHOW122,SHOW123,SHOW124,SHOW125,SHOW126,SHOW127,SHOW128,SHOW129,SHOW130,SHOW131,SHOW132,SHOW133,SHOW134,SHOW135,SHOW136,SHOW137,SHOW138,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.TABLENAME,a.QUALIFIER,a.SHOW001,a.SHOW002,a.SHOW003,a.SHOW004,a.SHOW005,a.SHOW006,a.SHOW007,a.SHOW008,a.SHOW009,a.SHOW010,a.SHOW011,a.SHOW012,a.SHOW013,a.SHOW014,a.SHOW015,a.SHOW016,a.SHOW017,a.SHOW018,a.SHOW019,a.SHOW020,a.SHOW021,a.SHOW022,a.SHOW023,a.SHOW024,a.SHOW025,a.SHOW026,a.SHOW027,a.SHOW028,a.SHOW029,a.SHOW030,a.SHOW031,a.SHOW032,a.SHOW033,a.SHOW034,a.SHOW035,a.SHOW036,a.SHOW037,a.SHOW038,a.SHOW039,a.SHOW040,a.SHOW041,a.SHOW042,a.SHOW043,a.SHOW044,a.SHOW045,a.SHOW046,a.SHOW047,a.SHOW048,a.SHOW049,a.SHOW050,a.SHOW051,a.SHOW052,a.SHOW053,a.SHOW054,a.SHOW055,a.SHOW056,a.SHOW057,a.SHOW058,a.SHOW059,a.SHOW060,a.SHOW061,a.SHOW062,a.SHOW063,a.SHOW064,a.SHOW065,a.SHOW066,a.SHOW067,a.SHOW068,a.SHOW069,a.SHOW070,a.SHOW071,a.SHOW072,a.SHOW073,a.SHOW074,a.SHOW075,a.SHOW076,a.SHOW077,a.SHOW078,a.SHOW079,a.SHOW080,a.SHOW081,a.SHOW082,a.SHOW083,a.SHOW084,a.SHOW085,a.SHOW086,a.SHOW087,a.SHOW088,a.SHOW089,a.SHOW090,a.SHOW091,a.SHOW092,a.SHOW093,a.SHOW094,a.SHOW095,a.SHOW096,a.SHOW097,a.SHOW098,a.SHOW099,a.SHOW100,a.SHOW101,a.SHOW102,a.SHOW103,a.SHOW104,a.SHOW105,a.SHOW106,a.SHOW107,a.SHOW108,a.SHOW109,a.SHOW110,a.SHOW111,a.SHOW112,a.SHOW113,a.SHOW114,a.SHOW115,a.SHOW116,a.SHOW117,a.SHOW118,a.SHOW119,a.SHOW120,a.SHOW121,a.SHOW122,a.SHOW123,a.SHOW124,a.SHOW125,a.SHOW126,a.SHOW127,a.SHOW128,a.SHOW129,a.SHOW130,a.SHOW131,a.SHOW132,a.SHOW133,a.SHOW134,a.SHOW135,a.SHOW136,a.SHOW137,a.SHOW138,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"TRUEFALSE a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE \""+schemaName+"\".\"RATE1F_b b SET(SID,USERTYPE,PRODTYPE,STEPNAME,STEP,VALUE,EFFDATE,ENDDATE,INCENTIVE,IEFFDATE,IENDDATE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.USERTYPE,a.PRODTYPE,a.STEPNAME,a.STEP,a.VALUE,a.EFFDATE,a.ENDDATE,a.INCENTIVE,a.IEFFDATE,a.IENDDATE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM \""+schemaName+"\".\"RATE1F a where((a.sid=b.sid\") AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("removed")+": "+deletedCount+" "+ bundle.getString("updated")+": "+updatedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));



// update client record field carcsize to show last backupdate as a varchar
     sqlScript="update \""+schemaName+"\".\"client set carcsize=:backupdts where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2Code", owner2Code).setParameter("backupdts", sdf.format(calendar.getTime()));
      q.executeUpdate();
} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));

}



	 return "backUp done";
}










}

