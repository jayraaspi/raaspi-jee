<#assign tobegeneratedCandidate = "N">  
<#include "../view/assigns/mergedassigns.properties" >
<#include "../view/assigns/PositionLength.properties" >
<#if (pojo.shortName?length > eL)>
<#assign menuAttributes = pojo.shortName?substring(0,eL)?upper_case>
<#-- 56 (User) is a mandatory entity and will force .ftl to run once only even though ,ftl gets invoked for each entity -->
<#if (menuAttributes?substring(efS,efE) == '56') >
 <#assign tobegeneratedCandidate ="Y" >
</#if>
<#if tobegeneratedCandidate == "Y">                       
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:p="http://primefaces.org/ui"
                xmlns:c="http://java.sun.com/jsp/jstl/core"
                xmlns:fb="http://www.facebook.com/2008/fbml"
                xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
                template="layout/rtemplate.xhtml">
<#-- Generated By gen-vlogin.xhtml.ftl on ${.now}
not used now , signup is used
Login page
parameters passed: none
popupPanels: none
its on the main menu
-->
<f:metadata>
    <f:viewAction action="${'#'}{${userEntityName}Home.takeAction()}" />
</f:metadata>

<ui:define name="body">
    <h:messages globalOnly="false" styleClass="message"/>
   
    <h:form id="login">
     <p:jsFunction immediate="true" name="onFbLogin" ajaxSingle="true" action="${'#'}{${userEntityName}Home.onFbLogin()}">
      <p:param name="id" assignTo="${'#'}{${userEntityName}Home.fbUid}"/>
      <p:param name="email" assignTo="${'#'}{${userEntityName}Home.fbEmail}"/>
      <p:param name="name" assignTo="${'#'}{${userEntityName}Home.fbName}"/>
      <p:param name="first_name" assignTo="${'#'}{${userEntityName}Home.fbFirst_Name}"/>
      <p:param name="last_name" assignTo="${'#'}{${userEntityName}Home.fbLast_Name}"/>
      <p:param name="gender" assignTo="${'#'}{${userEntityName}Home.fbGender}"/>
      <p:param name="signupas"  assignTo="${'#'}{yxxxuh566xwwqqwxxxxxuserHome.signupas}"/>

     </p:jsFunction>

     <p:jsFunction immediate="true" name="onGgLogin" ajaxSingle="true" action="${'#'}{${userEntityName}Home.onFbLogin()}">
      <p:param name="idg" assignTo="${'#'}{${userEntityName}Home.fbUid}"/>
      <p:param name="emailg" assignTo="${'#'}{${userEntityName}Home.fbEmail}"/>
      <p:param name="nameg" assignTo="${'#'}{${userEntityName}Home.fbName}"/>
      <p:param name="first_nameg" assignTo="${'#'}{${userEntityName}Home.fbFirst_Name}"/>
      <p:param name="last_nameg" assignTo="${'#'}{${userEntityName}Home.fbLast_Name}"/>
      <p:param name="genderg" assignTo="${'#'}{${userEntityName}Home.fbGender}"/>
      <p:param name="signupas"  assignTo="${'#'}{yxxxuh566xwwqqwxxxxxuserHome.signupas}"/>
     </p:jsFunction>


<h:outputStylesheet>
.rf-tb {
    background-color:${'#'}{a4jSkin.tableSubHeaderBackgroundColor} !important;
    background-image: none; !important;
    color:${'#'}{a4jSkin.tableHeaderTextColor} !important;

}
.rf-cp-hdr {
    background-color:${'#'}{a4jSkin.generalBackgroundColor} !important;
    background-image: none; !important;
    color:${'#'}{a4jSkin.tableHeaderTextColor} !important;
    border-color:none;
    border:0;
}
.rf-p-hdr {
    background-color:${'#'}{a4jSkin.generalBackgroundColor} !important;
    background-image: none; !important;
    color:${'#'}{a4jSkin.tableHeaderTextColor} !important;
    border-color:none;
    border:0;

</h:outputStylesheet>

<script crossorigin="anonymous" src="https://connect.facebook.net/en_GB/sdk.js#xfbml=1&amp;version=v3.2&amp;appId=1493497040950348&amp;;autoLogAppEvents=1"></script>
<script src="https://apis.google.com/js/platform.js" >
</script>
    <script>
        function google_sign_callback(authResult){
         if(authResult['g-oauth-window']){

         alert("g-oauth-window");

         }else if(authResult['error']) {
         alert("g-oauth-error");

         }
        }
      function onSignIn(googleUser) {
       // Useful data for your client-side scripts:
       //alert("google login start "+profile.getId());
       if (confirm('It seems, you are signed into Google, Login to this App using Google ?') ){
        var profile = googleUser.getBasicProfile();
        onGgLogin(profile.getId(), profile.getEmail(), profile.getName(), profile.getGivenName(), profile.getFamilyName(), ' ','V');
        console.log("ID: " + profile.getId()); // Don't send this directly to your server!
        console.log('Full Name: ' + profile.getName());
        console.log('Given Name: ' + profile.getGivenName());
        console.log('Family Name: ' + profile.getFamilyName());
        console.log("Image URL: " + profile.getImageUrl());
        //alert("put delay for "+profile.getId());
        console.log("Email: " + profile.getEmail());
        document.getElementById('status').innerHTML = 'Welcome Google User '+profile.getName() ;
        //var auth2 = gapi.auth2.getAuthInstance();
        //auth2.disconnect();
        // The ID token you need to pass to your backend
        var id_token = googleUser.getAuthResponse().id_token;
        console.log("ID Token: " + id_token);
        //following needed to give delay
        alert("google login start "+profile.getName());
        googleUser.disconnect();
        //needed for edge browser 
        debug;
       }else{
        var auth2 = gapi.auth2.getAuthInstance();
        auth2.disconnect();
       }

       document.location.reload();


      }
    </script>
    <script>
     function signOut() {
      var auth2 = gapi.auth2.getAuthInstance();
      auth2.signOut().then(function () {
        console.log('User signed out.');
       });
     }
    </script>




<script>
  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
      //alert("check login state, from login button, getloginstatus, statuschangecallback");

      FB.getLoginStatus(function(response) {

      statusChangeCallback(response);


      //alert("Logging in to App using fb id");
    });
  }


  // This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
      //alert("status callback from fb");

    console.log('statusChangeCallback');
    console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      if (confirm('Continue with Login using facebook ?') ){
       //alert("continue with fb");
       FB.api('/me', function(response) {
       console.log('Successful login for: ' + response.name);
       onFbLogin(response.id, response.email, response.name, response.first_name, response.last_name, response.gender,'V');
       //document.location.reload();
       document.getElementById('status').innerHTML = 'Welcome Facebook User '+response.name ;

       //final response to user will come from server
       });

      }else{
        //alert("logout from fb");
         FB.logout(function () {
         FB.Auth.setAuthResponse(null, 'unknown');
         document.location.reload();
        });
      };
      //alert("You are connected/background connected to facebook, attempting ioggning out from fb.");
      //testAPI();
      //userLogin()
    } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      //document.getElementById('status').innerHTML = 'Please log ' +
      //  'into this app.';
      alert("connected to fb but not to this App");
    } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      //document.getElementById('status').innerHTML = 'If you are not LoggedIn to facebook app now, you need to agree to terms';
    }
  }


  function userLogin()
    {
        //alert("user login start");
        FB.login(function(response) 
        {
           if (confirm("Continue with facebook login?")){
           }else{
            alert("It seems, on this browser, you are using facebook now or still Logged In in the background. To allow login using non facebook Id , you need to Logout using facebook logout first. if needed, cancel login and then logout here as well. ");
            fbLogout();   
   
           }

           if (response.authResponse) 
           {
             //alert("authResponse");
             console.log('Welcome!  Fetching your information.... ');
             var access_token = response.authResponse.accessToken;
             location.href = "login.wflow";
           } 
           else 
           {
             console.log('User cancelled login or did not fully authorize.');
           }
         });
    }

  window.fbAsyncInit = function() {
  var aid;
   //alert(window.location.href);
  if (window.location.href.indexOf(".l3r") > -1) {
   aid = "1493497040950348";
  } else {
   aid = "462928240562239";
  }
   //alert(aid);
  FB.init({
    appId      : aid,
    cookie     : true,  // enable cookies to allow the server to access 
                        // the session
    xfbml      : true,  // parse social plugins on this page
    version    : 'v2.4' // use version 2.2
  });
  //appid if raaspi.com..   462928240562239
  // Now that we've initialized the JavaScript SDK, we call 
  // FB.getLoginStatus().  This function gets the state of the
  // person visiting this page and can return one of three states to
  // the callback you provide.  They can be:
  //
  // 1. Logged into your app ('connected')
  // 2. Logged into Facebook, but not your app ('not_authorized')
  // 3. Not logged into Facebook and can't tell if they are logged into
  //    your app or not.
  //
  // These three cases are handled in the callback function.

  //FB.getLoginStatus(function(response) {
    //statusChangeCallback(response);
  //});

  };

  // Load the SDK asynchronously
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));

  // Here we run a very simple test of the Graph API after login is
  // successful.  See statusChangeCallback() for when this call is made.
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Successful login for: ' + response.name);
      onFbLogin(response.id, response.email, response.name, response.first_name, response.last_name, response.gender,'V');
      document.getElementById('status').innerHTML = 'Welcome Facebook User '+response.name ;
      //final response to user will come from server
    });
  }
  function Logout() {
  FB.logout(function () { document.location.reload(); });
  }

</script>

	<p:toolbar height="26" itemSeparator="grid">
	  <p:toolbarGroup>
              <h:outputText value="Business Date Rolled" rendered="${'#'}{${controlusagebyperiodsEntityName}Home.managed}"/> 
	  </p:toolbarGroup>
	  <p:toolbarGroup location="${'#'}{${userEntityName}Home.mobile?'left':'right'}">
           <h:outputText value="Last Signed As " rendered="${'#'}{!identity.loggedIn and !yxxxuh566xwwqqwxxxxxuserHome.mobile}"/> 
           <h:outputText value="${'#'}{customIdentity.username}" rendered="${'#'}{!identity.loggedIn and !yxxxuh566xwwqqwxxxxxuserHome.mobile}"/> 
           <h:outputText value="${'#'}{messages.Today} " rendered="${'#'}{!identity.loggedIn and !yxxxuh566xwwqqwxxxxxuserHome.mobile}"/> 
           <h:outputText value="${'#'}{authenticator.currcaldates}" rendered="${'#'}{!identity.loggedIn and !yxxxuh566xwwqqwxxxxxuserHome.mobile}"/> 
           <h:button id="lbdone" image="./img/home_24.png"  alt="Cancel" value="Cancel" propagation="end"  outcome="/home.xhtml"
                    rendered="${'#'}{!identity.loggedIn and !yxxxuh566xwwqqwxxxxxuserHome.mobile}" >
                 <p:tooltip id="homeTip" attached="true" for="lbdone" >
                 <h:outputText value="${'#'}{messages.home_tip}" />
                 </p:tooltip>
           </h:button>
           <h:outputText id="QueryLabel" value="${'#'}{messages.searchTerm}" />
           <h:inputText id="Query" value="put search here" size="15" />
           <h:commandButton id="r3Search" action="/home.xhtml"  image="/img/Findblue16.png"
            value="${'#'}{messages.searchButton}" >
                 <p:tooltip id="searchTip" attached="true" for="r3Search" >
                 <h:outputText value="${'#'}{messages.search_tip}" />
                 </p:tooltip>
           </h:commandButton>
           <h:link id="Cart" outcome="/checkout.xhtml" value="Cart" propagation="none"  rendered="${'#'}{identity.loggedIn and !customIdentity.product=='s'}"  >
            <h:graphicImage value="/img/Cart32.png" styleClass="pic"/>
           </h:link>
		   <h:graphicImage id="Helpt" value="/img/help.gif" styleClass="pic">
             <p:tooltip > <span style="white-space: nowrap"> <h:inputTextarea  cols="70" rows="10" readonly="true"  value="${'#'}{messages['loginHelp']}"/></span> </p:tooltip> 
             </h:graphicImage>
	  </p:toolbarGroup>
       <h:messages globalOnly="true" styleClass="message" id="globalMessages"/>
	</p:toolbar>
    
        <p:accordionPanel switchType="client">
           <p:tab title="${'#'}{messages.Login}"  leftInactiveIcon="/img/LogIn16.png"> 
            <#noparse>
              <c:set var = "tpc" value="${'#'}{${userEntityName}Home.mobile?1:3}">
              </c:set>
            </#noparse>
  
              <h:outputText value="${'#'}{messages.Login_tip}"/>
              <h:outputText value=" "/>
              <h:outputText value="${'#'}{messages.demoLogin_tip}" rendered ="${'#'}{request.serverName.startsWith('myorg') or request.serverName.startsWith('mybus')}"/>
          
           <h:panelGroup>          
            <div class="dialog">
                <h:panelGrid columns="2" rowClasses="prop" columnClasses="name,value">
                    <h:outputLabel for="username">${'#'}{messages.Id}</h:outputLabel>
                    <h:inputText id="username" onclick="this.value='';"  pt:placeholder="Username"
                              required="true"
                              value="${'#'}{loginCredentials.userId}"/>
                    <h:outputLabel for="password">${'#'}{messages.Password}</h:outputLabel>
                    <h:inputSecret id="password" pt:placeholder="Password"
                              required="true"
                                value="${'#'}{loginCredentials.password}" redisplay="true"/>
                    <ui:remove>
                    <h:panelGrid columns="2">
                    <h:outputLabel for="rememberMe">${'#'}{messages.remember} ${'#'}{messages.my} ${'#'}{messages.id}</h:outputLabel>
                    <h:selectBooleanCheckbox id="rememberMe" 
                                          value="${'#'}{identity.rememberMe}"/>
                    </h:panelGrid>
                    </ui:remove>
                </h:panelGrid>
                <div class="actionButtons">
                 <h:commandButton rendered="${'#'}{!identity.loggedIn}" id="loginb" styleClass="buttonMain" value="Login" action="${'#'}{customIdentity.login}"/>
                 <h:button id="ltdone"  value="Cancel" propagation="end" outcome="/home.xhtml" />
                 <h:commandButton id="resendAct" value="Resend Activation " action="${'#'}{${userEntityName}Home.doResendActivationEmail()}"
                  rendered = "${'#'}{${userEntityName}Home}.activationPending}" />
                </div>
                <div>
                <br/>
                <h:outputText value="${'#'}{messages.signup_to_create_logon_Id}    " rendered ="${'#'}{(request.requestURI.contains('login.'))}"/>
                <h:link id="signupLink"  styleClass="hdrLink"  outcome="/signup.xhtml"  rendered ="${'#'}{not (request.serverName.startsWith('mybusiness') or request.serverName.startsWith('myorg')) and not identity.loggedIn and request.requestURI.contains('login.')}" value="${'#'}{messages.signup}" >
                 <p:tooltip id="signUpTip" attached="true" for="signupLink" >
                 <h:outputText value="${'#'}{messages.signup_tip}" rendered ="${'#'}{(request.requestURI.contains('login.'))}"/>
                 </p:tooltip>
                </h:link>
                <h:link id="demosignupLink"  styleClass="hdrLink"  outcome="/demosignup.xhtml"  rendered ="${'#'}{ ( (request.serverName.startsWith('mybusiness') or request.serverName.startsWith('myorg')) and not identity.loggedIn and request.requestURI.contains('login.'))}" value="${'#'}{messages.demosignup}" >
                 <p:tooltip id="demosignupTip" attached="true" for="demosignupLink">
                  <h:outputText value="${'#'}{messages.demosignup_tip}"/>
                 </p:tooltip>
                </h:link>
                <br></br><br></br><h:outputText id="skpsignUp" style="font-weight:bold" value="${'#'}{messages.Skip} ${'#'}{messages.signup}, ${'#'}{messages.click} ${'#'}{messages.social} ${'#'}{messages.media} ${'#'}{messages.login} " rendered ="${'#'}{(request.requestURI.contains('login.'))}">
                </h:outputText>
                <br></br>
                <h:outputText value="${'#'}{messages['Like']} ${'#'}{messages['this']}? ${'#'}{messages['create']} ${'#'}{messages['your']} ${'#'}{messages['own']} ${'#'}{messages['site']} " rendered ="${'#'}{request.requestURI.contains('login.') and (customIdentity.masterSite)}"/>
                <h:link id="registerLink"  styleClass="hdrLink"  outcome="/register.xhtml"  rendered ="${'#'}{(customIdentity.masterSite) and request.requestURI.contains('login.')}" value="${'#'}{messages['free']} ${'#'}{messages['trial']}" >
                </h:link>

                </div>
            </div>
           </h:panelGroup> 
           </p:tab> 
           <p:tab title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${'#'}{messages.Reseller} ${'#'}{messages.Login} ${'#'}{messages.using} ${'#'}{messages.social} ${'#'}{messages.media}"  > 
           <h:panelGrid columns="1">
              <p:panel>
              <div class="fb-login-button" scope="public_profile,email" onlogin="checkLoginState();" data-width="200px" data-size="large" data-button-type="login_with"  data-use-continue-as="true">
              </div>
              <br></br><br></br><div class="g-signin2" data-onsuccess="onSignIn" data-theme="dark"></div>
              </p:panel>
           </h:panelGrid>  
            <h:outputText value="${'#'}{messages.usage_terms}" escape="false"/>
            <h:commandLink value=" " id="termsOfUseLink" onclick="PF('termsOfUse').show()">
              <h:outputText value=" ${'#'}{messages['read']}"/>
            </h:commandLink><br/>


          <p id="status">
          </p>
          <div>
           <br/>
          </div>
                 <h:button  value="Cancel" propagation="end" outcome="/home.xhtml" />

           </p:tab> 
                
        </p:accordionPanel>

        <p:hotKey id="keyReturn" key="return" onkeydown="${'#'}{p:element('login:loginb')}.click()" enabledInInput="true"/>
        <p:hotKey id="keyESC" key="esc" onkeydown="${'#'}{p:element('login:ltdone')}.click()" enabledInInput="true"/>
      <br/><br/>
      <h:outputLink value="${'#'}" id="forgotLink" rendered ="${'#'}{!request.serverName.contains('example.com')}"
        onclick="PF('forgotPanel').show();">
        <h:outputText value="${'#'}{messages.login_forgot_password}"/>
      </h:outputLink>
      <h:outputText value=" " style="margin-left: 18px;" rendered ="${'#'}{!identity.loggedIn }"/>
      <h:outputText value="${'#'}{messages['Change']}"  rendered ="${'#'}{!identity.loggedIn }"/>
      <h:selectOneMenu value="${'#'}{authenticator.language}"  rendered ="${'#'}{!identity.loggedIn }"
 onchange="submit()">
       <f:selectItem itemLabel="English" itemValue="en"/>
       <f:selectItem itemLabel="French" itemValue="fr"/>
       <f:selectItem itemLabel="Deutsch" itemValue="de"/>
       <f:selectItem itemLabel="Bengali" itemValue="bn"/>
      </h:selectOneMenu>
<ui:remove>
      <h:selectOneMenu value="${'#'}{authenticator.country}"  rendered ="${'#'}{!identity.loggedIn }"
 onchange="submit()">
       <f:selectItem itemLabel="Canada" itemValue="CA"/>
       <f:selectItem itemLabel="USA" itemValue="US"/>
       <f:selectItem itemLabel="Germany" itemValue="DE"/>
       <f:selectItem itemLabel="France" itemValue="FR"/>
       <f:selectItem itemLabel="India" itemValue="IN"/>
      </h:selectOneMenu>
</ui:remove>
</h:form>



<h:form  >

 <p:popupPanel id="forgotPanel" modal="true" width="360" height="360" show="${'#'}{${userEntityName}Home.forgotPasswordError}" rendered="${'#'}{not identity.loggedIn}"
                    domElementAttachment="parent">
  <f:facet name="header"><h:outputText value="${'#'}{messages.login_forgot_password}"/></f:facet>
  <f:facet name="controls">
   <h:form>
    <p:commandButton onclick="PF('forgotPanel').hide()" type="image" image="/img/Cancel16.png"/>
   </h:form>
  </f:facet>
    <h:panelGrid >
      <f:facet name="header"><h:outputText value="${'#'}{messages.forgot_form_desc}"/></f:facet>
      <ui:decorate id="lostPasswordUserIdField" template="layout/edit.xhtml">
      <ui:define name="label">${'#'}{messages.login_username}</ui:define>
       <h:inputText id="lostPasswordUserId" required="true" value="${'#'}{${userEntityName}Home.lostPasswordUserId}"/>
      </ui:decorate>
        <p:commandButton type="button" id="resetLostPassword" action="${'#'}{${userEntityName}Home.doRecoverLostPassword()}"
        value="${'#'}{messages.reset_password}" render="pswdRecovered,jj,jj2,forgotPanel"  execute="forgotPanel"
        oncomplete="${'#'}{facesContext.maximumSeverity.ordinal != 0}?${'#'}{PF('forgotPanel')}.show():${'#'}{PF('forgotPanel')}.show()"
        status="buttonStatus"  />
             <p:status name="buttonStatus" >
              <f:facet name="start">
               <h:graphicImage value="./img/ajax-loader16.gif" />
              </f:facet>
             </p:status>
        <p:commandButton type="button" id="doneButtonr" value="${'#'}{messages.done}" 
         render="forgotPanel" execute="forgotPanel"
         oncomplete="{${'#'}{PF('forgotPanel')}.hide();}"/>
    </h:panelGrid>
       <h:messages globalOnly="false" styleClass="message" id="globalMessages"/>
    <p:message for="resetLostPassword">
      <f:facet name="errorMarker"><h:graphicImage value="/img/error.gif"/></f:facet>
    </p:message>


 </p:popupPanel>
</h:form>


<h:form  >
       <h:messages globalOnly="true" styleClass="message" id="globalMessages"/>

 <p:popupPanel id="pswdRecovered" modal="true" width="360" height="260" rendered="${'#'}{not identity.loggedIn}" show="${'#'}{${userEntityName}Home.recoveredPasswordEmail != null}"
                       domElementAttachment="parent">
  <f:facet name="header"><h:outputText value="${'#'}{messages.password_recovered}"/></f:facet>
  <f:facet name="controls">
   <h:form>
    <p:commandButton onclick="${'#'}{PF('pswdRecovered')}.hide()" type="image" image="/img/Cancel16.png"/>
   </h:form>
  </f:facet>
  <h:outputFormat value="${'#'}{messages.password_recovered_sent}" escape="false">
    <f:param value="${'#'}{guest.recoveredPasswordEmail}"/>
  </h:outputFormat>
  <h:panelGroup style="width: 320px; text-align: center;">
      <p:commandButton value="${'#'}{messages.ok}" onclick="${'#'}{PF('pswdRecovered')}.hide()"/>
  </h:panelGroup>
 </p:popupPanel>
</h:form>

<h:form  >
 <p:popupPanel id="termsOfUse" width="640" height="480" rendered="${'#'}{not identity.loggedIn}">
    <h:form>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<p:commandButton value="${'#'}{messages.close}" onclick="${'#'}{PF('termsOfUse')}.hide()"/>
    </h:form>
  <f:facet name="header"><h:outputText value="${'#'}{messages.terms_of_use}"/></f:facet>
  <f:facet name="controls">
   <h:form>
    <p:commandButton onclick="${'#'}{PF('termsOfUse')}.hide()" type="image" image="/img/Cancel16.png"/>
   </h:form>
  </f:facet>
  <ui:include src="legal.xhtml"/>
  <h:panelGroup style="width: 600px; text-align: center;">
    <h:form>
      <p:commandButton value="${'#'}{messages.ok}" onclick="${'#'}{PF('termsOfUse')}.hide()"/>
    </h:form>
  </h:panelGroup>
 </p:popupPanel>
</h:form>

<h:form  >
<p:popupPanel id="regPending" width="360" height="260" show="${'#'}{inactiveNewUser.userName != null}" rendered="${'#'}{not identity.loggedIn}">
  <f:facet name="header"><h:outputText value="${'#'}{messages.reg_pending_title}"/></f:facet>
  <f:facet name="controls">
    <h:form><p:commandButton onclick="${'#'}{PF('regPending')}.hide()" type="image" image="/img/close.gif"/></h:form>
  </f:facet>
  <h:outputFormat value="${'#'}{messages.reg_pending}" escape="false">
    <f:param value="${'#'}{${userEntityName}Home.clientName}"/>
    <f:param value="${'#'}{${userEntityName}Home.clientEmail}"/>
  </h:outputFormat>
  <h:panelGroup style="width: 320px; text-align: center;">
    <h:form>
      <br/>
      <p:commandButton value="${'#'}{messages.ok}" onclick="${'#'}{PF('regPending')}.hide()"/>
    </h:form>
  </h:panelGroup>
</p:popupPanel>
</h:form>



 </ui:define> 
</ui:composition>

</#if>
</#if>


